
F767-Web-server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013200  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000374c  08013400  08013400  00023400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016b4c  08016b4c  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08016b4c  08016b4c  00026b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016b54  08016b54  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016b54  08016b54  00026b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016b58  08016b58  00026b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08016b5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007154  2000007c  08016bd8  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200071d0  08016bd8  000371d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003316b  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000060c1  00000000  00000000  00063215  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018c8  00000000  00000000  000692d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001790  00000000  00000000  0006aba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003533e  00000000  00000000  0006c330  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022baa  00000000  00000000  000a166e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010e340  00000000  00000000  000c4218  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d2558  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b00  00000000  00000000  001d25d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000007c 	.word	0x2000007c
 800021c:	00000000 	.word	0x00000000
 8000220:	080133e8 	.word	0x080133e8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000080 	.word	0x20000080
 800023c:	080133e8 	.word	0x080133e8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <LedCGIhandler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

                        // the actual function for handling CGI [= CGI #5 =]
                        const char* LedCGIhandler(int iIndex, int iNumParams, char *pcParam[],
                        char *pcValue[]) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b086      	sub	sp, #24
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
 800061c:	603b      	str	r3, [r7, #0]

                            uint32_t i = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]

                            if (iIndex == 0) {
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d10a      	bne.n	800063e <LedCGIhandler+0x2e>

                                //turning the LED lights off
                                HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	4823      	ldr	r0, [pc, #140]	; (80006bc <LedCGIhandler+0xac>)
 800062e:	f001 fe73 	bl	8002318 <HAL_GPIO_WritePin>
                                HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000638:	4820      	ldr	r0, [pc, #128]	; (80006bc <LedCGIhandler+0xac>)
 800063a:	f001 fe6d 	bl	8002318 <HAL_GPIO_WritePin>

                            }

                            for (i = 0; i < iNumParams; i++) {
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	e032      	b.n	80006aa <LedCGIhandler+0x9a>

                                if (strcmp(pcParam[i], "led") == 0)
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	491c      	ldr	r1, [pc, #112]	; (80006c0 <LedCGIhandler+0xb0>)
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff fdf5 	bl	8000240 <strcmp>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d123      	bne.n	80006a4 <LedCGIhandler+0x94>

                                {

                                    if (strcmp(pcValue[i], "1") == 0) {
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	4413      	add	r3, r2
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4917      	ldr	r1, [pc, #92]	; (80006c4 <LedCGIhandler+0xb4>)
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff fde9 	bl	8000240 <strcmp>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d106      	bne.n	8000682 <LedCGIhandler+0x72>
                                        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067a:	4810      	ldr	r0, [pc, #64]	; (80006bc <LedCGIhandler+0xac>)
 800067c:	f001 fe4c 	bl	8002318 <HAL_GPIO_WritePin>
 8000680:	e010      	b.n	80006a4 <LedCGIhandler+0x94>
                                    }

                                    else if (strcmp(pcValue[i], "2") == 0) {
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	683a      	ldr	r2, [r7, #0]
 8000688:	4413      	add	r3, r2
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	490e      	ldr	r1, [pc, #56]	; (80006c8 <LedCGIhandler+0xb8>)
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fdd6 	bl	8000240 <strcmp>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d104      	bne.n	80006a4 <LedCGIhandler+0x94>

                                        HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800069a:	2201      	movs	r2, #1
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	4807      	ldr	r0, [pc, #28]	; (80006bc <LedCGIhandler+0xac>)
 80006a0:	f001 fe3a 	bl	8002318 <HAL_GPIO_WritePin>
                            for (i = 0; i < iNumParams; i++) {
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	3301      	adds	r3, #1
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	697a      	ldr	r2, [r7, #20]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d3c8      	bcc.n	8000644 <LedCGIhandler+0x34>
                                }

                            }

                            // the extension .shtml for SSI to work
                            return "/index.html";
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <LedCGIhandler+0xbc>)

                        } // END [= CGI #5 =]
 80006b4:	4618      	mov	r0, r3
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40020400 	.word	0x40020400
 80006c0:	0801340c 	.word	0x0801340c
 80006c4:	08013410 	.word	0x08013410
 80006c8:	08013414 	.word	0x08013414
 80006cc:	08013418 	.word	0x08013418

080006d0 <myCGIinit>:

                        // function to initialize CGI [= CGI #6 =]
                        void myCGIinit(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
                            //add LED control CGI to the table
                            theCGItable[0] = LedCGI;
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <myCGIinit+0x1c>)
 80006d6:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <myCGIinit+0x20>)
 80006d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006dc:	e883 0003 	stmia.w	r3, {r0, r1}
                            //give the table to the HTTP server
                            http_set_cgi_handlers(theCGItable, 1);
 80006e0:	2101      	movs	r1, #1
 80006e2:	4802      	ldr	r0, [pc, #8]	; (80006ec <myCGIinit+0x1c>)
 80006e4:	f005 f9c2 	bl	8005a6c <http_set_cgi_handlers>
                        } // END [= CGI #6 =]
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000af0 	.word	0x20000af0
 80006f0:	080163f0 	.word	0x080163f0

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fb8b 	bl	8000e12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f810 	bl	8000720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f000 f902 	bl	8000908 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000704:	f000 f8a2 	bl	800084c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000708:	f000 f8d0 	bl	80008ac <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 800070c:	f003 ff9c 	bl	8004648 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

                            // initializing the HTTPd [-HTTPd #2-]
                            httpd_init();
 8000710:	f005 f98c 	bl	8005a2c <httpd_init>

                            // initializing CGI  [= CGI #7 =]
                            myCGIinit();
 8000714:	f7ff ffdc 	bl	80006d0 <myCGIinit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
                            while (1) {

                                // starting the LWIP process [-HTTPd #3-]
                                MX_LWIP_Process();
 8000718:	f003 ffd6 	bl	80046c8 <MX_LWIP_Process>
 800071c:	e7fc      	b.n	8000718 <main+0x24>
	...

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b0b8      	sub	sp, #224	; 0xe0
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800072a:	2234      	movs	r2, #52	; 0x34
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f011 ff12 	bl	8012558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	2290      	movs	r2, #144	; 0x90
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f011 ff03 	bl	8012558 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000752:	f001 ff43 	bl	80025dc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b3a      	ldr	r3, [pc, #232]	; (8000840 <SystemClock_Config+0x120>)
 8000758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075a:	4a39      	ldr	r2, [pc, #228]	; (8000840 <SystemClock_Config+0x120>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	6413      	str	r3, [r2, #64]	; 0x40
 8000762:	4b37      	ldr	r3, [pc, #220]	; (8000840 <SystemClock_Config+0x120>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800076e:	4b35      	ldr	r3, [pc, #212]	; (8000844 <SystemClock_Config+0x124>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000776:	4a33      	ldr	r2, [pc, #204]	; (8000844 <SystemClock_Config+0x124>)
 8000778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077c:	6013      	str	r3, [r2, #0]
 800077e:	4b31      	ldr	r3, [pc, #196]	; (8000844 <SystemClock_Config+0x124>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078a:	2301      	movs	r3, #1
 800078c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000790:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000794:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000798:	2302      	movs	r3, #2
 800079a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a6:	2304      	movs	r3, #4
 80007a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007ac:	2360      	movs	r3, #96	; 0x60
 80007ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 ff6a 	bl	800269c <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80007ce:	f000 f94b 	bl	8000a68 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007d2:	f001 ff13 	bl	80025fc <HAL_PWREx_EnableOverDrive>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007dc:	f000 f944 	bl	8000a68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2302      	movs	r3, #2
 80007e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000800:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000804:	2103      	movs	r1, #3
 8000806:	4618      	mov	r0, r3
 8000808:	f002 f9f6 	bl	8002bf8 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000812:	f000 f929 	bl	8000a68 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <SystemClock_Config+0x128>)
 8000818:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800081a:	2300      	movs	r3, #0
 800081c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800081e:	2300      	movs	r3, #0
 8000820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	4618      	mov	r0, r3
 800082a:	f002 fbdd 	bl	8002fe8 <HAL_RCCEx_PeriphCLKConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000834:	f000 f918 	bl	8000a68 <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	37e0      	adds	r7, #224	; 0xe0
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000
 8000848:	00200100 	.word	0x00200100

0800084c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000852:	4a15      	ldr	r2, [pc, #84]	; (80008a8 <MX_USART3_UART_Init+0x5c>)
 8000854:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_USART3_UART_Init+0x58>)
 8000890:	f002 ffd0 	bl	8003834 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800089a:	f000 f8e5 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	2000066c 	.word	0x2000066c
 80008a8:	40004800 	.word	0x40004800

080008ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2206      	movs	r2, #6
 80008bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	2202      	movs	r2, #2
 80008c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	2202      	movs	r2, #2
 80008ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008dc:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f0:	f001 fd2b 	bl	800234a <HAL_PCD_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008fa:	f000 f8b5 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200006ec 	.word	0x200006ec

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	; 0x30
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4b4d      	ldr	r3, [pc, #308]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a4c      	ldr	r2, [pc, #304]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b4a      	ldr	r3, [pc, #296]	; (8000a54 <MX_GPIO_Init+0x14c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	4b47      	ldr	r3, [pc, #284]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a46      	ldr	r2, [pc, #280]	; (8000a54 <MX_GPIO_Init+0x14c>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b44      	ldr	r3, [pc, #272]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b41      	ldr	r3, [pc, #260]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a40      	ldr	r2, [pc, #256]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b3e      	ldr	r3, [pc, #248]	; (8000a54 <MX_GPIO_Init+0x14c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b3b      	ldr	r3, [pc, #236]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a3a      	ldr	r2, [pc, #232]	; (8000a54 <MX_GPIO_Init+0x14c>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097e:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a34      	ldr	r2, [pc, #208]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b32      	ldr	r3, [pc, #200]	; (8000a54 <MX_GPIO_Init+0x14c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000996:	4b2f      	ldr	r3, [pc, #188]	; (8000a54 <MX_GPIO_Init+0x14c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a2e      	ldr	r2, [pc, #184]	; (8000a54 <MX_GPIO_Init+0x14c>)
 800099c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <MX_GPIO_Init+0x14c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f244 0181 	movw	r1, #16513	; 0x4081
 80009b4:	4828      	ldr	r0, [pc, #160]	; (8000a58 <MX_GPIO_Init+0x150>)
 80009b6:	f001 fcaf 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2140      	movs	r1, #64	; 0x40
 80009be:	4827      	ldr	r0, [pc, #156]	; (8000a5c <MX_GPIO_Init+0x154>)
 80009c0:	f001 fcaa 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ca:	4b25      	ldr	r3, [pc, #148]	; (8000a60 <MX_GPIO_Init+0x158>)
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4822      	ldr	r0, [pc, #136]	; (8000a64 <MX_GPIO_Init+0x15c>)
 80009da:	f001 faf3 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80009de:	2301      	movs	r3, #1
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4818      	ldr	r0, [pc, #96]	; (8000a58 <MX_GPIO_Init+0x150>)
 80009f6:	f001 fae5 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80009fa:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4811      	ldr	r0, [pc, #68]	; (8000a58 <MX_GPIO_Init+0x150>)
 8000a14:	f001 fad6 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a18:	2340      	movs	r3, #64	; 0x40
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480b      	ldr	r0, [pc, #44]	; (8000a5c <MX_GPIO_Init+0x154>)
 8000a30:	f001 fac8 	bl	8001fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_GPIO_Init+0x154>)
 8000a48:	f001 fabc 	bl	8001fc4 <HAL_GPIO_Init>

}
 8000a4c:	bf00      	nop
 8000a4e:	3730      	adds	r7, #48	; 0x30
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020400 	.word	0x40020400
 8000a5c:	40021800 	.word	0x40021800
 8000a60:	10110000 	.word	0x10110000
 8000a64:	40020800 	.word	0x40020800

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7e:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <HAL_MspInit+0x44>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <HAL_MspInit+0x44>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_MspInit+0x44>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	4b09      	ldr	r3, [pc, #36]	; (8000abc <HAL_MspInit+0x44>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <HAL_MspInit+0x44>)
 8000a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa2:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_MspInit+0x44>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800

08000ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <HAL_UART_MspInit+0x7c>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d128      	bne.n	8000b34 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_UART_MspInit+0x80>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <HAL_UART_MspInit+0x80>)
 8000ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_UART_MspInit+0x80>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_UART_MspInit+0x80>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <HAL_UART_MspInit+0x80>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_UART_MspInit+0x80>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b24:	2307      	movs	r3, #7
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <HAL_UART_MspInit+0x84>)
 8000b30:	f001 fa48 	bl	8001fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40004800 	.word	0x40004800
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020c00 	.word	0x40020c00

08000b48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b68:	d141      	bne.n	8000bee <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <HAL_PCD_MspInit+0xb0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a22      	ldr	r2, [pc, #136]	; (8000bf8 <HAL_PCD_MspInit+0xb0>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <HAL_PCD_MspInit+0xb0>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b82:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b94:	230a      	movs	r3, #10
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4817      	ldr	r0, [pc, #92]	; (8000bfc <HAL_PCD_MspInit+0xb4>)
 8000ba0:	f001 fa10 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4810      	ldr	r0, [pc, #64]	; (8000bfc <HAL_PCD_MspInit+0xb4>)
 8000bba:	f001 fa03 	bl	8001fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_PCD_MspInit+0xb0>)
 8000bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc2:	4a0d      	ldr	r2, [pc, #52]	; (8000bf8 <HAL_PCD_MspInit+0xb0>)
 8000bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc8:	6353      	str	r3, [r2, #52]	; 0x34
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_PCD_MspInit+0xb0>)
 8000bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_PCD_MspInit+0xb0>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <HAL_PCD_MspInit+0xb0>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	; 0x44
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <HAL_PCD_MspInit+0xb0>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020000 	.word	0x40020000

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c54:	f000 f91a 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	e00a      	b.n	8000c84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c6e:	f3af 8000 	nop.w
 8000c72:	4601      	mov	r1, r0
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	60ba      	str	r2, [r7, #8]
 8000c7a:	b2ca      	uxtb	r2, r1
 8000c7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	3301      	adds	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697a      	ldr	r2, [r7, #20]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	dbf0      	blt.n	8000c6e <_read+0x12>
	}

return len;
 8000c8c:	687b      	ldr	r3, [r7, #4]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3718      	adds	r7, #24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	60f8      	str	r0, [r7, #12]
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
 8000ca6:	e009      	b.n	8000cbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	1c5a      	adds	r2, r3, #1
 8000cac:	60ba      	str	r2, [r7, #8]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbf1      	blt.n	8000ca8 <_write+0x12>
	}
	return len;
 8000cc4:	687b      	ldr	r3, [r7, #4]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_close>:

int _close(int file)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
	return -1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cf6:	605a      	str	r2, [r3, #4]
	return 0;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <_isatty>:

int _isatty(int file)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
	return 1;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
	return 0;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d40:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <_sbrk+0x50>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x16>
		heap_end = &end;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <_sbrk+0x50>)
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <_sbrk+0x54>)
 8000d4c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <_sbrk+0x50>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <_sbrk+0x50>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	466a      	mov	r2, sp
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d905      	bls.n	8000d6e <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <_sbrk+0x58>)
 8000d64:	220c      	movs	r2, #12
 8000d66:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6c:	e006      	b.n	8000d7c <_sbrk+0x44>
	}

	heap_end += incr;
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <_sbrk+0x50>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <_sbrk+0x50>)
 8000d78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	20000098 	.word	0x20000098
 8000d8c:	200071d0 	.word	0x200071d0
 8000d90:	200071cc 	.word	0x200071cc

08000d94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <SystemInit+0x28>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <SystemInit+0x28>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <SystemInit+0x28>)
 8000daa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dae:	609a      	str	r2, [r3, #8]
#endif
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dc6:	e003      	b.n	8000dd0 <LoopCopyDataInit>

08000dc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000dca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dce:	3104      	adds	r1, #4

08000dd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dd0:	480b      	ldr	r0, [pc, #44]	; (8000e00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dd2:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000dd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dd8:	d3f6      	bcc.n	8000dc8 <CopyDataInit>
  ldr  r2, =_sbss
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ddc:	e002      	b.n	8000de4 <LoopFillZerobss>

08000dde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000de0:	f842 3b04 	str.w	r3, [r2], #4

08000de4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000de6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000de8:	d3f9      	bcc.n	8000dde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dea:	f7ff ffd3 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f011 fb75 	bl	80124dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df2:	f7ff fc7f 	bl	80006f4 <main>
  bx  lr    
 8000df6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000df8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000dfc:	08016b5c 	.word	0x08016b5c
  ldr  r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e04:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000e08:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000e0c:	200071d0 	.word	0x200071d0

08000e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC_IRQHandler>

08000e12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e16:	2003      	movs	r0, #3
 8000e18:	f000 f92c 	bl	8001074 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f000 f805 	bl	8000e2c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e22:	f7ff fe29 	bl	8000a78 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e26:	2300      	movs	r3, #0
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f939 	bl	80010c2 <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f90f 	bl	800108a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000af8 	.word	0x20000af8

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	20000af8 	.word	0x20000af8

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_Delay+0x40>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000008 	.word	0x20000008

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <__NVIC_SetPriorityGrouping+0x40>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <__NVIC_SetPriorityGrouping+0x40>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00
 8000f54:	05fa0000 	.word	0x05fa0000

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	; (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	; (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	; 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	; 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001040:	d301      	bcc.n	8001046 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001042:	2301      	movs	r3, #1
 8001044:	e00f      	b.n	8001066 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <SysTick_Config+0x40>)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104e:	210f      	movs	r1, #15
 8001050:	f04f 30ff 	mov.w	r0, #4294967295
 8001054:	f7ff ff8e 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <SysTick_Config+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SysTick_Config+0x40>)
 8001060:	2207      	movs	r2, #7
 8001062:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010

08001074 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff47 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108a:	b580      	push	{r7, lr}
 800108c:	b086      	sub	sp, #24
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	60b9      	str	r1, [r7, #8]
 8001094:	607a      	str	r2, [r7, #4]
 8001096:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800109c:	f7ff ff5c 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 80010a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68b9      	ldr	r1, [r7, #8]
 80010a6:	6978      	ldr	r0, [r7, #20]
 80010a8:	f7ff ff8e 	bl	8000fc8 <NVIC_EncodePriority>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b2:	4611      	mov	r1, r2
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff ff5d 	bl	8000f74 <__NVIC_SetPriority>
}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ffb0 	bl	8001030 <SysTick_Config>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80010ec:	4ba9      	ldr	r3, [pc, #676]	; (8001394 <HAL_ETH_Init+0x2b8>)
 80010ee:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e183      	b.n	800140a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d106      	bne.n	800111c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f003 fae2 	bl	80046e0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111c:	4b9e      	ldr	r3, [pc, #632]	; (8001398 <HAL_ETH_Init+0x2bc>)
 800111e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001120:	4a9d      	ldr	r2, [pc, #628]	; (8001398 <HAL_ETH_Init+0x2bc>)
 8001122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001126:	6453      	str	r3, [r2, #68]	; 0x44
 8001128:	4b9b      	ldr	r3, [pc, #620]	; (8001398 <HAL_ETH_Init+0x2bc>)
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001134:	4b99      	ldr	r3, [pc, #612]	; (800139c <HAL_ETH_Init+0x2c0>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	4a98      	ldr	r2, [pc, #608]	; (800139c <HAL_ETH_Init+0x2c0>)
 800113a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800113e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001140:	4b96      	ldr	r3, [pc, #600]	; (800139c <HAL_ETH_Init+0x2c0>)
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	4994      	ldr	r1, [pc, #592]	; (800139c <HAL_ETH_Init+0x2c0>)
 800114a:	4313      	orrs	r3, r2
 800114c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f042 0201 	orr.w	r2, r2, #1
 8001160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001164:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001166:	f7ff fea5 	bl	8000eb4 <HAL_GetTick>
 800116a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800116c:	e011      	b.n	8001192 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800116e:	f7ff fea1 	bl	8000eb4 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800117c:	d909      	bls.n	8001192 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2203      	movs	r2, #3
 8001182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e13b      	b.n	800140a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1e4      	bne.n	800116e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f023 031c 	bic.w	r3, r3, #28
 80011b2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80011b4:	f001 fee4 	bl	8002f80 <HAL_RCC_GetHCLKFreq>
 80011b8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	4a78      	ldr	r2, [pc, #480]	; (80013a0 <HAL_ETH_Init+0x2c4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d908      	bls.n	80011d4 <HAL_ETH_Init+0xf8>
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	4a77      	ldr	r2, [pc, #476]	; (80013a4 <HAL_ETH_Init+0x2c8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d804      	bhi.n	80011d4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f043 0308 	orr.w	r3, r3, #8
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	e027      	b.n	8001224 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	4a73      	ldr	r2, [pc, #460]	; (80013a4 <HAL_ETH_Init+0x2c8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d908      	bls.n	80011ee <HAL_ETH_Init+0x112>
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	4a72      	ldr	r2, [pc, #456]	; (80013a8 <HAL_ETH_Init+0x2cc>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d804      	bhi.n	80011ee <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f043 030c 	orr.w	r3, r3, #12
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	e01a      	b.n	8001224 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	4a6d      	ldr	r2, [pc, #436]	; (80013a8 <HAL_ETH_Init+0x2cc>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d903      	bls.n	80011fe <HAL_ETH_Init+0x122>
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	4a6c      	ldr	r2, [pc, #432]	; (80013ac <HAL_ETH_Init+0x2d0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d911      	bls.n	8001222 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4a6a      	ldr	r2, [pc, #424]	; (80013ac <HAL_ETH_Init+0x2d0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d908      	bls.n	8001218 <HAL_ETH_Init+0x13c>
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	4a69      	ldr	r2, [pc, #420]	; (80013b0 <HAL_ETH_Init+0x2d4>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d804      	bhi.n	8001218 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	f043 0304 	orr.w	r3, r3, #4
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	e005      	b.n	8001224 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f043 0310 	orr.w	r3, r3, #16
 800121e:	61fb      	str	r3, [r7, #28]
 8001220:	e000      	b.n	8001224 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001222:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	69fa      	ldr	r2, [r7, #28]
 800122a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800122c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001230:	2100      	movs	r1, #0
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 fb9a 	bl	800196c <HAL_ETH_WritePHYRegister>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00b      	beq.n	8001256 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001242:	6939      	ldr	r1, [r7, #16]
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 fc27 	bl	8001a98 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e0d9      	b.n	800140a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001256:	20ff      	movs	r0, #255	; 0xff
 8001258:	f7ff fe38 	bl	8000ecc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 80a7 	beq.w	80013b4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001266:	f7ff fe25 	bl	8000eb4 <HAL_GetTick>
 800126a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	461a      	mov	r2, r3
 8001272:	2101      	movs	r1, #1
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 fb11 	bl	800189c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800127a:	f7ff fe1b 	bl	8000eb4 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	f241 3288 	movw	r2, #5000	; 0x1388
 8001288:	4293      	cmp	r3, r2
 800128a:	d90f      	bls.n	80012ac <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001290:	6939      	ldr	r1, [r7, #16]
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 fc00 	bl	8001a98 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e0ae      	b.n	800140a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0da      	beq.n	800126c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80012b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012ba:	2100      	movs	r1, #0
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fb55 	bl	800196c <HAL_ETH_WritePHYRegister>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00b      	beq.n	80012e0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012cc:	6939      	ldr	r1, [r7, #16]
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 fbe2 	bl	8001a98 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80012dc:	2301      	movs	r3, #1
 80012de:	e094      	b.n	800140a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80012e0:	f7ff fde8 	bl	8000eb4 <HAL_GetTick>
 80012e4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	461a      	mov	r2, r3
 80012ec:	2101      	movs	r1, #1
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fad4 	bl	800189c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80012f4:	f7ff fdde 	bl	8000eb4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001302:	4293      	cmp	r3, r2
 8001304:	d90f      	bls.n	8001326 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800130a:	6939      	ldr	r1, [r7, #16]
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fbc3 	bl	8001a98 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e071      	b.n	800140a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0da      	beq.n	80012e6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	461a      	mov	r2, r3
 8001336:	211f      	movs	r1, #31
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f000 faaf 	bl	800189c <HAL_ETH_ReadPHYRegister>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00b      	beq.n	800135c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001348:	6939      	ldr	r1, [r7, #16]
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 fba4 	bl	8001a98 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001358:	2301      	movs	r3, #1
 800135a:	e056      	b.n	800140a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	2b00      	cmp	r3, #0
 8001364:	d004      	beq.n	8001370 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	e002      	b.n	8001376 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	e037      	b.n	80013f8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	e032      	b.n	80013f8 <HAL_ETH_Init+0x31c>
 8001392:	bf00      	nop
 8001394:	03938700 	.word	0x03938700
 8001398:	40023800 	.word	0x40023800
 800139c:	40013800 	.word	0x40013800
 80013a0:	01312cff 	.word	0x01312cff
 80013a4:	02160ebf 	.word	0x02160ebf
 80013a8:	039386ff 	.word	0x039386ff
 80013ac:	05f5e0ff 	.word	0x05f5e0ff
 80013b0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	085b      	lsrs	r3, r3, #1
 80013c2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	2100      	movs	r1, #0
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 facd 	bl	800196c <HAL_ETH_WritePHYRegister>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00b      	beq.n	80013f0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013dc:	6939      	ldr	r1, [r7, #16]
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 fb5a 	bl	8001a98 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e00c      	b.n	800140a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80013f0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80013f4:	f7ff fd6a 	bl	8000ecc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80013f8:	6939      	ldr	r1, [r7, #16]
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 fb4c 	bl	8001a98 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2201      	movs	r2, #1
 8001404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3720      	adds	r7, #32
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop

08001414 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800142c:	2b01      	cmp	r3, #1
 800142e:	d101      	bne.n	8001434 <HAL_ETH_DMATxDescListInit+0x20>
 8001430:	2302      	movs	r3, #2
 8001432:	e052      	b.n	80014da <HAL_ETH_DMATxDescListInit+0xc6>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2202      	movs	r2, #2
 8001440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e030      	b.n	80014b2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	015b      	lsls	r3, r3, #5
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	4413      	add	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001460:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001468:	fb02 f303 	mul.w	r3, r2, r3
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	461a      	mov	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d105      	bne.n	800148a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3b01      	subs	r3, #1
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	429a      	cmp	r2, r3
 8001492:	d208      	bcs.n	80014a6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3301      	adds	r3, #1
 8001498:	015b      	lsls	r3, r3, #5
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	4413      	add	r3, r2
 800149e:	461a      	mov	r2, r3
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	e002      	b.n	80014ac <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	3301      	adds	r3, #1
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d3ca      	bcc.n	8001450 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6819      	ldr	r1, [r3, #0]
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	f241 0310 	movw	r3, #4112	; 0x1010
 80014c4:	440b      	add	r3, r1
 80014c6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	371c      	adds	r7, #28
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b087      	sub	sp, #28
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	60f8      	str	r0, [r7, #12]
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_ETH_DMARxDescListInit+0x20>
 8001502:	2302      	movs	r3, #2
 8001504:	e056      	b.n	80015b4 <HAL_ETH_DMARxDescListInit+0xce>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2202      	movs	r2, #2
 8001512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	68ba      	ldr	r2, [r7, #8]
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e034      	b.n	800158c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	015b      	lsls	r3, r3, #5
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	4413      	add	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001532:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800153a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	461a      	mov	r2, r3
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d105      	bne.n	8001564 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	3b01      	subs	r3, #1
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	429a      	cmp	r2, r3
 800156c:	d208      	bcs.n	8001580 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	3301      	adds	r3, #1
 8001572:	015b      	lsls	r3, r3, #5
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	4413      	add	r3, r2
 8001578:	461a      	mov	r2, r3
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	e002      	b.n	8001586 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d3c6      	bcc.n	8001522 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6819      	ldr	r1, [r3, #0]
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	f241 030c 	movw	r3, #4108	; 0x100c
 800159e:	440b      	add	r3, r1
 80015a0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	371c      	adds	r7, #28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_ETH_TransmitFrame+0x24>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e0cd      	b.n	8001780 <HAL_ETH_TransmitFrame+0x1c0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2202      	movs	r2, #2
 80015f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d109      	bne.n	800160e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800160a:	2301      	movs	r3, #1
 800160c:	e0b8      	b.n	8001780 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	da09      	bge.n	800162c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2212      	movs	r2, #18
 800161c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0a9      	b.n	8001780 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001632:	4293      	cmp	r3, r2
 8001634:	d915      	bls.n	8001662 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	4a54      	ldr	r2, [pc, #336]	; (800178c <HAL_ETH_TransmitFrame+0x1cc>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	0a9b      	lsrs	r3, r3, #10
 8001640:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	4b51      	ldr	r3, [pc, #324]	; (800178c <HAL_ETH_TransmitFrame+0x1cc>)
 8001646:	fba3 1302 	umull	r1, r3, r3, r2
 800164a:	0a9b      	lsrs	r3, r3, #10
 800164c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001650:	fb01 f303 	mul.w	r3, r1, r3
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e001      	b.n	8001666 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001662:	2301      	movs	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d11c      	bne.n	80016a6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001676:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800167a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001686:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001696:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	461a      	mov	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80016a4:	e04b      	b.n	800173e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	e044      	b.n	8001736 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016ba:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d107      	bne.n	80016d2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016d0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016da:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	3b01      	subs	r3, #1
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d116      	bne.n	8001714 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80016f4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	4a25      	ldr	r2, [pc, #148]	; (8001790 <HAL_ETH_TransmitFrame+0x1d0>)
 80016fa:	fb02 f203 	mul.w	r2, r2, r3
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	4413      	add	r3, r2
 8001702:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001706:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001712:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001722:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	461a      	mov	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	3301      	adds	r3, #1
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	429a      	cmp	r2, r3
 800173c:	d3b6      	bcc.n	80016ac <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	f241 0314 	movw	r3, #4116	; 0x1014
 8001746:	4413      	add	r3, r2
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0304 	and.w	r3, r3, #4
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00d      	beq.n	800176e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	f241 0314 	movw	r3, #4116	; 0x1014
 800175a:	4413      	add	r3, r2
 800175c:	2204      	movs	r2, #4
 800175e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	f241 0304 	movw	r3, #4100	; 0x1004
 8001768:	4413      	add	r3, r2
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	371c      	adds	r7, #28
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	ac02b00b 	.word	0xac02b00b
 8001790:	fffffa0c 	.word	0xfffffa0c

08001794 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <HAL_ETH_GetReceivedFrame+0x1a>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e070      	b.n	8001890 <HAL_ETH_GetReceivedFrame+0xfc>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2202      	movs	r2, #2
 80017ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	db5a      	blt.n	800187e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d030      	beq.n	8001838 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d103      	bne.n	80017f0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	0c1b      	lsrs	r3, r3, #16
 8001800:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001804:	3b04      	subs	r3, #4
 8001806:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	461a      	mov	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001834:	2300      	movs	r3, #0
 8001836:	e02b      	b.n	8001890 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001842:	2b00      	cmp	r3, #0
 8001844:	d010      	beq.n	8001868 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	461a      	mov	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	629a      	str	r2, [r3, #40]	; 0x28
 8001866:	e00a      	b.n	800187e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186c:	1c5a      	adds	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	461a      	mov	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	460b      	mov	r3, r1
 80018a6:	607a      	str	r2, [r7, #4]
 80018a8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b82      	cmp	r3, #130	; 0x82
 80018bc:	d101      	bne.n	80018c2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80018be:	2302      	movs	r3, #2
 80018c0:	e050      	b.n	8001964 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2282      	movs	r2, #130	; 0x82
 80018c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 031c 	and.w	r3, r3, #28
 80018d8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8a1b      	ldrh	r3, [r3, #16]
 80018de:	02db      	lsls	r3, r3, #11
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80018e8:	897b      	ldrh	r3, [r7, #10]
 80018ea:	019b      	lsls	r3, r3, #6
 80018ec:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f023 0302 	bic.w	r3, r3, #2
 80018fc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800190e:	f7ff fad1 	bl	8000eb4 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001914:	e015      	b.n	8001942 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001916:	f7ff facd 	bl	8000eb4 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001924:	d309      	bcc.n	800193a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e014      	b.n	8001964 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1e4      	bne.n	8001916 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	695b      	ldr	r3, [r3, #20]
 8001952:	b29b      	uxth	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	460b      	mov	r3, r1
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b42      	cmp	r3, #66	; 0x42
 800198c:	d101      	bne.n	8001992 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800198e:	2302      	movs	r3, #2
 8001990:	e04e      	b.n	8001a30 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2242      	movs	r2, #66	; 0x42
 8001996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f003 031c 	and.w	r3, r3, #28
 80019a8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8a1b      	ldrh	r3, [r3, #16]
 80019ae:	02db      	lsls	r3, r3, #11
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80019b8:	897b      	ldrh	r3, [r7, #10]
 80019ba:	019b      	lsls	r3, r3, #6
 80019bc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019e8:	f7ff fa64 	bl	8000eb4 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019ee:	e015      	b.n	8001a1c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80019f0:	f7ff fa60 	bl	8000eb4 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fe:	d309      	bcc.n	8001a14 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e00d      	b.n	8001a30 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1e4      	bne.n	80019f0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_ETH_Start+0x16>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e01f      	b.n	8001a8e <HAL_ETH_Start+0x56>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2202      	movs	r2, #2
 8001a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 fa1c 	bl	8001e9c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 fa36 	bl	8001ed6 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 fa80 	bl	8001f70 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fa4d 	bl	8001f10 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fa62 	bl	8001f40 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b0b0      	sub	sp, #192	; 0xc0
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ab4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001abc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d103      	bne.n	8001ae6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ae2:	663b      	str	r3, [r7, #96]	; 0x60
 8001ae4:	e001      	b.n	8001aea <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aee:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001af0:	2300      	movs	r3, #0
 8001af2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001af4:	2300      	movs	r3, #0
 8001af6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001b04:	2340      	movs	r3, #64	; 0x40
 8001b06:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001b6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b70:	4bab      	ldr	r3, [pc, #684]	; (8001e20 <ETH_MACDMAConfig+0x388>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001b7c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001b80:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001b84:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001b8a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001b8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001b8e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001b92:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001b98:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001b9c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001b9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001ba0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001ba4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001ba8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001bac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001bae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bc0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f7ff f97d 	bl	8000ecc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bda:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001bdc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001be0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001be2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001be4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001be6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001bea:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001bf0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001bf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001bf6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001bf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001bfc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001c00:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001c08:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001c0a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c16:	2001      	movs	r0, #1
 8001c18:	f7ff f958 	bl	8000ecc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c24:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c2e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c38:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001c44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c48:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001c52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c56:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001c58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001c5c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001c5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001c62:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001c64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001c68:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001c6e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001c70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001c74:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001c76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c88:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f7ff f919 	bl	8000ecc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ca2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001ca4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001ca8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7ff f904 	bl	8000ecc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ccc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001cdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ce0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001cf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d00:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d06:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d16:	2300      	movs	r3, #0
 8001d18:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d22:	4413      	add	r3, r2
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001d2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	; (8001e24 <ETH_MACDMAConfig+0x38c>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d36:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001d38:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d3a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001d3c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001d3e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001d40:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001d42:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001d44:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001d46:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001d48:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001d4a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001d4e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001d52:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001d56:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001d58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d70:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d7a:	4413      	add	r3, r2
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f7ff f8a2 	bl	8000ecc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001d90:	4413      	add	r3, r2
 8001d92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d96:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001d9c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001da0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001da4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001da8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dac:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001dae:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001db2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f7ff f87b 	bl	8000ecc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dde:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001de2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d10d      	bne.n	8001e08 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	f241 031c 	movw	r3, #4124	; 0x101c
 8001df4:	4413      	add	r3, r2
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6811      	ldr	r1, [r2, #0]
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <ETH_MACDMAConfig+0x390>)
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	f241 031c 	movw	r3, #4124	; 0x101c
 8001e04:	440b      	add	r3, r1
 8001e06:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	2100      	movs	r1, #0
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f80b 	bl	8001e2c <ETH_MACAddressConfig>
}
 8001e16:	bf00      	nop
 8001e18:	37c0      	adds	r7, #192	; 0xc0
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	ff20810f 	.word	0xff20810f
 8001e24:	f8de3f23 	.word	0xf8de3f23
 8001e28:	00010040 	.word	0x00010040

08001e2c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3305      	adds	r3, #5
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	3204      	adds	r2, #4
 8001e44:	7812      	ldrb	r2, [r2, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <ETH_MACAddressConfig+0x68>)
 8001e4e:	4413      	add	r3, r2
 8001e50:	461a      	mov	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3303      	adds	r3, #3
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	061a      	lsls	r2, r3, #24
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3302      	adds	r3, #2
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431a      	orrs	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	4313      	orrs	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	7812      	ldrb	r2, [r2, #0]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <ETH_MACAddressConfig+0x6c>)
 8001e7e:	4413      	add	r3, r2
 8001e80:	461a      	mov	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	6013      	str	r3, [r2, #0]
}
 8001e86:	bf00      	nop
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40028040 	.word	0x40028040
 8001e98:	40028044 	.word	0x40028044

08001e9c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0208 	orr.w	r2, r2, #8
 8001eb6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f7ff f803 	bl	8000ecc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	601a      	str	r2, [r3, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 0204 	orr.w	r2, r2, #4
 8001ef0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001efa:	2001      	movs	r0, #1
 8001efc:	f7fe ffe6 	bl	8000ecc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	601a      	str	r2, [r3, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f20:	4413      	add	r3, r2
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6811      	ldr	r1, [r2, #0]
 8001f28:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f2c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f30:	440b      	add	r3, r1
 8001f32:	601a      	str	r2, [r3, #0]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f50:	4413      	add	r3, r2
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6811      	ldr	r1, [r2, #0]
 8001f58:	f043 0202 	orr.w	r2, r3, #2
 8001f5c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f60:	440b      	add	r3, r1
 8001f62:	601a      	str	r2, [r3, #0]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f84:	4413      	add	r3, r2
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6811      	ldr	r1, [r2, #0]
 8001f8c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f90:	f241 0318 	movw	r3, #4120	; 0x1018
 8001f94:	440b      	add	r3, r1
 8001f96:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fa0:	4413      	add	r3, r2
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f7fe ff90 	bl	8000ecc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6819      	ldr	r1, [r3, #0]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	f241 0318 	movw	r3, #4120	; 0x1018
 8001fb6:	440b      	add	r3, r1
 8001fb8:	601a      	str	r2, [r3, #0]
}
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	e175      	b.n	80022d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	f040 8164 	bne.w	80022ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d00b      	beq.n	8002022 <HAL_GPIO_Init+0x5e>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002016:	2b11      	cmp	r3, #17
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b12      	cmp	r3, #18
 8002020:	d130      	bne.n	8002084 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002058:	2201      	movs	r2, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 0201 	and.w	r2, r3, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x100>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b12      	cmp	r3, #18
 80020c2:	d123      	bne.n	800210c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	08da      	lsrs	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3208      	adds	r2, #8
 80020cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	220f      	movs	r2, #15
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3208      	adds	r2, #8
 8002106:	69b9      	ldr	r1, [r7, #24]
 8002108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0203 	and.w	r2, r3, #3
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80be 	beq.w	80022ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	4b65      	ldr	r3, [pc, #404]	; (80022e4 <HAL_GPIO_Init+0x320>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	4a64      	ldr	r2, [pc, #400]	; (80022e4 <HAL_GPIO_Init+0x320>)
 8002154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002158:	6453      	str	r3, [r2, #68]	; 0x44
 800215a:	4b62      	ldr	r3, [pc, #392]	; (80022e4 <HAL_GPIO_Init+0x320>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002166:	4a60      	ldr	r2, [pc, #384]	; (80022e8 <HAL_GPIO_Init+0x324>)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3302      	adds	r3, #2
 800216e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	220f      	movs	r2, #15
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a57      	ldr	r2, [pc, #348]	; (80022ec <HAL_GPIO_Init+0x328>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d037      	beq.n	8002202 <HAL_GPIO_Init+0x23e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a56      	ldr	r2, [pc, #344]	; (80022f0 <HAL_GPIO_Init+0x32c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d031      	beq.n	80021fe <HAL_GPIO_Init+0x23a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a55      	ldr	r2, [pc, #340]	; (80022f4 <HAL_GPIO_Init+0x330>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d02b      	beq.n	80021fa <HAL_GPIO_Init+0x236>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a54      	ldr	r2, [pc, #336]	; (80022f8 <HAL_GPIO_Init+0x334>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d025      	beq.n	80021f6 <HAL_GPIO_Init+0x232>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a53      	ldr	r2, [pc, #332]	; (80022fc <HAL_GPIO_Init+0x338>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d01f      	beq.n	80021f2 <HAL_GPIO_Init+0x22e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a52      	ldr	r2, [pc, #328]	; (8002300 <HAL_GPIO_Init+0x33c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d019      	beq.n	80021ee <HAL_GPIO_Init+0x22a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a51      	ldr	r2, [pc, #324]	; (8002304 <HAL_GPIO_Init+0x340>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_GPIO_Init+0x226>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a50      	ldr	r2, [pc, #320]	; (8002308 <HAL_GPIO_Init+0x344>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00d      	beq.n	80021e6 <HAL_GPIO_Init+0x222>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4f      	ldr	r2, [pc, #316]	; (800230c <HAL_GPIO_Init+0x348>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d007      	beq.n	80021e2 <HAL_GPIO_Init+0x21e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4e      	ldr	r2, [pc, #312]	; (8002310 <HAL_GPIO_Init+0x34c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d101      	bne.n	80021de <HAL_GPIO_Init+0x21a>
 80021da:	2309      	movs	r3, #9
 80021dc:	e012      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021de:	230a      	movs	r3, #10
 80021e0:	e010      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021e2:	2308      	movs	r3, #8
 80021e4:	e00e      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021e6:	2307      	movs	r3, #7
 80021e8:	e00c      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021ea:	2306      	movs	r3, #6
 80021ec:	e00a      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021ee:	2305      	movs	r3, #5
 80021f0:	e008      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021f2:	2304      	movs	r3, #4
 80021f4:	e006      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021f6:	2303      	movs	r3, #3
 80021f8:	e004      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e002      	b.n	8002204 <HAL_GPIO_Init+0x240>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_GPIO_Init+0x240>
 8002202:	2300      	movs	r3, #0
 8002204:	69fa      	ldr	r2, [r7, #28]
 8002206:	f002 0203 	and.w	r2, r2, #3
 800220a:	0092      	lsls	r2, r2, #2
 800220c:	4093      	lsls	r3, r2
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002214:	4934      	ldr	r1, [pc, #208]	; (80022e8 <HAL_GPIO_Init+0x324>)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	3302      	adds	r3, #2
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002222:	4b3c      	ldr	r3, [pc, #240]	; (8002314 <HAL_GPIO_Init+0x350>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002246:	4a33      	ldr	r2, [pc, #204]	; (8002314 <HAL_GPIO_Init+0x350>)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800224c:	4b31      	ldr	r3, [pc, #196]	; (8002314 <HAL_GPIO_Init+0x350>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002270:	4a28      	ldr	r2, [pc, #160]	; (8002314 <HAL_GPIO_Init+0x350>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002276:	4b27      	ldr	r3, [pc, #156]	; (8002314 <HAL_GPIO_Init+0x350>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	43db      	mvns	r3, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4013      	ands	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229a:	4a1e      	ldr	r2, [pc, #120]	; (8002314 <HAL_GPIO_Init+0x350>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a0:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <HAL_GPIO_Init+0x350>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c4:	4a13      	ldr	r2, [pc, #76]	; (8002314 <HAL_GPIO_Init+0x350>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3301      	adds	r3, #1
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	f67f ae86 	bls.w	8001fe4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022d8:	bf00      	nop
 80022da:	3724      	adds	r7, #36	; 0x24
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40013800 	.word	0x40013800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40020400 	.word	0x40020400
 80022f4:	40020800 	.word	0x40020800
 80022f8:	40020c00 	.word	0x40020c00
 80022fc:	40021000 	.word	0x40021000
 8002300:	40021400 	.word	0x40021400
 8002304:	40021800 	.word	0x40021800
 8002308:	40021c00 	.word	0x40021c00
 800230c:	40022000 	.word	0x40022000
 8002310:	40022400 	.word	0x40022400
 8002314:	40013c00 	.word	0x40013c00

08002318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	807b      	strh	r3, [r7, #2]
 8002324:	4613      	mov	r3, r2
 8002326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002328:	787b      	ldrb	r3, [r7, #1]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002334:	e003      	b.n	800233e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002336:	887b      	ldrh	r3, [r7, #2]
 8002338:	041a      	lsls	r2, r3, #16
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	619a      	str	r2, [r3, #24]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800234a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800234c:	b08f      	sub	sp, #60	; 0x3c
 800234e:	af0a      	add	r7, sp, #40	; 0x28
 8002350:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e116      	b.n	800258a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d106      	bne.n	800237c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe fbe6 	bl	8000b48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2203      	movs	r2, #3
 8002380:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800238c:	2b00      	cmp	r3, #0
 800238e:	d102      	bne.n	8002396 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f001 fefc 	bl	8004198 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	687e      	ldr	r6, [r7, #4]
 80023a8:	466d      	mov	r5, sp
 80023aa:	f106 0410 	add.w	r4, r6, #16
 80023ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80023be:	1d33      	adds	r3, r6, #4
 80023c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023c2:	6838      	ldr	r0, [r7, #0]
 80023c4:	f001 fe90 	bl	80040e8 <USB_CoreInit>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2202      	movs	r2, #2
 80023d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e0d7      	b.n	800258a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f001 feea 	bl	80041ba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	e04a      	b.n	8002482 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023ec:	7bfa      	ldrb	r2, [r7, #15]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	333d      	adds	r3, #61	; 0x3d
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	333c      	adds	r3, #60	; 0x3c
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	b298      	uxth	r0, r3
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	3342      	adds	r3, #66	; 0x42
 8002428:	4602      	mov	r2, r0
 800242a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	333f      	adds	r3, #63	; 0x3f
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	3344      	adds	r3, #68	; 0x44
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	3348      	adds	r3, #72	; 0x48
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002468:	7bfa      	ldrb	r2, [r7, #15]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	3350      	adds	r3, #80	; 0x50
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	3301      	adds	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	429a      	cmp	r2, r3
 800248a:	d3af      	bcc.n	80023ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]
 8002490:	e044      	b.n	800251c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	1a9b      	subs	r3, r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80024ba:	7bfa      	ldrb	r2, [r7, #15]
 80024bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	1a9b      	subs	r3, r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	1a9b      	subs	r3, r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024ea:	7bfa      	ldrb	r2, [r7, #15]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002500:	7bfa      	ldrb	r2, [r7, #15]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	3301      	adds	r3, #1
 800251a:	73fb      	strb	r3, [r7, #15]
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	d3b5      	bcc.n	8002492 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	687e      	ldr	r6, [r7, #4]
 800252e:	466d      	mov	r5, sp
 8002530:	f106 0410 	add.w	r4, r6, #16
 8002534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800253a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800253c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002540:	e885 0003 	stmia.w	r5, {r0, r1}
 8002544:	1d33      	adds	r3, r6, #4
 8002546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002548:	6838      	ldr	r0, [r7, #0]
 800254a:	f001 fe61 	bl	8004210 <USB_DevInit>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e014      	b.n	800258a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	2b01      	cmp	r3, #1
 8002576:	d102      	bne.n	800257e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f80b 	bl	8002594 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f002 f813 	bl	80045ae <USB_DevDisconnect>

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002594 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_PCDEx_ActivateLPM+0x44>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	10000003 	.word	0x10000003

080025dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ea:	6013      	str	r3, [r2, #0]
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40007000 	.word	0x40007000

080025fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <HAL_PWREx_EnableOverDrive+0x98>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	4a22      	ldr	r2, [pc, #136]	; (8002694 <HAL_PWREx_EnableOverDrive+0x98>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002610:	6413      	str	r3, [r2, #64]	; 0x40
 8002612:	4b20      	ldr	r3, [pc, #128]	; (8002694 <HAL_PWREx_EnableOverDrive+0x98>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	603b      	str	r3, [r7, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800261e:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800262a:	f7fe fc43 	bl	8000eb4 <HAL_GetTick>
 800262e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002630:	e009      	b.n	8002646 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002632:	f7fe fc3f 	bl	8000eb4 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002640:	d901      	bls.n	8002646 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e022      	b.n	800268c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002652:	d1ee      	bne.n	8002632 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0f      	ldr	r2, [pc, #60]	; (8002698 <HAL_PWREx_EnableOverDrive+0x9c>)
 800265a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800265e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002660:	f7fe fc28 	bl	8000eb4 <HAL_GetTick>
 8002664:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002666:	e009      	b.n	800267c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002668:	f7fe fc24 	bl	8000eb4 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002676:	d901      	bls.n	800267c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e007      	b.n	800268c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_PWREx_EnableOverDrive+0x9c>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002684:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002688:	d1ee      	bne.n	8002668 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40023800 	.word	0x40023800
 8002698:	40007000 	.word	0x40007000

0800269c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80026a4:	2300      	movs	r3, #0
 80026a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e29b      	b.n	8002bea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8087 	beq.w	80027ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026c0:	4b96      	ldr	r3, [pc, #600]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d00c      	beq.n	80026e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026cc:	4b93      	ldr	r3, [pc, #588]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 030c 	and.w	r3, r3, #12
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d112      	bne.n	80026fe <HAL_RCC_OscConfig+0x62>
 80026d8:	4b90      	ldr	r3, [pc, #576]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026e4:	d10b      	bne.n	80026fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e6:	4b8d      	ldr	r3, [pc, #564]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d06c      	beq.n	80027cc <HAL_RCC_OscConfig+0x130>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d168      	bne.n	80027cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e275      	b.n	8002bea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002706:	d106      	bne.n	8002716 <HAL_RCC_OscConfig+0x7a>
 8002708:	4b84      	ldr	r3, [pc, #528]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a83      	ldr	r2, [pc, #524]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800270e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	e02e      	b.n	8002774 <HAL_RCC_OscConfig+0xd8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x9c>
 800271e:	4b7f      	ldr	r3, [pc, #508]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a7e      	ldr	r2, [pc, #504]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b7c      	ldr	r3, [pc, #496]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a7b      	ldr	r2, [pc, #492]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e01d      	b.n	8002774 <HAL_RCC_OscConfig+0xd8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0xc0>
 8002742:	4b76      	ldr	r3, [pc, #472]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a75      	ldr	r2, [pc, #468]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b73      	ldr	r3, [pc, #460]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a72      	ldr	r2, [pc, #456]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0xd8>
 800275c:	4b6f      	ldr	r3, [pc, #444]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a6e      	ldr	r2, [pc, #440]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b6c      	ldr	r3, [pc, #432]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a6b      	ldr	r2, [pc, #428]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe fb9a 	bl	8000eb4 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe fb96 	bl	8000eb4 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e229      	b.n	8002bea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	4b61      	ldr	r3, [pc, #388]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0xe8>
 80027a2:	e014      	b.n	80027ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fb86 	bl	8000eb4 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe fb82 	bl	8000eb4 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e215      	b.n	8002bea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027be:	4b57      	ldr	r3, [pc, #348]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x110>
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d069      	beq.n	80028ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027da:	4b50      	ldr	r3, [pc, #320]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e6:	4b4d      	ldr	r3, [pc, #308]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d11c      	bne.n	800282c <HAL_RCC_OscConfig+0x190>
 80027f2:	4b4a      	ldr	r3, [pc, #296]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d116      	bne.n	800282c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fe:	4b47      	ldr	r3, [pc, #284]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <HAL_RCC_OscConfig+0x17a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d001      	beq.n	8002816 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e1e9      	b.n	8002bea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002816:	4b41      	ldr	r3, [pc, #260]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	493d      	ldr	r1, [pc, #244]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282a:	e040      	b.n	80028ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d023      	beq.n	800287c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002834:	4b39      	ldr	r3, [pc, #228]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a38      	ldr	r2, [pc, #224]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7fe fb38 	bl	8000eb4 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002848:	f7fe fb34 	bl	8000eb4 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e1c7      	b.n	8002bea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285a:	4b30      	ldr	r3, [pc, #192]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002866:	4b2d      	ldr	r3, [pc, #180]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4929      	ldr	r1, [pc, #164]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
 800287a:	e018      	b.n	80028ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <HAL_RCC_OscConfig+0x280>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a26      	ldr	r2, [pc, #152]	; (800291c <HAL_RCC_OscConfig+0x280>)
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe fb14 	bl	8000eb4 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002890:	f7fe fb10 	bl	8000eb4 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e1a3      	b.n	8002bea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a2:	4b1e      	ldr	r3, [pc, #120]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d038      	beq.n	800292c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d019      	beq.n	80028f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80028c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c6:	4a15      	ldr	r2, [pc, #84]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ce:	f7fe faf1 	bl	8000eb4 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028d6:	f7fe faed 	bl	8000eb4 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e180      	b.n	8002bea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80028ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f0      	beq.n	80028d6 <HAL_RCC_OscConfig+0x23a>
 80028f4:	e01a      	b.n	800292c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80028f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fa:	4a08      	ldr	r2, [pc, #32]	; (800291c <HAL_RCC_OscConfig+0x280>)
 80028fc:	f023 0301 	bic.w	r3, r3, #1
 8002900:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002902:	f7fe fad7 	bl	8000eb4 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002908:	e00a      	b.n	8002920 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290a:	f7fe fad3 	bl	8000eb4 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d903      	bls.n	8002920 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e166      	b.n	8002bea <HAL_RCC_OscConfig+0x54e>
 800291c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002920:	4b92      	ldr	r3, [pc, #584]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ee      	bne.n	800290a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80a4 	beq.w	8002a82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293a:	4b8c      	ldr	r3, [pc, #560]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10d      	bne.n	8002962 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	4b89      	ldr	r3, [pc, #548]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	4a88      	ldr	r2, [pc, #544]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 800294c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002950:	6413      	str	r3, [r2, #64]	; 0x40
 8002952:	4b86      	ldr	r3, [pc, #536]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800295e:	2301      	movs	r3, #1
 8002960:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002962:	4b83      	ldr	r3, [pc, #524]	; (8002b70 <HAL_RCC_OscConfig+0x4d4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800296a:	2b00      	cmp	r3, #0
 800296c:	d118      	bne.n	80029a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800296e:	4b80      	ldr	r3, [pc, #512]	; (8002b70 <HAL_RCC_OscConfig+0x4d4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a7f      	ldr	r2, [pc, #508]	; (8002b70 <HAL_RCC_OscConfig+0x4d4>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002978:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800297a:	f7fe fa9b 	bl	8000eb4 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002982:	f7fe fa97 	bl	8000eb4 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b64      	cmp	r3, #100	; 0x64
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e12a      	b.n	8002bea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002994:	4b76      	ldr	r3, [pc, #472]	; (8002b70 <HAL_RCC_OscConfig+0x4d4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x31a>
 80029a8:	4b70      	ldr	r3, [pc, #448]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	4a6f      	ldr	r2, [pc, #444]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6713      	str	r3, [r2, #112]	; 0x70
 80029b4:	e02d      	b.n	8002a12 <HAL_RCC_OscConfig+0x376>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x33c>
 80029be:	4b6b      	ldr	r3, [pc, #428]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a6a      	ldr	r2, [pc, #424]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ca:	4b68      	ldr	r3, [pc, #416]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	4a67      	ldr	r2, [pc, #412]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 80029d0:	f023 0304 	bic.w	r3, r3, #4
 80029d4:	6713      	str	r3, [r2, #112]	; 0x70
 80029d6:	e01c      	b.n	8002a12 <HAL_RCC_OscConfig+0x376>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b05      	cmp	r3, #5
 80029de:	d10c      	bne.n	80029fa <HAL_RCC_OscConfig+0x35e>
 80029e0:	4b62      	ldr	r3, [pc, #392]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a61      	ldr	r2, [pc, #388]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	6713      	str	r3, [r2, #112]	; 0x70
 80029ec:	4b5f      	ldr	r3, [pc, #380]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	4a5e      	ldr	r2, [pc, #376]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6713      	str	r3, [r2, #112]	; 0x70
 80029f8:	e00b      	b.n	8002a12 <HAL_RCC_OscConfig+0x376>
 80029fa:	4b5c      	ldr	r3, [pc, #368]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	4a5b      	ldr	r2, [pc, #364]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	6713      	str	r3, [r2, #112]	; 0x70
 8002a06:	4b59      	ldr	r3, [pc, #356]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	4a58      	ldr	r2, [pc, #352]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d015      	beq.n	8002a46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fa4b 	bl	8000eb4 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a20:	e00a      	b.n	8002a38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7fe fa47 	bl	8000eb4 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e0d8      	b.n	8002bea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a38:	4b4c      	ldr	r3, [pc, #304]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0ee      	beq.n	8002a22 <HAL_RCC_OscConfig+0x386>
 8002a44:	e014      	b.n	8002a70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a46:	f7fe fa35 	bl	8000eb4 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a4c:	e00a      	b.n	8002a64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	f7fe fa31 	bl	8000eb4 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e0c2      	b.n	8002bea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a64:	4b41      	ldr	r3, [pc, #260]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1ee      	bne.n	8002a4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a70:	7dfb      	ldrb	r3, [r7, #23]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d105      	bne.n	8002a82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a76:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	4a3c      	ldr	r2, [pc, #240]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80ae 	beq.w	8002be8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a8c:	4b37      	ldr	r3, [pc, #220]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	f003 030c 	and.w	r3, r3, #12
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d06d      	beq.n	8002b74 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d14b      	bne.n	8002b38 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa0:	4b32      	ldr	r3, [pc, #200]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a31      	ldr	r2, [pc, #196]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002aa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7fe fa02 	bl	8000eb4 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe f9fe 	bl	8000eb4 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e091      	b.n	8002bea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	4b29      	ldr	r3, [pc, #164]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	019b      	lsls	r3, r3, #6
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	085b      	lsrs	r3, r3, #1
 8002aea:	3b01      	subs	r3, #1
 8002aec:	041b      	lsls	r3, r3, #16
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	061b      	lsls	r3, r3, #24
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	071b      	lsls	r3, r3, #28
 8002afe:	491b      	ldr	r1, [pc, #108]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a18      	ldr	r2, [pc, #96]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe f9d0 	bl	8000eb4 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe f9cc 	bl	8000eb4 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e05f      	b.n	8002bea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x47c>
 8002b36:	e057      	b.n	8002be8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0b      	ldr	r2, [pc, #44]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe f9b6 	bl	8000eb4 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe f9b2 	bl	8000eb4 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e045      	b.n	8002bea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	4b03      	ldr	r3, [pc, #12]	; (8002b6c <HAL_RCC_OscConfig+0x4d0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f0      	bne.n	8002b4c <HAL_RCC_OscConfig+0x4b0>
 8002b6a:	e03d      	b.n	8002be8 <HAL_RCC_OscConfig+0x54c>
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b74:	4b1f      	ldr	r3, [pc, #124]	; (8002bf4 <HAL_RCC_OscConfig+0x558>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d030      	beq.n	8002be4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d129      	bne.n	8002be4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d122      	bne.n	8002be4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002baa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d119      	bne.n	8002be4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d10f      	bne.n	8002be4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d107      	bne.n	8002be4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800

08002bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0d0      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c10:	4b6a      	ldr	r3, [pc, #424]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d910      	bls.n	8002c40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1e:	4b67      	ldr	r3, [pc, #412]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f023 020f 	bic.w	r2, r3, #15
 8002c26:	4965      	ldr	r1, [pc, #404]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2e:	4b63      	ldr	r3, [pc, #396]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d001      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0b8      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d020      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d005      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c58:	4b59      	ldr	r3, [pc, #356]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4a58      	ldr	r2, [pc, #352]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d005      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c70:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4a52      	ldr	r2, [pc, #328]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7c:	4b50      	ldr	r3, [pc, #320]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	494d      	ldr	r1, [pc, #308]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d040      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d107      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d115      	bne.n	8002cda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e07f      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d107      	bne.n	8002cca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cba:	4b41      	ldr	r3, [pc, #260]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d109      	bne.n	8002cda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e073      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cca:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e06b      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cda:	4b39      	ldr	r3, [pc, #228]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f023 0203 	bic.w	r2, r3, #3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4936      	ldr	r1, [pc, #216]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cec:	f7fe f8e2 	bl	8000eb4 <HAL_GetTick>
 8002cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf2:	e00a      	b.n	8002d0a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf4:	f7fe f8de 	bl	8000eb4 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e053      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0a:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 020c 	and.w	r2, r3, #12
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d1eb      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d1c:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d210      	bcs.n	8002d4c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2a:	4b24      	ldr	r3, [pc, #144]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f023 020f 	bic.w	r2, r3, #15
 8002d32:	4922      	ldr	r1, [pc, #136]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3a:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <HAL_RCC_ClockConfig+0x1c4>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d001      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e032      	b.n	8002db2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d58:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	4916      	ldr	r1, [pc, #88]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d009      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d76:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	490e      	ldr	r1, [pc, #56]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d8a:	f000 f821 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8002d8e:	4601      	mov	r1, r0
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <HAL_RCC_ClockConfig+0x1cc>)
 8002d9c:	5cd3      	ldrb	r3, [r2, r3]
 8002d9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002da2:	4a09      	ldr	r2, [pc, #36]	; (8002dc8 <HAL_RCC_ClockConfig+0x1d0>)
 8002da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_RCC_ClockConfig+0x1d4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe f83e 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023c00 	.word	0x40023c00
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	080163f8 	.word	0x080163f8
 8002dc8:	20000000 	.word	0x20000000
 8002dcc:	20000004 	.word	0x20000004

08002dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	2300      	movs	r3, #0
 8002de0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002de6:	4b63      	ldr	r3, [pc, #396]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d007      	beq.n	8002e02 <HAL_RCC_GetSysClockFreq+0x32>
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d008      	beq.n	8002e08 <HAL_RCC_GetSysClockFreq+0x38>
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f040 80b4 	bne.w	8002f64 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dfc:	4b5e      	ldr	r3, [pc, #376]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002dfe:	60bb      	str	r3, [r7, #8]
      break;
 8002e00:	e0b3      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e02:	4b5e      	ldr	r3, [pc, #376]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002e04:	60bb      	str	r3, [r7, #8]
      break;
 8002e06:	e0b0      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e08:	4b5a      	ldr	r3, [pc, #360]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e10:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e12:	4b58      	ldr	r3, [pc, #352]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d04a      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e1e:	4b55      	ldr	r3, [pc, #340]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	099b      	lsrs	r3, r3, #6
 8002e24:	f04f 0400 	mov.w	r4, #0
 8002e28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	ea03 0501 	and.w	r5, r3, r1
 8002e34:	ea04 0602 	and.w	r6, r4, r2
 8002e38:	4629      	mov	r1, r5
 8002e3a:	4632      	mov	r2, r6
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	f04f 0400 	mov.w	r4, #0
 8002e44:	0154      	lsls	r4, r2, #5
 8002e46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e4a:	014b      	lsls	r3, r1, #5
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4622      	mov	r2, r4
 8002e50:	1b49      	subs	r1, r1, r5
 8002e52:	eb62 0206 	sbc.w	r2, r2, r6
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	f04f 0400 	mov.w	r4, #0
 8002e5e:	0194      	lsls	r4, r2, #6
 8002e60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e64:	018b      	lsls	r3, r1, #6
 8002e66:	1a5b      	subs	r3, r3, r1
 8002e68:	eb64 0402 	sbc.w	r4, r4, r2
 8002e6c:	f04f 0100 	mov.w	r1, #0
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	00e2      	lsls	r2, r4, #3
 8002e76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e7a:	00d9      	lsls	r1, r3, #3
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4614      	mov	r4, r2
 8002e80:	195b      	adds	r3, r3, r5
 8002e82:	eb44 0406 	adc.w	r4, r4, r6
 8002e86:	f04f 0100 	mov.w	r1, #0
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	0262      	lsls	r2, r4, #9
 8002e90:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002e94:	0259      	lsls	r1, r3, #9
 8002e96:	460b      	mov	r3, r1
 8002e98:	4614      	mov	r4, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	4621      	mov	r1, r4
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f04f 0400 	mov.w	r4, #0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4623      	mov	r3, r4
 8002ea8:	f7fd fa32 	bl	8000310 <__aeabi_uldivmod>
 8002eac:	4603      	mov	r3, r0
 8002eae:	460c      	mov	r4, r1
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e049      	b.n	8002f48 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb4:	4b2f      	ldr	r3, [pc, #188]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	099b      	lsrs	r3, r3, #6
 8002eba:	f04f 0400 	mov.w	r4, #0
 8002ebe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ec2:	f04f 0200 	mov.w	r2, #0
 8002ec6:	ea03 0501 	and.w	r5, r3, r1
 8002eca:	ea04 0602 	and.w	r6, r4, r2
 8002ece:	4629      	mov	r1, r5
 8002ed0:	4632      	mov	r2, r6
 8002ed2:	f04f 0300 	mov.w	r3, #0
 8002ed6:	f04f 0400 	mov.w	r4, #0
 8002eda:	0154      	lsls	r4, r2, #5
 8002edc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ee0:	014b      	lsls	r3, r1, #5
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4622      	mov	r2, r4
 8002ee6:	1b49      	subs	r1, r1, r5
 8002ee8:	eb62 0206 	sbc.w	r2, r2, r6
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	f04f 0400 	mov.w	r4, #0
 8002ef4:	0194      	lsls	r4, r2, #6
 8002ef6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002efa:	018b      	lsls	r3, r1, #6
 8002efc:	1a5b      	subs	r3, r3, r1
 8002efe:	eb64 0402 	sbc.w	r4, r4, r2
 8002f02:	f04f 0100 	mov.w	r1, #0
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	00e2      	lsls	r2, r4, #3
 8002f0c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f10:	00d9      	lsls	r1, r3, #3
 8002f12:	460b      	mov	r3, r1
 8002f14:	4614      	mov	r4, r2
 8002f16:	195b      	adds	r3, r3, r5
 8002f18:	eb44 0406 	adc.w	r4, r4, r6
 8002f1c:	f04f 0100 	mov.w	r1, #0
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	02a2      	lsls	r2, r4, #10
 8002f26:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f2a:	0299      	lsls	r1, r3, #10
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4614      	mov	r4, r2
 8002f30:	4618      	mov	r0, r3
 8002f32:	4621      	mov	r1, r4
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f04f 0400 	mov.w	r4, #0
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4623      	mov	r3, r4
 8002f3e:	f7fd f9e7 	bl	8000310 <__aeabi_uldivmod>
 8002f42:	4603      	mov	r3, r0
 8002f44:	460c      	mov	r4, r1
 8002f46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	0c1b      	lsrs	r3, r3, #16
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	3301      	adds	r3, #1
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	60bb      	str	r3, [r7, #8]
      break;
 8002f62:	e002      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f66:	60bb      	str	r3, [r7, #8]
      break;
 8002f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f74:	40023800 	.word	0x40023800
 8002f78:	00f42400 	.word	0x00f42400
 8002f7c:	007a1200 	.word	0x007a1200

08002f80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f86:	681b      	ldr	r3, [r3, #0]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	20000000 	.word	0x20000000

08002f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f9c:	f7ff fff0 	bl	8002f80 <HAL_RCC_GetHCLKFreq>
 8002fa0:	4601      	mov	r1, r0
 8002fa2:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	0a9b      	lsrs	r3, r3, #10
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	4a03      	ldr	r2, [pc, #12]	; (8002fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fae:	5cd3      	ldrb	r3, [r2, r3]
 8002fb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	08016408 	.word	0x08016408

08002fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fc4:	f7ff ffdc 	bl	8002f80 <HAL_RCC_GetHCLKFreq>
 8002fc8:	4601      	mov	r1, r0
 8002fca:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	0b5b      	lsrs	r3, r3, #13
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	4a03      	ldr	r2, [pc, #12]	; (8002fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd6:	5cd3      	ldrb	r3, [r2, r3]
 8002fd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	08016408 	.word	0x08016408

08002fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003000:	2300      	movs	r3, #0
 8003002:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	2b00      	cmp	r3, #0
 800300e:	d012      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003010:	4b69      	ldr	r3, [pc, #420]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4a68      	ldr	r2, [pc, #416]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003016:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800301a:	6093      	str	r3, [r2, #8]
 800301c:	4b66      	ldr	r3, [pc, #408]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	4964      	ldr	r1, [pc, #400]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003026:	4313      	orrs	r3, r2
 8003028:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003032:	2301      	movs	r3, #1
 8003034:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d017      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003042:	4b5d      	ldr	r3, [pc, #372]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003048:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003050:	4959      	ldr	r1, [pc, #356]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003060:	d101      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003062:	2301      	movs	r3, #1
 8003064:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800306e:	2301      	movs	r3, #1
 8003070:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d017      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800307e:	4b4e      	ldr	r3, [pc, #312]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003084:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308c:	494a      	ldr	r1, [pc, #296]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800309c:	d101      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800309e:	2301      	movs	r3, #1
 80030a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80030aa:	2301      	movs	r3, #1
 80030ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80030ba:	2301      	movs	r3, #1
 80030bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 808b 	beq.w	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030cc:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	4a39      	ldr	r2, [pc, #228]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d6:	6413      	str	r3, [r2, #64]	; 0x40
 80030d8:	4b37      	ldr	r3, [pc, #220]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030e4:	4b35      	ldr	r3, [pc, #212]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a34      	ldr	r2, [pc, #208]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f0:	f7fd fee0 	bl	8000eb4 <HAL_GetTick>
 80030f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f8:	f7fd fedc 	bl	8000eb4 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e38d      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800310a:	4b2c      	ldr	r3, [pc, #176]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003116:	4b28      	ldr	r3, [pc, #160]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d035      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	429a      	cmp	r2, r3
 8003132:	d02e      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003134:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800313c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800313e:	4b1e      	ldr	r3, [pc, #120]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	4a1d      	ldr	r2, [pc, #116]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003148:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800314a:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	4a1a      	ldr	r2, [pc, #104]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003154:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003156:	4a18      	ldr	r2, [pc, #96]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800315c:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b01      	cmp	r3, #1
 8003166:	d114      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fd fea4 	bl	8000eb4 <HAL_GetTick>
 800316c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316e:	e00a      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003170:	f7fd fea0 	bl	8000eb4 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	f241 3288 	movw	r2, #5000	; 0x1388
 800317e:	4293      	cmp	r3, r2
 8003180:	d901      	bls.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e34f      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003186:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0ee      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800319e:	d111      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80031ae:	400b      	ands	r3, r1
 80031b0:	4901      	ldr	r1, [pc, #4]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	608b      	str	r3, [r1, #8]
 80031b6:	e00b      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80031b8:	40023800 	.word	0x40023800
 80031bc:	40007000 	.word	0x40007000
 80031c0:	0ffffcff 	.word	0x0ffffcff
 80031c4:	4bb3      	ldr	r3, [pc, #716]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4ab2      	ldr	r2, [pc, #712]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80031ce:	6093      	str	r3, [r2, #8]
 80031d0:	4bb0      	ldr	r3, [pc, #704]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031dc:	49ad      	ldr	r1, [pc, #692]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d010      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031ee:	4ba9      	ldr	r3, [pc, #676]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031f4:	4aa7      	ldr	r2, [pc, #668]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031fe:	4ba5      	ldr	r3, [pc, #660]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003200:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	49a2      	ldr	r1, [pc, #648]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800321c:	4b9d      	ldr	r3, [pc, #628]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800322a:	499a      	ldr	r1, [pc, #616]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800323e:	4b95      	ldr	r3, [pc, #596]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003244:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800324c:	4991      	ldr	r1, [pc, #580]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003260:	4b8c      	ldr	r3, [pc, #560]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003266:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800326e:	4989      	ldr	r1, [pc, #548]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003282:	4b84      	ldr	r3, [pc, #528]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003288:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	4980      	ldr	r1, [pc, #512]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032a4:	4b7b      	ldr	r3, [pc, #492]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	f023 0203 	bic.w	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	4978      	ldr	r1, [pc, #480]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032c6:	4b73      	ldr	r3, [pc, #460]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032cc:	f023 020c 	bic.w	r2, r3, #12
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d4:	496f      	ldr	r1, [pc, #444]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032e8:	4b6a      	ldr	r3, [pc, #424]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f6:	4967      	ldr	r1, [pc, #412]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800330a:	4b62      	ldr	r3, [pc, #392]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800330c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003310:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003318:	495e      	ldr	r1, [pc, #376]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800332c:	4b59      	ldr	r3, [pc, #356]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003332:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	4956      	ldr	r1, [pc, #344]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800334e:	4b51      	ldr	r3, [pc, #324]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003354:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335c:	494d      	ldr	r1, [pc, #308]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003370:	4b48      	ldr	r3, [pc, #288]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337e:	4945      	ldr	r1, [pc, #276]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003392:	4b40      	ldr	r3, [pc, #256]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a0:	493c      	ldr	r1, [pc, #240]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033b4:	4b37      	ldr	r3, [pc, #220]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c2:	4934      	ldr	r1, [pc, #208]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d011      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033d6:	4b2f      	ldr	r3, [pc, #188]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e4:	492b      	ldr	r1, [pc, #172]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033f4:	d101      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003406:	2301      	movs	r3, #1
 8003408:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003416:	4b1f      	ldr	r3, [pc, #124]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003424:	491b      	ldr	r1, [pc, #108]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00b      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003448:	4912      	ldr	r1, [pc, #72]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00b      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800345c:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800345e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003462:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346c:	4909      	ldr	r1, [pc, #36]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00f      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003480:	4b04      	ldr	r3, [pc, #16]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003486:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003490:	e002      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800
 8003498:	4985      	ldr	r1, [pc, #532]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800349a:	4313      	orrs	r3, r2
 800349c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00b      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80034ac:	4b80      	ldr	r3, [pc, #512]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034bc:	497c      	ldr	r1, [pc, #496]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d005      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034d2:	f040 80d6 	bne.w	8003682 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80034d6:	4b76      	ldr	r3, [pc, #472]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a75      	ldr	r2, [pc, #468]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e2:	f7fd fce7 	bl	8000eb4 <HAL_GetTick>
 80034e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034ea:	f7fd fce3 	bl	8000eb4 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b64      	cmp	r3, #100	; 0x64
 80034f6:	d901      	bls.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e194      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034fc:	4b6c      	ldr	r3, [pc, #432]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1f0      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d021      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003518:	2b00      	cmp	r3, #0
 800351a:	d11d      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800351c:	4b64      	ldr	r3, [pc, #400]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800351e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003522:	0c1b      	lsrs	r3, r3, #16
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800352a:	4b61      	ldr	r3, [pc, #388]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800352c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003530:	0e1b      	lsrs	r3, r3, #24
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	019a      	lsls	r2, r3, #6
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	041b      	lsls	r3, r3, #16
 8003542:	431a      	orrs	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	061b      	lsls	r3, r3, #24
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	071b      	lsls	r3, r3, #28
 8003550:	4957      	ldr	r1, [pc, #348]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d004      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003576:	2b00      	cmp	r3, #0
 8003578:	d02e      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003582:	d129      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003584:	4b4a      	ldr	r3, [pc, #296]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800358a:	0c1b      	lsrs	r3, r3, #16
 800358c:	f003 0303 	and.w	r3, r3, #3
 8003590:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003592:	4b47      	ldr	r3, [pc, #284]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003598:	0f1b      	lsrs	r3, r3, #28
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	019a      	lsls	r2, r3, #6
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	041b      	lsls	r3, r3, #16
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	061b      	lsls	r3, r3, #24
 80035b2:	431a      	orrs	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	071b      	lsls	r3, r3, #28
 80035b8:	493d      	ldr	r1, [pc, #244]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80035c0:	4b3b      	ldr	r3, [pc, #236]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c6:	f023 021f 	bic.w	r2, r3, #31
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ce:	3b01      	subs	r3, #1
 80035d0:	4937      	ldr	r1, [pc, #220]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d01d      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035e4:	4b32      	ldr	r3, [pc, #200]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ea:	0e1b      	lsrs	r3, r3, #24
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035f2:	4b2f      	ldr	r3, [pc, #188]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80035f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f8:	0f1b      	lsrs	r3, r3, #28
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	019a      	lsls	r2, r3, #6
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	041b      	lsls	r3, r3, #16
 800360c:	431a      	orrs	r2, r3
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	061b      	lsls	r3, r3, #24
 8003612:	431a      	orrs	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	071b      	lsls	r3, r3, #28
 8003618:	4925      	ldr	r1, [pc, #148]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d011      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	019a      	lsls	r2, r3, #6
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	041b      	lsls	r3, r3, #16
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	061b      	lsls	r3, r3, #24
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	071b      	lsls	r3, r3, #28
 8003648:	4919      	ldr	r1, [pc, #100]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003650:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003656:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800365a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800365c:	f7fd fc2a 	bl	8000eb4 <HAL_GetTick>
 8003660:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003664:	f7fd fc26 	bl	8000eb4 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b64      	cmp	r3, #100	; 0x64
 8003670:	d901      	bls.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e0d7      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003676:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b01      	cmp	r3, #1
 8003686:	f040 80cd 	bne.w	8003824 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800368a:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a08      	ldr	r2, [pc, #32]	; (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003696:	f7fd fc0d 	bl	8000eb4 <HAL_GetTick>
 800369a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800369c:	e00a      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800369e:	f7fd fc09 	bl	8000eb4 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b64      	cmp	r3, #100	; 0x64
 80036aa:	d903      	bls.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0ba      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80036b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036b4:	4b5e      	ldr	r3, [pc, #376]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036c0:	d0ed      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d009      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d02e      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d12a      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036ea:	4b51      	ldr	r3, [pc, #324]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036f8:	4b4d      	ldr	r3, [pc, #308]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fe:	0f1b      	lsrs	r3, r3, #28
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	019a      	lsls	r2, r3, #6
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	041b      	lsls	r3, r3, #16
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	061b      	lsls	r3, r3, #24
 8003718:	431a      	orrs	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	071b      	lsls	r3, r3, #28
 800371e:	4944      	ldr	r1, [pc, #272]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003726:	4b42      	ldr	r3, [pc, #264]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800372c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	3b01      	subs	r3, #1
 8003736:	021b      	lsls	r3, r3, #8
 8003738:	493d      	ldr	r1, [pc, #244]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d022      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003754:	d11d      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003756:	4b36      	ldr	r3, [pc, #216]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375c:	0e1b      	lsrs	r3, r3, #24
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003764:	4b32      	ldr	r3, [pc, #200]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376a:	0f1b      	lsrs	r3, r3, #28
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	019a      	lsls	r2, r3, #6
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	041b      	lsls	r3, r3, #16
 800377e:	431a      	orrs	r2, r3
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	061b      	lsls	r3, r3, #24
 8003784:	431a      	orrs	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	071b      	lsls	r3, r3, #28
 800378a:	4929      	ldr	r1, [pc, #164]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800378c:	4313      	orrs	r3, r2
 800378e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d028      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800379e:	4b24      	ldr	r3, [pc, #144]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	0e1b      	lsrs	r3, r3, #24
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037ac:	4b20      	ldr	r3, [pc, #128]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b2:	0c1b      	lsrs	r3, r3, #16
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	019a      	lsls	r2, r3, #6
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	041b      	lsls	r3, r3, #16
 80037c4:	431a      	orrs	r2, r3
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	061b      	lsls	r3, r3, #24
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	071b      	lsls	r3, r3, #28
 80037d2:	4917      	ldr	r1, [pc, #92]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	4911      	ldr	r1, [pc, #68]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037f0:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0e      	ldr	r2, [pc, #56]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80037f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037fc:	f7fd fb5a 	bl	8000eb4 <HAL_GetTick>
 8003800:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003804:	f7fd fb56 	bl	8000eb4 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b64      	cmp	r3, #100	; 0x64
 8003810:	d901      	bls.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e007      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003816:	4b06      	ldr	r3, [pc, #24]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800381e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003822:	d1ef      	bne.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	40023800 	.word	0x40023800

08003834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e040      	b.n	80038c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fd f932 	bl	8000ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2224      	movs	r2, #36	; 0x24
 8003860:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0201 	bic.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f82c 	bl	80038d0 <UART_SetConfig>
 8003878:	4603      	mov	r3, r0
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e022      	b.n	80038c8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	2b00      	cmp	r3, #0
 8003888:	d002      	beq.n	8003890 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 faca 	bl	8003e24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800389e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fb51 	bl	8003f68 <UART_CheckIdleState>
 80038c6:	4603      	mov	r3, r0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80038d8:	2300      	movs	r3, #0
 80038da:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4bb1      	ldr	r3, [pc, #708]	; (8003bc4 <UART_SetConfig+0x2f4>)
 8003900:	4013      	ands	r3, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	6939      	ldr	r1, [r7, #16]
 8003908:	430b      	orrs	r3, r1
 800390a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	430a      	orrs	r2, r1
 8003944:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a9f      	ldr	r2, [pc, #636]	; (8003bc8 <UART_SetConfig+0x2f8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d121      	bne.n	8003994 <UART_SetConfig+0xc4>
 8003950:	4b9e      	ldr	r3, [pc, #632]	; (8003bcc <UART_SetConfig+0x2fc>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	f003 0303 	and.w	r3, r3, #3
 800395a:	2b03      	cmp	r3, #3
 800395c:	d816      	bhi.n	800398c <UART_SetConfig+0xbc>
 800395e:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <UART_SetConfig+0x94>)
 8003960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003964:	08003975 	.word	0x08003975
 8003968:	08003981 	.word	0x08003981
 800396c:	0800397b 	.word	0x0800397b
 8003970:	08003987 	.word	0x08003987
 8003974:	2301      	movs	r3, #1
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e151      	b.n	8003c1e <UART_SetConfig+0x34e>
 800397a:	2302      	movs	r3, #2
 800397c:	77fb      	strb	r3, [r7, #31]
 800397e:	e14e      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003980:	2304      	movs	r3, #4
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e14b      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003986:	2308      	movs	r3, #8
 8003988:	77fb      	strb	r3, [r7, #31]
 800398a:	e148      	b.n	8003c1e <UART_SetConfig+0x34e>
 800398c:	2310      	movs	r3, #16
 800398e:	77fb      	strb	r3, [r7, #31]
 8003990:	bf00      	nop
 8003992:	e144      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a8d      	ldr	r2, [pc, #564]	; (8003bd0 <UART_SetConfig+0x300>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d134      	bne.n	8003a08 <UART_SetConfig+0x138>
 800399e:	4b8b      	ldr	r3, [pc, #556]	; (8003bcc <UART_SetConfig+0x2fc>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	f003 030c 	and.w	r3, r3, #12
 80039a8:	2b0c      	cmp	r3, #12
 80039aa:	d829      	bhi.n	8003a00 <UART_SetConfig+0x130>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <UART_SetConfig+0xe4>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039e9 	.word	0x080039e9
 80039b8:	08003a01 	.word	0x08003a01
 80039bc:	08003a01 	.word	0x08003a01
 80039c0:	08003a01 	.word	0x08003a01
 80039c4:	080039f5 	.word	0x080039f5
 80039c8:	08003a01 	.word	0x08003a01
 80039cc:	08003a01 	.word	0x08003a01
 80039d0:	08003a01 	.word	0x08003a01
 80039d4:	080039ef 	.word	0x080039ef
 80039d8:	08003a01 	.word	0x08003a01
 80039dc:	08003a01 	.word	0x08003a01
 80039e0:	08003a01 	.word	0x08003a01
 80039e4:	080039fb 	.word	0x080039fb
 80039e8:	2300      	movs	r3, #0
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	e117      	b.n	8003c1e <UART_SetConfig+0x34e>
 80039ee:	2302      	movs	r3, #2
 80039f0:	77fb      	strb	r3, [r7, #31]
 80039f2:	e114      	b.n	8003c1e <UART_SetConfig+0x34e>
 80039f4:	2304      	movs	r3, #4
 80039f6:	77fb      	strb	r3, [r7, #31]
 80039f8:	e111      	b.n	8003c1e <UART_SetConfig+0x34e>
 80039fa:	2308      	movs	r3, #8
 80039fc:	77fb      	strb	r3, [r7, #31]
 80039fe:	e10e      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003a00:	2310      	movs	r3, #16
 8003a02:	77fb      	strb	r3, [r7, #31]
 8003a04:	bf00      	nop
 8003a06:	e10a      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a71      	ldr	r2, [pc, #452]	; (8003bd4 <UART_SetConfig+0x304>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d120      	bne.n	8003a54 <UART_SetConfig+0x184>
 8003a12:	4b6e      	ldr	r3, [pc, #440]	; (8003bcc <UART_SetConfig+0x2fc>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a18:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d00f      	beq.n	8003a40 <UART_SetConfig+0x170>
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d802      	bhi.n	8003a2a <UART_SetConfig+0x15a>
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <UART_SetConfig+0x164>
 8003a28:	e010      	b.n	8003a4c <UART_SetConfig+0x17c>
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	d005      	beq.n	8003a3a <UART_SetConfig+0x16a>
 8003a2e:	2b30      	cmp	r3, #48	; 0x30
 8003a30:	d009      	beq.n	8003a46 <UART_SetConfig+0x176>
 8003a32:	e00b      	b.n	8003a4c <UART_SetConfig+0x17c>
 8003a34:	2300      	movs	r3, #0
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	e0f1      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	77fb      	strb	r3, [r7, #31]
 8003a3e:	e0ee      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003a40:	2304      	movs	r3, #4
 8003a42:	77fb      	strb	r3, [r7, #31]
 8003a44:	e0eb      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003a46:	2308      	movs	r3, #8
 8003a48:	77fb      	strb	r3, [r7, #31]
 8003a4a:	e0e8      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	77fb      	strb	r3, [r7, #31]
 8003a50:	bf00      	nop
 8003a52:	e0e4      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a5f      	ldr	r2, [pc, #380]	; (8003bd8 <UART_SetConfig+0x308>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d120      	bne.n	8003aa0 <UART_SetConfig+0x1d0>
 8003a5e:	4b5b      	ldr	r3, [pc, #364]	; (8003bcc <UART_SetConfig+0x2fc>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a68:	2b40      	cmp	r3, #64	; 0x40
 8003a6a:	d00f      	beq.n	8003a8c <UART_SetConfig+0x1bc>
 8003a6c:	2b40      	cmp	r3, #64	; 0x40
 8003a6e:	d802      	bhi.n	8003a76 <UART_SetConfig+0x1a6>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <UART_SetConfig+0x1b0>
 8003a74:	e010      	b.n	8003a98 <UART_SetConfig+0x1c8>
 8003a76:	2b80      	cmp	r3, #128	; 0x80
 8003a78:	d005      	beq.n	8003a86 <UART_SetConfig+0x1b6>
 8003a7a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a7c:	d009      	beq.n	8003a92 <UART_SetConfig+0x1c2>
 8003a7e:	e00b      	b.n	8003a98 <UART_SetConfig+0x1c8>
 8003a80:	2300      	movs	r3, #0
 8003a82:	77fb      	strb	r3, [r7, #31]
 8003a84:	e0cb      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003a86:	2302      	movs	r3, #2
 8003a88:	77fb      	strb	r3, [r7, #31]
 8003a8a:	e0c8      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003a8c:	2304      	movs	r3, #4
 8003a8e:	77fb      	strb	r3, [r7, #31]
 8003a90:	e0c5      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003a92:	2308      	movs	r3, #8
 8003a94:	77fb      	strb	r3, [r7, #31]
 8003a96:	e0c2      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003a98:	2310      	movs	r3, #16
 8003a9a:	77fb      	strb	r3, [r7, #31]
 8003a9c:	bf00      	nop
 8003a9e:	e0be      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a4d      	ldr	r2, [pc, #308]	; (8003bdc <UART_SetConfig+0x30c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d124      	bne.n	8003af4 <UART_SetConfig+0x224>
 8003aaa:	4b48      	ldr	r3, [pc, #288]	; (8003bcc <UART_SetConfig+0x2fc>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab8:	d012      	beq.n	8003ae0 <UART_SetConfig+0x210>
 8003aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003abe:	d802      	bhi.n	8003ac6 <UART_SetConfig+0x1f6>
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <UART_SetConfig+0x204>
 8003ac4:	e012      	b.n	8003aec <UART_SetConfig+0x21c>
 8003ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aca:	d006      	beq.n	8003ada <UART_SetConfig+0x20a>
 8003acc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ad0:	d009      	beq.n	8003ae6 <UART_SetConfig+0x216>
 8003ad2:	e00b      	b.n	8003aec <UART_SetConfig+0x21c>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e0a1      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003ada:	2302      	movs	r3, #2
 8003adc:	77fb      	strb	r3, [r7, #31]
 8003ade:	e09e      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	77fb      	strb	r3, [r7, #31]
 8003ae4:	e09b      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003ae6:	2308      	movs	r3, #8
 8003ae8:	77fb      	strb	r3, [r7, #31]
 8003aea:	e098      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003aec:	2310      	movs	r3, #16
 8003aee:	77fb      	strb	r3, [r7, #31]
 8003af0:	bf00      	nop
 8003af2:	e094      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a39      	ldr	r2, [pc, #228]	; (8003be0 <UART_SetConfig+0x310>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d124      	bne.n	8003b48 <UART_SetConfig+0x278>
 8003afe:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <UART_SetConfig+0x2fc>)
 8003b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0c:	d012      	beq.n	8003b34 <UART_SetConfig+0x264>
 8003b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b12:	d802      	bhi.n	8003b1a <UART_SetConfig+0x24a>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <UART_SetConfig+0x258>
 8003b18:	e012      	b.n	8003b40 <UART_SetConfig+0x270>
 8003b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b1e:	d006      	beq.n	8003b2e <UART_SetConfig+0x25e>
 8003b20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b24:	d009      	beq.n	8003b3a <UART_SetConfig+0x26a>
 8003b26:	e00b      	b.n	8003b40 <UART_SetConfig+0x270>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	77fb      	strb	r3, [r7, #31]
 8003b2c:	e077      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	77fb      	strb	r3, [r7, #31]
 8003b32:	e074      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003b34:	2304      	movs	r3, #4
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e071      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	77fb      	strb	r3, [r7, #31]
 8003b3e:	e06e      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003b40:	2310      	movs	r3, #16
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	bf00      	nop
 8003b46:	e06a      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a25      	ldr	r2, [pc, #148]	; (8003be4 <UART_SetConfig+0x314>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d124      	bne.n	8003b9c <UART_SetConfig+0x2cc>
 8003b52:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <UART_SetConfig+0x2fc>)
 8003b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b58:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b60:	d012      	beq.n	8003b88 <UART_SetConfig+0x2b8>
 8003b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b66:	d802      	bhi.n	8003b6e <UART_SetConfig+0x29e>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <UART_SetConfig+0x2ac>
 8003b6c:	e012      	b.n	8003b94 <UART_SetConfig+0x2c4>
 8003b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b72:	d006      	beq.n	8003b82 <UART_SetConfig+0x2b2>
 8003b74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b78:	d009      	beq.n	8003b8e <UART_SetConfig+0x2be>
 8003b7a:	e00b      	b.n	8003b94 <UART_SetConfig+0x2c4>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	77fb      	strb	r3, [r7, #31]
 8003b80:	e04d      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003b82:	2302      	movs	r3, #2
 8003b84:	77fb      	strb	r3, [r7, #31]
 8003b86:	e04a      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003b88:	2304      	movs	r3, #4
 8003b8a:	77fb      	strb	r3, [r7, #31]
 8003b8c:	e047      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003b8e:	2308      	movs	r3, #8
 8003b90:	77fb      	strb	r3, [r7, #31]
 8003b92:	e044      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003b94:	2310      	movs	r3, #16
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	bf00      	nop
 8003b9a:	e040      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a11      	ldr	r2, [pc, #68]	; (8003be8 <UART_SetConfig+0x318>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d139      	bne.n	8003c1a <UART_SetConfig+0x34a>
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <UART_SetConfig+0x2fc>)
 8003ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb4:	d027      	beq.n	8003c06 <UART_SetConfig+0x336>
 8003bb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bba:	d817      	bhi.n	8003bec <UART_SetConfig+0x31c>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01c      	beq.n	8003bfa <UART_SetConfig+0x32a>
 8003bc0:	e027      	b.n	8003c12 <UART_SetConfig+0x342>
 8003bc2:	bf00      	nop
 8003bc4:	efff69f3 	.word	0xefff69f3
 8003bc8:	40011000 	.word	0x40011000
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40004400 	.word	0x40004400
 8003bd4:	40004800 	.word	0x40004800
 8003bd8:	40004c00 	.word	0x40004c00
 8003bdc:	40005000 	.word	0x40005000
 8003be0:	40011400 	.word	0x40011400
 8003be4:	40007800 	.word	0x40007800
 8003be8:	40007c00 	.word	0x40007c00
 8003bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf0:	d006      	beq.n	8003c00 <UART_SetConfig+0x330>
 8003bf2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003bf6:	d009      	beq.n	8003c0c <UART_SetConfig+0x33c>
 8003bf8:	e00b      	b.n	8003c12 <UART_SetConfig+0x342>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	77fb      	strb	r3, [r7, #31]
 8003bfe:	e00e      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003c00:	2302      	movs	r3, #2
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e00b      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003c06:	2304      	movs	r3, #4
 8003c08:	77fb      	strb	r3, [r7, #31]
 8003c0a:	e008      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003c0c:	2308      	movs	r3, #8
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e005      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003c12:	2310      	movs	r3, #16
 8003c14:	77fb      	strb	r3, [r7, #31]
 8003c16:	bf00      	nop
 8003c18:	e001      	b.n	8003c1e <UART_SetConfig+0x34e>
 8003c1a:	2310      	movs	r3, #16
 8003c1c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c26:	d17f      	bne.n	8003d28 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003c28:	7ffb      	ldrb	r3, [r7, #31]
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d85c      	bhi.n	8003ce8 <UART_SetConfig+0x418>
 8003c2e:	a201      	add	r2, pc, #4	; (adr r2, 8003c34 <UART_SetConfig+0x364>)
 8003c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c34:	08003c59 	.word	0x08003c59
 8003c38:	08003c79 	.word	0x08003c79
 8003c3c:	08003c99 	.word	0x08003c99
 8003c40:	08003ce9 	.word	0x08003ce9
 8003c44:	08003cb1 	.word	0x08003cb1
 8003c48:	08003ce9 	.word	0x08003ce9
 8003c4c:	08003ce9 	.word	0x08003ce9
 8003c50:	08003ce9 	.word	0x08003ce9
 8003c54:	08003cd1 	.word	0x08003cd1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c58:	f7ff f99e 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 8003c5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	005a      	lsls	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	085b      	lsrs	r3, r3, #1
 8003c68:	441a      	add	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	61bb      	str	r3, [r7, #24]
        break;
 8003c76:	e03a      	b.n	8003cee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c78:	f7ff f9a2 	bl	8002fc0 <HAL_RCC_GetPCLK2Freq>
 8003c7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	005a      	lsls	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	085b      	lsrs	r3, r3, #1
 8003c88:	441a      	add	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	61bb      	str	r3, [r7, #24]
        break;
 8003c96:	e02a      	b.n	8003cee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	085a      	lsrs	r2, r3, #1
 8003c9e:	4b5f      	ldr	r3, [pc, #380]	; (8003e1c <UART_SetConfig+0x54c>)
 8003ca0:	4413      	add	r3, r2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6852      	ldr	r2, [r2, #4]
 8003ca6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	61bb      	str	r3, [r7, #24]
        break;
 8003cae:	e01e      	b.n	8003cee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cb0:	f7ff f88e 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8003cb4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	005a      	lsls	r2, r3, #1
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	085b      	lsrs	r3, r3, #1
 8003cc0:	441a      	add	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	61bb      	str	r3, [r7, #24]
        break;
 8003cce:	e00e      	b.n	8003cee <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	085b      	lsrs	r3, r3, #1
 8003cd6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	61bb      	str	r3, [r7, #24]
        break;
 8003ce6:	e002      	b.n	8003cee <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	75fb      	strb	r3, [r7, #23]
        break;
 8003cec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	2b0f      	cmp	r3, #15
 8003cf2:	d916      	bls.n	8003d22 <UART_SetConfig+0x452>
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfa:	d212      	bcs.n	8003d22 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	f023 030f 	bic.w	r3, r3, #15
 8003d04:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	085b      	lsrs	r3, r3, #1
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	897b      	ldrh	r3, [r7, #10]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	897a      	ldrh	r2, [r7, #10]
 8003d1e:	60da      	str	r2, [r3, #12]
 8003d20:	e070      	b.n	8003e04 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	75fb      	strb	r3, [r7, #23]
 8003d26:	e06d      	b.n	8003e04 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003d28:	7ffb      	ldrb	r3, [r7, #31]
 8003d2a:	2b08      	cmp	r3, #8
 8003d2c:	d859      	bhi.n	8003de2 <UART_SetConfig+0x512>
 8003d2e:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <UART_SetConfig+0x464>)
 8003d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08003d77 	.word	0x08003d77
 8003d3c:	08003d95 	.word	0x08003d95
 8003d40:	08003de3 	.word	0x08003de3
 8003d44:	08003dad 	.word	0x08003dad
 8003d48:	08003de3 	.word	0x08003de3
 8003d4c:	08003de3 	.word	0x08003de3
 8003d50:	08003de3 	.word	0x08003de3
 8003d54:	08003dcb 	.word	0x08003dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d58:	f7ff f91e 	bl	8002f98 <HAL_RCC_GetPCLK1Freq>
 8003d5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	085a      	lsrs	r2, r3, #1
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	441a      	add	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	61bb      	str	r3, [r7, #24]
        break;
 8003d74:	e038      	b.n	8003de8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d76:	f7ff f923 	bl	8002fc0 <HAL_RCC_GetPCLK2Freq>
 8003d7a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	085a      	lsrs	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	441a      	add	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	61bb      	str	r3, [r7, #24]
        break;
 8003d92:	e029      	b.n	8003de8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	085a      	lsrs	r2, r3, #1
 8003d9a:	4b21      	ldr	r3, [pc, #132]	; (8003e20 <UART_SetConfig+0x550>)
 8003d9c:	4413      	add	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6852      	ldr	r2, [r2, #4]
 8003da2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	61bb      	str	r3, [r7, #24]
        break;
 8003daa:	e01d      	b.n	8003de8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dac:	f7ff f810 	bl	8002dd0 <HAL_RCC_GetSysClockFreq>
 8003db0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	085a      	lsrs	r2, r3, #1
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	441a      	add	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	61bb      	str	r3, [r7, #24]
        break;
 8003dc8:	e00e      	b.n	8003de8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	61bb      	str	r3, [r7, #24]
        break;
 8003de0:	e002      	b.n	8003de8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	75fb      	strb	r3, [r7, #23]
        break;
 8003de6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	2b0f      	cmp	r3, #15
 8003dec:	d908      	bls.n	8003e00 <UART_SetConfig+0x530>
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df4:	d204      	bcs.n	8003e00 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	e001      	b.n	8003e04 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3720      	adds	r7, #32
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	01e84800 	.word	0x01e84800
 8003e20:	00f42400 	.word	0x00f42400

08003e24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d01a      	beq.n	8003f3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f22:	d10a      	bne.n	8003f3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]
  }
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003f76:	f7fc ff9d 	bl	8000eb4 <HAL_GetTick>
 8003f7a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d10e      	bne.n	8003fa8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f82a 	bl	8003ff2 <UART_WaitOnFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e020      	b.n	8003fea <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d10e      	bne.n	8003fd4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f814 	bl	8003ff2 <UART_WaitOnFlagUntilTimeout>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e00a      	b.n	8003fea <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	603b      	str	r3, [r7, #0]
 8003ffe:	4613      	mov	r3, r2
 8004000:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004002:	e05d      	b.n	80040c0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	d059      	beq.n	80040c0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400c:	f7fc ff52 	bl	8000eb4 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	429a      	cmp	r2, r3
 800401a:	d302      	bcc.n	8004022 <UART_WaitOnFlagUntilTimeout+0x30>
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d11b      	bne.n	800405a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004030:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0201 	bic.w	r2, r2, #1
 8004040:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e042      	b.n	80040e0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d02b      	beq.n	80040c0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004076:	d123      	bne.n	80040c0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004080:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004090:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0201 	bic.w	r2, r2, #1
 80040a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2220      	movs	r2, #32
 80040b2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e00f      	b.n	80040e0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	69da      	ldr	r2, [r3, #28]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	4013      	ands	r3, r2
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	bf0c      	ite	eq
 80040d0:	2301      	moveq	r3, #1
 80040d2:	2300      	movne	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	461a      	mov	r2, r3
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d092      	beq.n	8004004 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040e8:	b084      	sub	sp, #16
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
 80040f2:	f107 001c 	add.w	r0, r7, #28
 80040f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d120      	bne.n	8004142 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68da      	ldr	r2, [r3, #12]
 8004110:	4b20      	ldr	r3, [pc, #128]	; (8004194 <USB_CoreInit+0xac>)
 8004112:	4013      	ands	r3, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004126:	2b01      	cmp	r3, #1
 8004128:	d105      	bne.n	8004136 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fa52 	bl	80045e0 <USB_CoreReset>
 800413c:	4603      	mov	r3, r0
 800413e:	73fb      	strb	r3, [r7, #15]
 8004140:	e010      	b.n	8004164 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fa46 	bl	80045e0 <USB_CoreReset>
 8004154:	4603      	mov	r3, r0
 8004156:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	2b01      	cmp	r3, #1
 8004168:	d10b      	bne.n	8004182 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f043 0206 	orr.w	r2, r3, #6
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f043 0220 	orr.w	r2, r3, #32
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004182:	7bfb      	ldrb	r3, [r7, #15]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800418e:	b004      	add	sp, #16
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	ffbdffbf 	.word	0xffbdffbf

08004198 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f023 0201 	bic.w	r2, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80041d2:	78fb      	ldrb	r3, [r7, #3]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d106      	bne.n	80041e6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	60da      	str	r2, [r3, #12]
 80041e4:	e00b      	b.n	80041fe <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	60da      	str	r2, [r3, #12]
 80041f8:	e001      	b.n	80041fe <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e003      	b.n	8004206 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80041fe:	2032      	movs	r0, #50	; 0x32
 8004200:	f7fc fe64 	bl	8000ecc <HAL_Delay>

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004210:	b084      	sub	sp, #16
 8004212:	b580      	push	{r7, lr}
 8004214:	b086      	sub	sp, #24
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800421e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800422a:	2300      	movs	r3, #0
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	e009      	b.n	8004244 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	3340      	adds	r3, #64	; 0x40
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	2200      	movs	r2, #0
 800423c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	3301      	adds	r3, #1
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	2b0e      	cmp	r3, #14
 8004248:	d9f2      	bls.n	8004230 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800424a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d11c      	bne.n	800428a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800425e:	f043 0302 	orr.w	r3, r3, #2
 8004262:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	e005      	b.n	8004296 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800429c:	461a      	mov	r2, r3
 800429e:	2300      	movs	r3, #0
 80042a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a8:	4619      	mov	r1, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b0:	461a      	mov	r2, r3
 80042b2:	680b      	ldr	r3, [r1, #0]
 80042b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d10c      	bne.n	80042d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d104      	bne.n	80042cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042c2:	2100      	movs	r1, #0
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f959 	bl	800457c <USB_SetDevSpeed>
 80042ca:	e018      	b.n	80042fe <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042cc:	2101      	movs	r1, #1
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f954 	bl	800457c <USB_SetDevSpeed>
 80042d4:	e013      	b.n	80042fe <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d10c      	bne.n	80042f6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d104      	bne.n	80042ec <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042e2:	2100      	movs	r1, #0
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f949 	bl	800457c <USB_SetDevSpeed>
 80042ea:	e008      	b.n	80042fe <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042ec:	2101      	movs	r1, #1
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f944 	bl	800457c <USB_SetDevSpeed>
 80042f4:	e003      	b.n	80042fe <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042f6:	2103      	movs	r1, #3
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f93f 	bl	800457c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042fe:	2110      	movs	r1, #16
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f8f3 	bl	80044ec <USB_FlushTxFifo>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 f911 	bl	8004538 <USB_FlushRxFifo>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004326:	461a      	mov	r2, r3
 8004328:	2300      	movs	r3, #0
 800432a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004332:	461a      	mov	r2, r3
 8004334:	2300      	movs	r3, #0
 8004336:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433e:	461a      	mov	r2, r3
 8004340:	2300      	movs	r3, #0
 8004342:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004344:	2300      	movs	r3, #0
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	e043      	b.n	80043d2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800435c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004360:	d118      	bne.n	8004394 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	461a      	mov	r2, r3
 8004376:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	e013      	b.n	80043a6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438a:	461a      	mov	r2, r3
 800438c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	e008      	b.n	80043a6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a0:	461a      	mov	r2, r3
 80043a2:	2300      	movs	r3, #0
 80043a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b2:	461a      	mov	r2, r3
 80043b4:	2300      	movs	r3, #0
 80043b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c4:	461a      	mov	r2, r3
 80043c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	3301      	adds	r3, #1
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d3b7      	bcc.n	800434a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043da:	2300      	movs	r3, #0
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	e043      	b.n	8004468 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043f6:	d118      	bne.n	800442a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10a      	bne.n	8004414 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440a:	461a      	mov	r2, r3
 800440c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e013      	b.n	800443c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004420:	461a      	mov	r2, r3
 8004422:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	e008      	b.n	800443c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004436:	461a      	mov	r2, r3
 8004438:	2300      	movs	r3, #0
 800443a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004448:	461a      	mov	r2, r3
 800444a:	2300      	movs	r3, #0
 800444c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445a:	461a      	mov	r2, r3
 800445c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004460:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	3301      	adds	r3, #1
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	429a      	cmp	r2, r3
 800446e:	d3b7      	bcc.n	80043e0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800447e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004482:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004490:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004494:	2b00      	cmp	r3, #0
 8004496:	d105      	bne.n	80044a4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	f043 0210 	orr.w	r2, r3, #16
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699a      	ldr	r2, [r3, #24]
 80044a8:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <USB_DevInit+0x2d4>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80044b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f043 0208 	orr.w	r2, r3, #8
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d105      	bne.n	80044d4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	699a      	ldr	r2, [r3, #24]
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <USB_DevInit+0x2d8>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044e0:	b004      	add	sp, #16
 80044e2:	4770      	bx	lr
 80044e4:	803c3800 	.word	0x803c3800
 80044e8:	40000004 	.word	0x40000004

080044ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	019b      	lsls	r3, r3, #6
 80044fe:	f043 0220 	orr.w	r2, r3, #32
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3301      	adds	r3, #1
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4a09      	ldr	r2, [pc, #36]	; (8004534 <USB_FlushTxFifo+0x48>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d901      	bls.n	8004518 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e006      	b.n	8004526 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b20      	cmp	r3, #32
 8004522:	d0f0      	beq.n	8004506 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	00030d40 	.word	0x00030d40

08004538 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2210      	movs	r2, #16
 8004548:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3301      	adds	r3, #1
 800454e:	60fb      	str	r3, [r7, #12]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4a09      	ldr	r2, [pc, #36]	; (8004578 <USB_FlushRxFifo+0x40>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d901      	bls.n	800455c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e006      	b.n	800456a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	2b10      	cmp	r3, #16
 8004566:	d0f0      	beq.n	800454a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	00030d40 	.word	0x00030d40

0800457c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	78fb      	ldrb	r3, [r7, #3]
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800459c:	4313      	orrs	r3, r2
 800459e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045c8:	f043 0302 	orr.w	r3, r3, #2
 80045cc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80045ce:	2003      	movs	r0, #3
 80045d0:	f7fc fc7c 	bl	8000ecc <HAL_Delay>

  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
	...

080045e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3301      	adds	r3, #1
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4a13      	ldr	r2, [pc, #76]	; (8004644 <USB_CoreReset+0x64>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e01b      	b.n	8004636 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	daf2      	bge.n	80045ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f043 0201 	orr.w	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3301      	adds	r3, #1
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4a09      	ldr	r2, [pc, #36]	; (8004644 <USB_CoreReset+0x64>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e006      	b.n	8004636 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b01      	cmp	r3, #1
 8004632:	d0f0      	beq.n	8004616 <USB_CoreReset+0x36>

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	00030d40 	.word	0x00030d40

08004648 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800464e:	f001 faa1 	bl	8005b94 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004652:	4b17      	ldr	r3, [pc, #92]	; (80046b0 <MX_LWIP_Init+0x68>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004658:	4b16      	ldr	r3, [pc, #88]	; (80046b4 <MX_LWIP_Init+0x6c>)
 800465a:	2200      	movs	r2, #0
 800465c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800465e:	4b16      	ldr	r3, [pc, #88]	; (80046b8 <MX_LWIP_Init+0x70>)
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004664:	4b15      	ldr	r3, [pc, #84]	; (80046bc <MX_LWIP_Init+0x74>)
 8004666:	9302      	str	r3, [sp, #8]
 8004668:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <MX_LWIP_Init+0x78>)
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	2300      	movs	r3, #0
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <MX_LWIP_Init+0x70>)
 8004672:	4a10      	ldr	r2, [pc, #64]	; (80046b4 <MX_LWIP_Init+0x6c>)
 8004674:	490e      	ldr	r1, [pc, #56]	; (80046b0 <MX_LWIP_Init+0x68>)
 8004676:	4813      	ldr	r0, [pc, #76]	; (80046c4 <MX_LWIP_Init+0x7c>)
 8004678:	f001 ff32 	bl	80064e0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800467c:	4811      	ldr	r0, [pc, #68]	; (80046c4 <MX_LWIP_Init+0x7c>)
 800467e:	f002 f8e5 	bl	800684c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004682:	4b10      	ldr	r3, [pc, #64]	; (80046c4 <MX_LWIP_Init+0x7c>)
 8004684:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004688:	089b      	lsrs	r3, r3, #2
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004694:	480b      	ldr	r0, [pc, #44]	; (80046c4 <MX_LWIP_Init+0x7c>)
 8004696:	f002 f8e9 	bl	800686c <netif_set_up>
 800469a:	e002      	b.n	80046a2 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800469c:	4809      	ldr	r0, [pc, #36]	; (80046c4 <MX_LWIP_Init+0x7c>)
 800469e:	f002 f951 	bl	8006944 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80046a2:	4808      	ldr	r0, [pc, #32]	; (80046c4 <MX_LWIP_Init+0x7c>)
 80046a4:	f00a f966 	bl	800e974 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000b30 	.word	0x20000b30
 80046b4:	20000b34 	.word	0x20000b34
 80046b8:	20000b38 	.word	0x20000b38
 80046bc:	08012331 	.word	0x08012331
 80046c0:	08004c81 	.word	0x08004c81
 80046c4:	20000afc 	.word	0x20000afc

080046c8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80046cc:	4803      	ldr	r0, [pc, #12]	; (80046dc <MX_LWIP_Process+0x14>)
 80046ce:	f000 fab7 	bl	8004c40 <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 80046d2:	f009 f8d3 	bl	800d87c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80046d6:	bf00      	nop
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20000afc 	.word	0x20000afc

080046e0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08e      	sub	sp, #56	; 0x38
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	605a      	str	r2, [r3, #4]
 80046f2:	609a      	str	r2, [r3, #8]
 80046f4:	60da      	str	r2, [r3, #12]
 80046f6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a4e      	ldr	r2, [pc, #312]	; (8004838 <HAL_ETH_MspInit+0x158>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	f040 8096 	bne.w	8004830 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004704:	4b4d      	ldr	r3, [pc, #308]	; (800483c <HAL_ETH_MspInit+0x15c>)
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	4a4c      	ldr	r2, [pc, #304]	; (800483c <HAL_ETH_MspInit+0x15c>)
 800470a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800470e:	6313      	str	r3, [r2, #48]	; 0x30
 8004710:	4b4a      	ldr	r3, [pc, #296]	; (800483c <HAL_ETH_MspInit+0x15c>)
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004718:	623b      	str	r3, [r7, #32]
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	4b47      	ldr	r3, [pc, #284]	; (800483c <HAL_ETH_MspInit+0x15c>)
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	4a46      	ldr	r2, [pc, #280]	; (800483c <HAL_ETH_MspInit+0x15c>)
 8004722:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004726:	6313      	str	r3, [r2, #48]	; 0x30
 8004728:	4b44      	ldr	r3, [pc, #272]	; (800483c <HAL_ETH_MspInit+0x15c>)
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	4b41      	ldr	r3, [pc, #260]	; (800483c <HAL_ETH_MspInit+0x15c>)
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	4a40      	ldr	r2, [pc, #256]	; (800483c <HAL_ETH_MspInit+0x15c>)
 800473a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800473e:	6313      	str	r3, [r2, #48]	; 0x30
 8004740:	4b3e      	ldr	r3, [pc, #248]	; (800483c <HAL_ETH_MspInit+0x15c>)
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800474c:	4b3b      	ldr	r3, [pc, #236]	; (800483c <HAL_ETH_MspInit+0x15c>)
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	4a3a      	ldr	r2, [pc, #232]	; (800483c <HAL_ETH_MspInit+0x15c>)
 8004752:	f043 0304 	orr.w	r3, r3, #4
 8004756:	6313      	str	r3, [r2, #48]	; 0x30
 8004758:	4b38      	ldr	r3, [pc, #224]	; (800483c <HAL_ETH_MspInit+0x15c>)
 800475a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	617b      	str	r3, [r7, #20]
 8004762:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004764:	4b35      	ldr	r3, [pc, #212]	; (800483c <HAL_ETH_MspInit+0x15c>)
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	4a34      	ldr	r2, [pc, #208]	; (800483c <HAL_ETH_MspInit+0x15c>)
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	6313      	str	r3, [r2, #48]	; 0x30
 8004770:	4b32      	ldr	r3, [pc, #200]	; (800483c <HAL_ETH_MspInit+0x15c>)
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800477c:	4b2f      	ldr	r3, [pc, #188]	; (800483c <HAL_ETH_MspInit+0x15c>)
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	4a2e      	ldr	r2, [pc, #184]	; (800483c <HAL_ETH_MspInit+0x15c>)
 8004782:	f043 0302 	orr.w	r3, r3, #2
 8004786:	6313      	str	r3, [r2, #48]	; 0x30
 8004788:	4b2c      	ldr	r3, [pc, #176]	; (800483c <HAL_ETH_MspInit+0x15c>)
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004794:	4b29      	ldr	r3, [pc, #164]	; (800483c <HAL_ETH_MspInit+0x15c>)
 8004796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004798:	4a28      	ldr	r2, [pc, #160]	; (800483c <HAL_ETH_MspInit+0x15c>)
 800479a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800479e:	6313      	str	r3, [r2, #48]	; 0x30
 80047a0:	4b26      	ldr	r3, [pc, #152]	; (800483c <HAL_ETH_MspInit+0x15c>)
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80047ac:	2332      	movs	r3, #50	; 0x32
 80047ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b0:	2302      	movs	r3, #2
 80047b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047b8:	2303      	movs	r3, #3
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047bc:	230b      	movs	r3, #11
 80047be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047c4:	4619      	mov	r1, r3
 80047c6:	481e      	ldr	r0, [pc, #120]	; (8004840 <HAL_ETH_MspInit+0x160>)
 80047c8:	f7fd fbfc 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80047cc:	2386      	movs	r3, #134	; 0x86
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d0:	2302      	movs	r3, #2
 80047d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047d8:	2303      	movs	r3, #3
 80047da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047dc:	230b      	movs	r3, #11
 80047de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047e4:	4619      	mov	r1, r3
 80047e6:	4817      	ldr	r0, [pc, #92]	; (8004844 <HAL_ETH_MspInit+0x164>)
 80047e8:	f7fd fbec 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80047ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f2:	2302      	movs	r3, #2
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047fa:	2303      	movs	r3, #3
 80047fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80047fe:	230b      	movs	r3, #11
 8004800:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004806:	4619      	mov	r1, r3
 8004808:	480f      	ldr	r0, [pc, #60]	; (8004848 <HAL_ETH_MspInit+0x168>)
 800480a:	f7fd fbdb 	bl	8001fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800480e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004814:	2302      	movs	r3, #2
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004818:	2300      	movs	r3, #0
 800481a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800481c:	2303      	movs	r3, #3
 800481e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004820:	230b      	movs	r3, #11
 8004822:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004828:	4619      	mov	r1, r3
 800482a:	4808      	ldr	r0, [pc, #32]	; (800484c <HAL_ETH_MspInit+0x16c>)
 800482c:	f7fd fbca 	bl	8001fc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004830:	bf00      	nop
 8004832:	3738      	adds	r7, #56	; 0x38
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40028000 	.word	0x40028000
 800483c:	40023800 	.word	0x40023800
 8004840:	40020800 	.word	0x40020800
 8004844:	40020000 	.word	0x40020000
 8004848:	40020400 	.word	0x40020400
 800484c:	40021800 	.word	0x40021800

08004850 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800485c:	4b49      	ldr	r3, [pc, #292]	; (8004984 <low_level_init+0x134>)
 800485e:	4a4a      	ldr	r2, [pc, #296]	; (8004988 <low_level_init+0x138>)
 8004860:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004862:	4b48      	ldr	r3, [pc, #288]	; (8004984 <low_level_init+0x134>)
 8004864:	2201      	movs	r2, #1
 8004866:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004868:	4b46      	ldr	r3, [pc, #280]	; (8004984 <low_level_init+0x134>)
 800486a:	2200      	movs	r2, #0
 800486c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800486e:	2300      	movs	r3, #0
 8004870:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004872:	2380      	movs	r3, #128	; 0x80
 8004874:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004876:	23e1      	movs	r3, #225	; 0xe1
 8004878:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800487a:	2300      	movs	r3, #0
 800487c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800487e:	2300      	movs	r3, #0
 8004880:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004882:	2300      	movs	r3, #0
 8004884:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004886:	4a3f      	ldr	r2, [pc, #252]	; (8004984 <low_level_init+0x134>)
 8004888:	f107 0308 	add.w	r3, r7, #8
 800488c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800488e:	4b3d      	ldr	r3, [pc, #244]	; (8004984 <low_level_init+0x134>)
 8004890:	2200      	movs	r2, #0
 8004892:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004894:	4b3b      	ldr	r3, [pc, #236]	; (8004984 <low_level_init+0x134>)
 8004896:	2200      	movs	r2, #0
 8004898:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800489a:	4b3a      	ldr	r3, [pc, #232]	; (8004984 <low_level_init+0x134>)
 800489c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80048a0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80048a2:	4838      	ldr	r0, [pc, #224]	; (8004984 <low_level_init+0x134>)
 80048a4:	f7fc fc1a 	bl	80010dc <HAL_ETH_Init>
 80048a8:	4603      	mov	r3, r0
 80048aa:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d108      	bne.n	80048c4 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80048b8:	f043 0304 	orr.w	r3, r3, #4
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80048c4:	2304      	movs	r3, #4
 80048c6:	4a31      	ldr	r2, [pc, #196]	; (800498c <low_level_init+0x13c>)
 80048c8:	4931      	ldr	r1, [pc, #196]	; (8004990 <low_level_init+0x140>)
 80048ca:	482e      	ldr	r0, [pc, #184]	; (8004984 <low_level_init+0x134>)
 80048cc:	f7fc fda2 	bl	8001414 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80048d0:	2304      	movs	r3, #4
 80048d2:	4a30      	ldr	r2, [pc, #192]	; (8004994 <low_level_init+0x144>)
 80048d4:	4930      	ldr	r1, [pc, #192]	; (8004998 <low_level_init+0x148>)
 80048d6:	482b      	ldr	r0, [pc, #172]	; (8004984 <low_level_init+0x134>)
 80048d8:	f7fc fe05 	bl	80014e6 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2206      	movs	r2, #6
 80048e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80048e4:	4b27      	ldr	r3, [pc, #156]	; (8004984 <low_level_init+0x134>)
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	781a      	ldrb	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80048f0:	4b24      	ldr	r3, [pc, #144]	; (8004984 <low_level_init+0x134>)
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	785a      	ldrb	r2, [r3, #1]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80048fc:	4b21      	ldr	r3, [pc, #132]	; (8004984 <low_level_init+0x134>)
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	789a      	ldrb	r2, [r3, #2]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004908:	4b1e      	ldr	r3, [pc, #120]	; (8004984 <low_level_init+0x134>)
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	78da      	ldrb	r2, [r3, #3]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004914:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <low_level_init+0x134>)
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	791a      	ldrb	r2, [r3, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004920:	4b18      	ldr	r3, [pc, #96]	; (8004984 <low_level_init+0x134>)
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	795a      	ldrb	r2, [r3, #5]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004932:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800493a:	f043 030a 	orr.w	r3, r3, #10
 800493e:	b2da      	uxtb	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004946:	480f      	ldr	r0, [pc, #60]	; (8004984 <low_level_init+0x134>)
 8004948:	f7fd f876 	bl	8001a38 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800494c:	f107 0310 	add.w	r3, r7, #16
 8004950:	461a      	mov	r2, r3
 8004952:	211d      	movs	r1, #29
 8004954:	480b      	ldr	r0, [pc, #44]	; (8004984 <low_level_init+0x134>)
 8004956:	f7fc ffa1 	bl	800189c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f043 030b 	orr.w	r3, r3, #11
 8004960:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	461a      	mov	r2, r3
 8004966:	211d      	movs	r1, #29
 8004968:	4806      	ldr	r0, [pc, #24]	; (8004984 <low_level_init+0x134>)
 800496a:	f7fc ffff 	bl	800196c <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800496e:	f107 0310 	add.w	r3, r7, #16
 8004972:	461a      	mov	r2, r3
 8004974:	211d      	movs	r1, #29
 8004976:	4803      	ldr	r0, [pc, #12]	; (8004984 <low_level_init+0x134>)
 8004978:	f7fc ff90 	bl	800189c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800497c:	bf00      	nop
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	2000240c 	.word	0x2000240c
 8004988:	40028000 	.word	0x40028000
 800498c:	20002454 	.word	0x20002454
 8004990:	20000b3c 	.word	0x20000b3c
 8004994:	20000bbc 	.word	0x20000bbc
 8004998:	2000238c 	.word	0x2000238c

0800499c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08a      	sub	sp, #40	; 0x28
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80049a6:	4b4b      	ldr	r3, [pc, #300]	; (8004ad4 <low_level_output+0x138>)
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80049be:	4b45      	ldr	r3, [pc, #276]	; (8004ad4 <low_level_output+0x138>)
 80049c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	623b      	str	r3, [r7, #32]
 80049cc:	e05a      	b.n	8004a84 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	da03      	bge.n	80049de <low_level_output+0x42>
      {
        errval = ERR_USE;
 80049d6:	23f8      	movs	r3, #248	; 0xf8
 80049d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80049dc:	e05c      	b.n	8004a98 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	895b      	ldrh	r3, [r3, #10]
 80049e2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80049e8:	e02f      	b.n	8004a4a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	18d0      	adds	r0, r2, r3
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	18d1      	adds	r1, r2, r3
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	461a      	mov	r2, r3
 8004a02:	f00d fd9e 	bl	8012542 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	da03      	bge.n	8004a1c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004a14:	23f8      	movs	r3, #248	; 0xf8
 8004a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004a1a:	e03d      	b.n	8004a98 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4413      	add	r3, r2
 8004a28:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004a2c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004a38:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004a44:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004a46:	2300      	movs	r3, #0
 8004a48:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d8c8      	bhi.n	80049ea <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004a58:	69fa      	ldr	r2, [r7, #28]
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	18d0      	adds	r0, r2, r3
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4413      	add	r3, r2
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4619      	mov	r1, r3
 8004a6a:	f00d fd6a 	bl	8012542 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	623b      	str	r3, [r7, #32]
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1a1      	bne.n	80049ce <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004a8a:	6979      	ldr	r1, [r7, #20]
 8004a8c:	4811      	ldr	r0, [pc, #68]	; (8004ad4 <low_level_output+0x138>)
 8004a8e:	f7fc fd97 	bl	80015c0 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004a98:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <low_level_output+0x138>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	f241 0314 	movw	r3, #4116	; 0x1014
 8004aa0:	4413      	add	r3, r2
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0320 	and.w	r3, r3, #32
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00d      	beq.n	8004ac8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004aac:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <low_level_output+0x138>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	f241 0314 	movw	r3, #4116	; 0x1014
 8004ab4:	4413      	add	r3, r2
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004aba:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <low_level_output+0x138>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	f241 0304 	movw	r3, #4100	; 0x1004
 8004ac2:	4413      	add	r3, r2
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004ac8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3728      	adds	r7, #40	; 0x28
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	2000240c 	.word	0x2000240c

08004ad8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08c      	sub	sp, #48	; 0x30
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8004afc:	484f      	ldr	r0, [pc, #316]	; (8004c3c <low_level_input+0x164>)
 8004afe:	f7fc fe49 	bl	8001794 <HAL_ETH_GetReceivedFrame>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <low_level_input+0x34>
  
    return NULL;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	e092      	b.n	8004c32 <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004b0c:	4b4b      	ldr	r3, [pc, #300]	; (8004c3c <low_level_input+0x164>)
 8004b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b10:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004b12:	4b4a      	ldr	r3, [pc, #296]	; (8004c3c <low_level_input+0x164>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8004b18:	89fb      	ldrh	r3, [r7, #14]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004b1e:	89fb      	ldrh	r3, [r7, #14]
 8004b20:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004b24:	4619      	mov	r1, r3
 8004b26:	2000      	movs	r0, #0
 8004b28:	f001 ffc8 	bl	8006abc <pbuf_alloc>
 8004b2c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8004b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d04b      	beq.n	8004bcc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004b34:	4b41      	ldr	r3, [pc, #260]	; (8004c3c <low_level_input+0x164>)
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b42:	e040      	b.n	8004bc6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	895b      	ldrh	r3, [r3, #10]
 8004b48:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004b4e:	e021      	b.n	8004b94 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	18d0      	adds	r0, r2, r3
 8004b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	18d1      	adds	r1, r2, r3
 8004b5e:	69fa      	ldr	r2, [r7, #28]
 8004b60:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	461a      	mov	r2, r3
 8004b68:	f00d fceb 	bl	8012542 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004b78:	69fa      	ldr	r2, [r7, #28]
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004b82:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004b8e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d8d6      	bhi.n	8004b50 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	18d0      	adds	r0, r2, r3
 8004baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	4413      	add	r3, r2
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	f00d fcc5 	bl	8012542 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1bb      	bne.n	8004b44 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004bcc:	4b1b      	ldr	r3, [pc, #108]	; (8004c3c <low_level_input+0x164>)
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	613b      	str	r3, [r7, #16]
 8004bd6:	e00b      	b.n	8004bf0 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	3301      	adds	r3, #1
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	4b12      	ldr	r3, [pc, #72]	; (8004c3c <low_level_input+0x164>)
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d3ee      	bcc.n	8004bd8 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8004bfa:	4b10      	ldr	r3, [pc, #64]	; (8004c3c <low_level_input+0x164>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8004c00:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <low_level_input+0x164>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	f241 0314 	movw	r3, #4116	; 0x1014
 8004c08:	4413      	add	r3, r2
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00d      	beq.n	8004c30 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004c14:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <low_level_input+0x164>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	f241 0314 	movw	r3, #4116	; 0x1014
 8004c1c:	4413      	add	r3, r2
 8004c1e:	2280      	movs	r2, #128	; 0x80
 8004c20:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <low_level_input+0x164>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	f241 0308 	movw	r3, #4104	; 0x1008
 8004c2a:	4413      	add	r3, r2
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3730      	adds	r7, #48	; 0x30
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	2000240c 	.word	0x2000240c

08004c40 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7ff ff45 	bl	8004ad8 <low_level_input>
 8004c4e:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d010      	beq.n	8004c78 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	4798      	blx	r3
 8004c60:	4603      	mov	r3, r0
 8004c62:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 8004c64:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d006      	beq.n	8004c7a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f002 fa05 	bl	800707c <pbuf_free>
    p = NULL;    
 8004c72:	2300      	movs	r3, #0
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	e000      	b.n	8004c7a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8004c78:	bf00      	nop
  }
}
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <ethernetif_init+0x1c>
 8004c8e:	4b0e      	ldr	r3, [pc, #56]	; (8004cc8 <ethernetif_init+0x48>)
 8004c90:	f240 2211 	movw	r2, #529	; 0x211
 8004c94:	490d      	ldr	r1, [pc, #52]	; (8004ccc <ethernetif_init+0x4c>)
 8004c96:	480e      	ldr	r0, [pc, #56]	; (8004cd0 <ethernetif_init+0x50>)
 8004c98:	f00d fc66 	bl	8012568 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2273      	movs	r2, #115	; 0x73
 8004ca0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2274      	movs	r2, #116	; 0x74
 8004ca8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a09      	ldr	r2, [pc, #36]	; (8004cd4 <ethernetif_init+0x54>)
 8004cb0:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a08      	ldr	r2, [pc, #32]	; (8004cd8 <ethernetif_init+0x58>)
 8004cb6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff fdc9 	bl	8004850 <low_level_init>

  return ERR_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	08013424 	.word	0x08013424
 8004ccc:	08013440 	.word	0x08013440
 8004cd0:	08013450 	.word	0x08013450
 8004cd4:	080107c5 	.word	0x080107c5
 8004cd8:	0800499d 	.word	0x0800499d

08004cdc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004ce0:	f7fc f8e8 	bl	8000eb4 <HAL_GetTick>
 8004ce4:	4603      	mov	r3, r0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <fs_open+0x16>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d102      	bne.n	8004d08 <fs_open+0x1c>
    return ERR_ARG;
 8004d02:	f06f 030f 	mvn.w	r3, #15
 8004d06:	e028      	b.n	8004d5a <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004d08:	4b16      	ldr	r3, [pc, #88]	; (8004d64 <fs_open+0x78>)
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	e020      	b.n	8004d50 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	4619      	mov	r1, r3
 8004d14:	6838      	ldr	r0, [r7, #0]
 8004d16:	f7fb fa93 	bl	8000240 <strcmp>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d114      	bne.n	8004d4a <fs_open+0x5e>
      file->data = (const char *)f->data;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	7c1a      	ldrb	r2, [r3, #16]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	e007      	b.n	8004d5a <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1db      	bne.n	8004d0e <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8004d56:	f06f 0305 	mvn.w	r3, #5
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	08016980 	.word	0x08016980

08004d68 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	1ad3      	subs	r3, r2, r3
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8004da2:	22ac      	movs	r2, #172	; 0xac
 8004da4:	2100      	movs	r1, #0
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f00d fbd6 	bl	8012558 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8004dac:	bf00      	nop
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8004dba:	20ac      	movs	r0, #172	; 0xac
 8004dbc:	f001 f9a4 	bl	8006108 <mem_malloc>
 8004dc0:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <http_state_alloc+0x1a>
    http_state_init(ret);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff ffe6 	bl	8004d9a <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8004dce:	687b      	ldr	r3, [r7, #4]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d007      	beq.n	8004df8 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff ffbb 	bl	8004d68 <fs_close>
    hs->handle = NULL;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d007      	beq.n	8004e10 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f002 f939 	bl	800707c <pbuf_free>
    hs->req = NULL;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d005      	beq.n	8004e32 <http_state_free+0x1a>
    http_state_eof(hs);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff ffd6 	bl	8004dd8 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f001 f805 	bl	8005e3c <mem_free>
  }
}
 8004e32:	bf00      	nop
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d106      	bne.n	8004e5e <http_write+0x22>
 8004e50:	4b2c      	ldr	r3, [pc, #176]	; (8004f04 <http_write+0xc8>)
 8004e52:	f240 2219 	movw	r2, #537	; 0x219
 8004e56:	492c      	ldr	r1, [pc, #176]	; (8004f08 <http_write+0xcc>)
 8004e58:	482c      	ldr	r0, [pc, #176]	; (8004f0c <http_write+0xd0>)
 8004e5a:	f00d fb85 	bl	8012568 <iprintf>
  len = *length;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8004e64:	8afb      	ldrh	r3, [r7, #22]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <http_write+0x32>
    return ERR_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e045      	b.n	8004efa <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004e74:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8004e76:	8aba      	ldrh	r2, [r7, #20]
 8004e78:	8afb      	ldrh	r3, [r7, #22]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d201      	bcs.n	8004e82 <http_write+0x46>
    len = max_len;
 8004e7e:	8abb      	ldrh	r3, [r7, #20]
 8004e80:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004e86:	005b      	lsls	r3, r3, #1
 8004e88:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8004e8a:	8afa      	ldrh	r2, [r7, #22]
 8004e8c:	8abb      	ldrh	r3, [r7, #20]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d901      	bls.n	8004e96 <http_write+0x5a>
    len = max_len;
 8004e92:	8abb      	ldrh	r3, [r7, #20]
 8004e94:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8004e96:	78fb      	ldrb	r3, [r7, #3]
 8004e98:	8afa      	ldrh	r2, [r7, #22]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f006 fe73 	bl	800bb88 <tcp_write>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8004ea6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d10f      	bne.n	8004ed0 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d004      	beq.n	8004ec4 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d902      	bls.n	8004eca <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	82fb      	strh	r3, [r7, #22]
 8004ec8:	e002      	b.n	8004ed0 <http_write+0x94>
      } else {
        len /= 2;
 8004eca:	8afb      	ldrh	r3, [r7, #22]
 8004ecc:	085b      	lsrs	r3, r3, #1
 8004ece:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8004ed0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d102      	bne.n	8004ee0 <http_write+0xa4>
 8004eda:	8afb      	ldrh	r3, [r7, #22]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d8da      	bhi.n	8004e96 <http_write+0x5a>

  if (err == ERR_OK) {
 8004ee0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d103      	bne.n	8004ef0 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8afa      	ldrh	r2, [r7, #22]
 8004eec:	801a      	strh	r2, [r3, #0]
 8004eee:	e002      	b.n	8004ef6 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8004ef6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	080134b8 	.word	0x080134b8
 8004f08:	080134f0 	.word	0x080134f0
 8004f0c:	08013500 	.word	0x08013500

08004f10 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8004f1e:	2100      	movs	r1, #0
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f003 fef5 	bl	8008d10 <tcp_arg>
  altcp_recv(pcb, NULL);
 8004f26:	2100      	movs	r1, #0
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f003 ff03 	bl	8008d34 <tcp_recv>
  altcp_err(pcb, NULL);
 8004f2e:	2100      	movs	r1, #0
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f003 ff43 	bl	8008dbc <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8004f36:	2200      	movs	r2, #0
 8004f38:	2100      	movs	r1, #0
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f003 ff78 	bl	8008e30 <tcp_poll>
  altcp_sent(pcb, NULL);
 8004f40:	2100      	movs	r1, #0
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f003 ff18 	bl	8008d78 <tcp_sent>
  if (hs != NULL) {
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8004f4e:	68b8      	ldr	r0, [r7, #8]
 8004f50:	f7ff ff62 	bl	8004e18 <http_state_free>
  }

  if (abort_conn) {
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d004      	beq.n	8004f64 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f002 fe1e 	bl	8007b9c <tcp_abort>
    return ERR_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	e00f      	b.n	8004f84 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f002 fd2f 	bl	80079c8 <tcp_close>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8004f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d004      	beq.n	8004f80 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8004f76:	2204      	movs	r2, #4
 8004f78:	4904      	ldr	r1, [pc, #16]	; (8004f8c <http_close_or_abort_conn+0x7c>)
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f003 ff58 	bl	8008e30 <tcp_poll>
  }
  return err;
 8004f80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	0800579f 	.word	0x0800579f

08004f90 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	6839      	ldr	r1, [r7, #0]
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff ffb6 	bl	8004f10 <http_close_or_abort_conn>
 8004fa4:	4603      	mov	r3, r0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8004fb8:	6839      	ldr	r1, [r7, #0]
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff ffe8 	bl	8004f90 <http_close_conn>
  }
}
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <extract_uri_parameters+0x18>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <extract_uri_parameters+0x1c>
    return (0);
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	e04e      	b.n	8005082 <extract_uri_parameters+0xba>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8004fe8:	2300      	movs	r3, #0
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	e042      	b.n	8005074 <extract_uri_parameters+0xac>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	330a      	adds	r3, #10
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	605a      	str	r2, [r3, #4]

    /* Remember the start of this name=value pair */
    equals = pair;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 8005000:	2126      	movs	r1, #38	; 0x26
 8005002:	6978      	ldr	r0, [r7, #20]
 8005004:	f00d fafc 	bl	8012600 <strchr>
 8005008:	6178      	str	r0, [r7, #20]
    if (pair) {
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d006      	beq.n	800501e <extract_uri_parameters+0x56>
      *pair = '\0';
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2200      	movs	r2, #0
 8005014:	701a      	strb	r2, [r3, #0]
      pair++;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	3301      	adds	r3, #1
 800501a:	617b      	str	r3, [r7, #20]
 800501c:	e00c      	b.n	8005038 <extract_uri_parameters+0x70>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800501e:	2120      	movs	r1, #32
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f00d faed 	bl	8012600 <strchr>
 8005026:	6178      	str	r0, [r7, #20]
      if (pair) {
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <extract_uri_parameters+0x6c>
        *pair = '\0';
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2200      	movs	r2, #0
 8005032:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8005038:	213d      	movs	r1, #61	; 0x3d
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f00d fae0 	bl	8012600 <strchr>
 8005040:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00b      	beq.n	8005060 <extract_uri_parameters+0x98>
      *equals = '\0';
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	331a      	adds	r3, #26
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	605a      	str	r2, [r3, #4]
 800505e:	e006      	b.n	800506e <extract_uri_parameters+0xa6>
    } else {
      http_cgi_param_vals[loop] = NULL;
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	331a      	adds	r3, #26
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	2200      	movs	r2, #0
 800506c:	605a      	str	r2, [r3, #4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	3301      	adds	r3, #1
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	2b0f      	cmp	r3, #15
 8005078:	dc02      	bgt.n	8005080 <extract_uri_parameters+0xb8>
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1b6      	bne.n	8004fee <extract_uri_parameters+0x26>
    }
  }

  return loop;
 8005080:	693b      	ldr	r3, [r7, #16]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d105      	bne.n	80050aa <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800509e:	6839      	ldr	r1, [r7, #0]
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f7ff ff84 	bl	8004fae <http_eof>
    return 0;
 80050a6:	2300      	movs	r3, #0
 80050a8:	e016      	b.n	80050d8 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff fe64 	bl	8004d7c <fs_bytes_left>
 80050b4:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	dc05      	bgt.n	80050c8 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80050bc:	6839      	ldr	r1, [r7, #0]
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff ff75 	bl	8004fae <http_eof>
    return 0;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e007      	b.n	80050d8 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <http_check_eof+0x54>)
 80050ca:	f240 429d 	movw	r2, #1181	; 0x49d
 80050ce:	4905      	ldr	r1, [pc, #20]	; (80050e4 <http_check_eof+0x58>)
 80050d0:	4805      	ldr	r0, [pc, #20]	; (80050e8 <http_check_eof+0x5c>)
 80050d2:	f00d fa49 	bl	8012568 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 80050d6:	2301      	movs	r3, #1
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	080134b8 	.word	0x080134b8
 80050e4:	08013528 	.word	0x08013528
 80050e8:	08013500 	.word	0x08013500

080050ec <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 80050f6:	2300      	movs	r3, #0
 80050f8:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005102:	4293      	cmp	r3, r2
 8005104:	d803      	bhi.n	800510e <http_send_data_nonssi+0x22>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	b29b      	uxth	r3, r3
 800510c:	e001      	b.n	8005112 <http_send_data_nonssi+0x26>
 800510e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005112:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	6999      	ldr	r1, [r3, #24]
 8005118:	f107 020c 	add.w	r2, r7, #12
 800511c:	2300      	movs	r3, #0
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff fe8c 	bl	8004e3c <http_write>
 8005124:	4603      	mov	r3, r0
 8005126:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8005128:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10d      	bne.n	800514c <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8005130:	2301      	movs	r3, #1
 8005132:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	89ba      	ldrh	r2, [r7, #12]
 800513a:	441a      	add	r2, r3
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	89ba      	ldrh	r2, [r7, #12]
 8005146:	1a9a      	subs	r2, r3, r2
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800514c:	7bfb      	ldrb	r3, [r7, #15]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8005160:	2300      	movs	r3, #0
 8005162:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <http_send+0x18>
    return 0;
 800516a:	2300      	movs	r3, #0
 800516c:	e025      	b.n	80051ba <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	2b00      	cmp	r3, #0
 8005174:	d108      	bne.n	8005188 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8005176:	6839      	ldr	r1, [r7, #0]
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f7ff ff87 	bl	800508c <http_check_eof>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <http_send+0x32>
      return 0;
 8005184:	2300      	movs	r3, #0
 8005186:	e018      	b.n	80051ba <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8005188:	6839      	ldr	r1, [r7, #0]
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff ffae 	bl	80050ec <http_send_data_nonssi>
 8005190:	4603      	mov	r3, r0
 8005192:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10d      	bne.n	80051b8 <http_send+0x62>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff fdeb 	bl	8004d7c <fs_bytes_left>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	dc05      	bgt.n	80051b8 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7ff fefd 	bl	8004fae <http_eof>
    return 0;
 80051b4:	2300      	movs	r3, #0
 80051b6:	e000      	b.n	80051ba <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
	...

080051c4 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	4a1c      	ldr	r2, [pc, #112]	; (8005244 <http_get_404_file+0x80>)
 80051d2:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f7ff fd85 	bl	8004cec <fs_open>
 80051e2:	4603      	mov	r3, r0
 80051e4:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80051e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d024      	beq.n	8005238 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	4a15      	ldr	r2, [pc, #84]	; (8005248 <http_get_404_file+0x84>)
 80051f2:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4619      	mov	r1, r3
 80051fc:	4610      	mov	r0, r2
 80051fe:	f7ff fd75 	bl	8004cec <fs_open>
 8005202:	4603      	mov	r3, r0
 8005204:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8005206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d014      	beq.n	8005238 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	4a0e      	ldr	r2, [pc, #56]	; (800524c <http_get_404_file+0x88>)
 8005212:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4619      	mov	r1, r3
 800521c:	4610      	mov	r0, r2
 800521e:	f7ff fd65 	bl	8004cec <fs_open>
 8005222:	4603      	mov	r3, r0
 8005224:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8005226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d004      	beq.n	8005238 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
        return NULL;
 8005234:	2300      	movs	r3, #0
 8005236:	e000      	b.n	800523a <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8005238:	687b      	ldr	r3, [r7, #4]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3710      	adds	r7, #16
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	08013560 	.word	0x08013560
 8005248:	0801356c 	.word	0x0801356c
 800524c:	08013578 	.word	0x08013578

08005250 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08e      	sub	sp, #56	; 0x38
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <http_parse_request+0x24>
 8005266:	4b65      	ldr	r3, [pc, #404]	; (80053fc <http_parse_request+0x1ac>)
 8005268:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800526c:	4964      	ldr	r1, [pc, #400]	; (8005400 <http_parse_request+0x1b0>)
 800526e:	4865      	ldr	r0, [pc, #404]	; (8005404 <http_parse_request+0x1b4>)
 8005270:	f00d f97a 	bl	8012568 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <http_parse_request+0x38>
 800527a:	4b60      	ldr	r3, [pc, #384]	; (80053fc <http_parse_request+0x1ac>)
 800527c:	f240 72af 	movw	r2, #1967	; 0x7af
 8005280:	4961      	ldr	r1, [pc, #388]	; (8005408 <http_parse_request+0x1b8>)
 8005282:	4860      	ldr	r0, [pc, #384]	; (8005404 <http_parse_request+0x1b4>)
 8005284:	f00d f970 	bl	8012568 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d103      	bne.n	8005298 <http_parse_request+0x48>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8005298:	f06f 0307 	mvn.w	r3, #7
 800529c:	e0aa      	b.n	80053f4 <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d103      	bne.n	80052ae <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052aa:	621a      	str	r2, [r3, #32]
 80052ac:	e005      	b.n	80052ba <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052b4:	4618      	mov	r0, r3
 80052b6:	f001 ffa3 	bl	8007200 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80052ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052bc:	f001 ff7e 	bl	80071bc <pbuf_ref>

  if (hs->req->next != NULL) {
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d012      	beq.n	80052f0 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	891b      	ldrh	r3, [r3, #8]
 80052d0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80052d4:	4293      	cmp	r3, r2
 80052d6:	bf28      	it	cs
 80052d8:	4613      	movcs	r3, r2
 80052da:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	6a18      	ldr	r0, [r3, #32]
 80052e0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80052e2:	2300      	movs	r3, #0
 80052e4:	4949      	ldr	r1, [pc, #292]	; (800540c <http_parse_request+0x1bc>)
 80052e6:	f002 f8c3 	bl	8007470 <pbuf_copy_partial>
    data = httpd_req_buf;
 80052ea:	4b48      	ldr	r3, [pc, #288]	; (800540c <http_parse_request+0x1bc>)
 80052ec:	637b      	str	r3, [r7, #52]	; 0x34
 80052ee:	e005      	b.n	80052fc <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	895b      	ldrh	r3, [r3, #10]
 80052fa:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 80052fc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80052fe:	2b06      	cmp	r3, #6
 8005300:	d963      	bls.n	80053ca <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8005302:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005304:	461a      	mov	r2, r3
 8005306:	4942      	ldr	r1, [pc, #264]	; (8005410 <http_parse_request+0x1c0>)
 8005308:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800530a:	f000 fc0d 	bl	8005b28 <lwip_strnstr>
 800530e:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d059      	beq.n	80053ca <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800531a:	2204      	movs	r2, #4
 800531c:	493d      	ldr	r1, [pc, #244]	; (8005414 <http_parse_request+0x1c4>)
 800531e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005320:	f00d f97b 	bl	801261a <strncmp>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d117      	bne.n	800535a <http_parse_request+0x10a>
        sp1 = data + 3;
 800532a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532c:	3303      	adds	r3, #3
 800532e:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	3301      	adds	r3, #1
 8005334:	461a      	mov	r2, r3
 8005336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	b29b      	uxth	r3, r3
 800533c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	3301      	adds	r3, #1
 8005346:	8b7a      	ldrh	r2, [r7, #26]
 8005348:	4933      	ldr	r1, [pc, #204]	; (8005418 <http_parse_request+0x1c8>)
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fbec 	bl	8005b28 <lwip_strnstr>
 8005350:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8005352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005354:	2b00      	cmp	r3, #0
 8005356:	d111      	bne.n	800537c <http_parse_request+0x12c>
 8005358:	e006      	b.n	8005368 <http_parse_request+0x118>
        data[4] = 0;
 800535a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535c:	3304      	adds	r3, #4
 800535e:	2200      	movs	r2, #0
 8005360:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8005362:	f06f 030f 	mvn.w	r3, #15
 8005366:	e045      	b.n	80053f4 <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	3301      	adds	r3, #1
 800536c:	8b7a      	ldrh	r2, [r7, #26]
 800536e:	4928      	ldr	r1, [pc, #160]	; (8005410 <http_parse_request+0x1c0>)
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fbd9 	bl	8005b28 <lwip_strnstr>
 8005376:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8005378:	2301      	movs	r3, #1
 800537a:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	69fa      	ldr	r2, [r7, #28]
 8005380:	3201      	adds	r2, #1
 8005382:	1a9b      	subs	r3, r3, r2
 8005384:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01e      	beq.n	80053ca <http_parse_request+0x17a>
 800538c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	429a      	cmp	r2, r3
 8005392:	d91a      	bls.n	80053ca <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8005394:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005396:	461a      	mov	r2, r3
 8005398:	4920      	ldr	r1, [pc, #128]	; (800541c <http_parse_request+0x1cc>)
 800539a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800539c:	f000 fbc4 	bl	8005b28 <lwip_strnstr>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d011      	beq.n	80053ca <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	3301      	adds	r3, #1
 80053aa:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 80053b2:	8b3b      	ldrh	r3, [r7, #24]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4413      	add	r3, r2
 80053b8:	2200      	movs	r2, #0
 80053ba:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 80053bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053be:	6979      	ldr	r1, [r7, #20]
 80053c0:	68b8      	ldr	r0, [r7, #8]
 80053c2:	f000 f82d 	bl	8005420 <http_find_file>
 80053c6:	4603      	mov	r3, r0
 80053c8:	e014      	b.n	80053f4 <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f001 fedc 	bl	800718c <pbuf_clen>
 80053d4:	4603      	mov	r3, r0
 80053d6:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	6a1b      	ldr	r3, [r3, #32]
 80053dc:	891b      	ldrh	r3, [r3, #8]
 80053de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e2:	d205      	bcs.n	80053f0 <http_parse_request+0x1a0>
 80053e4:	8a7b      	ldrh	r3, [r7, #18]
 80053e6:	2b05      	cmp	r3, #5
 80053e8:	d802      	bhi.n	80053f0 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 80053ea:	f06f 0304 	mvn.w	r3, #4
 80053ee:	e001      	b.n	80053f4 <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 80053f0:	f06f 030f 	mvn.w	r3, #15
  }
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3738      	adds	r7, #56	; 0x38
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	080134b8 	.word	0x080134b8
 8005400:	08013584 	.word	0x08013584
 8005404:	08013500 	.word	0x08013500
 8005408:	08013590 	.word	0x08013590
 800540c:	2000009c 	.word	0x2000009c
 8005410:	0801359c 	.word	0x0801359c
 8005414:	080135a0 	.word	0x080135a0
 8005418:	080135a8 	.word	0x080135a8
 800541c:	080135ac 	.word	0x080135ac

08005420 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8005420:	b590      	push	{r4, r7, lr}
 8005422:	b093      	sub	sp, #76	; 0x4c
 8005424:	af02      	add	r7, sp, #8
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800542c:	2300      	movs	r3, #0
 800542e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8005430:	2300      	movs	r3, #0
 8005432:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4618      	mov	r0, r3
 800543e:	f7fa ff09 	bl	8000254 <strlen>
 8005442:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	2b00      	cmp	r3, #0
 8005448:	d06b      	beq.n	8005522 <http_find_file+0x102>
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	3b01      	subs	r3, #1
 8005450:	4413      	add	r3, r2
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b2f      	cmp	r3, #47	; 0x2f
 8005456:	d164      	bne.n	8005522 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005458:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800545a:	4a72      	ldr	r2, [pc, #456]	; (8005624 <http_find_file+0x204>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d102      	bne.n	8005466 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	2b01      	cmp	r3, #1
 8005464:	d15d      	bne.n	8005522 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	3b01      	subs	r3, #1
 800546a:	2b3f      	cmp	r3, #63	; 0x3f
 800546c:	bf28      	it	cs
 800546e:	233f      	movcs	r3, #63	; 0x3f
 8005470:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	6a3a      	ldr	r2, [r7, #32]
 800547c:	4619      	mov	r1, r3
 800547e:	4869      	ldr	r0, [pc, #420]	; (8005624 <http_find_file+0x204>)
 8005480:	f00d f85f 	bl	8012542 <memcpy>
      http_uri_buf[copy_len] = 0;
 8005484:	4a67      	ldr	r2, [pc, #412]	; (8005624 <http_find_file+0x204>)
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	4413      	add	r3, r2
 800548a:	2200      	movs	r2, #0
 800548c:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800548e:	2300      	movs	r3, #0
 8005490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005492:	e043      	b.n	800551c <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d028      	beq.n	80054ec <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80054a0:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d01e      	beq.n	80054e6 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80054a8:	4a5f      	ldr	r2, [pc, #380]	; (8005628 <http_find_file+0x208>)
 80054aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fa fecf 	bl	8000254 <strlen>
 80054b6:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	4293      	cmp	r3, r2
 80054be:	bf28      	it	cs
 80054c0:	4613      	movcs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80054c4:	6a3b      	ldr	r3, [r7, #32]
 80054c6:	4a57      	ldr	r2, [pc, #348]	; (8005624 <http_find_file+0x204>)
 80054c8:	1898      	adds	r0, r3, r2
 80054ca:	4a57      	ldr	r2, [pc, #348]	; (8005628 <http_find_file+0x208>)
 80054cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4619      	mov	r1, r3
 80054d6:	f00d f834 	bl	8012542 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 80054da:	6a3a      	ldr	r2, [r7, #32]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	4413      	add	r3, r2
 80054e0:	4a50      	ldr	r2, [pc, #320]	; (8005624 <http_find_file+0x204>)
 80054e2:	2100      	movs	r1, #0
 80054e4:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 80054e6:	4b4f      	ldr	r3, [pc, #316]	; (8005624 <http_find_file+0x204>)
 80054e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ea:	e004      	b.n	80054f6 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 80054ec:	4a4e      	ldr	r2, [pc, #312]	; (8005628 <http_find_file+0x208>)
 80054ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff fbf6 	bl	8004cec <fs_open>
 8005500:	4603      	mov	r3, r0
 8005502:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8005504:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d104      	bne.n	8005516 <http_find_file+0xf6>
        uri = file_name;
 800550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8005514:	e005      	b.n	8005522 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8005516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005518:	3301      	adds	r3, #1
 800551a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800551c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551e:	2b04      	cmp	r3, #4
 8005520:	d9b8      	bls.n	8005494 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8005522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005524:	2b00      	cmp	r3, #0
 8005526:	d161      	bne.n	80055ec <http_find_file+0x1cc>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	213f      	movs	r1, #63	; 0x3f
 800552c:	4618      	mov	r0, r3
 800552e:	f00d f867 	bl	8012600 <strchr>
 8005532:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8005534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800553a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
      params++;
 8005540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005542:	3301      	adds	r3, #1
 8005544:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8005546:	4b39      	ldr	r3, [pc, #228]	; (800562c <http_find_file+0x20c>)
 8005548:	f04f 32ff 	mov.w	r2, #4294967295
 800554c:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800554e:	4b38      	ldr	r3, [pc, #224]	; (8005630 <http_find_file+0x210>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d034      	beq.n	80055c0 <http_find_file+0x1a0>
 8005556:	4b37      	ldr	r3, [pc, #220]	; (8005634 <http_find_file+0x214>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d030      	beq.n	80055c0 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 800555e:	2300      	movs	r3, #0
 8005560:	633b      	str	r3, [r7, #48]	; 0x30
 8005562:	e028      	b.n	80055b6 <http_find_file+0x196>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8005564:	68b8      	ldr	r0, [r7, #8]
 8005566:	4b33      	ldr	r3, [pc, #204]	; (8005634 <http_find_file+0x214>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	4413      	add	r3, r2
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4619      	mov	r1, r3
 8005574:	f7fa fe64 	bl	8000240 <strcmp>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d118      	bne.n	80055b0 <http_find_file+0x190>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800557e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f7ff fd21 	bl	8004fc8 <extract_uri_parameters>
 8005586:	4602      	mov	r2, r0
 8005588:	4b28      	ldr	r3, [pc, #160]	; (800562c <http_find_file+0x20c>)
 800558a:	601a      	str	r2, [r3, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800558c:	4b29      	ldr	r3, [pc, #164]	; (8005634 <http_find_file+0x214>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	4413      	add	r3, r2
 8005596:	685c      	ldr	r4, [r3, #4]
 8005598:	4b24      	ldr	r3, [pc, #144]	; (800562c <http_find_file+0x20c>)
 800559a:	6819      	ldr	r1, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
                                         hs->param_vals);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	336c      	adds	r3, #108	; 0x6c
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80055a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055a8:	47a0      	blx	r4
 80055aa:	4603      	mov	r3, r0
 80055ac:	60bb      	str	r3, [r7, #8]
          break;
 80055ae:	e007      	b.n	80055c0 <http_find_file+0x1a0>
      for (i = 0; i < httpd_num_cgis; i++) {
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	3301      	adds	r3, #1
 80055b4:	633b      	str	r3, [r7, #48]	; 0x30
 80055b6:	4b1e      	ldr	r3, [pc, #120]	; (8005630 <http_find_file+0x210>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055bc:	429a      	cmp	r2, r3
 80055be:	dbd1      	blt.n	8005564 <http_find_file+0x144>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	4611      	mov	r1, r2
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff fb90 	bl	8004cec <fs_open>
 80055cc:	4603      	mov	r3, r0
 80055ce:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 80055d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d102      	bne.n	80055de <http_find_file+0x1be>
      file = &hs->file_handle;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	63bb      	str	r3, [r7, #56]	; 0x38
 80055dc:	e006      	b.n	80055ec <http_find_file+0x1cc>
    } else {
      file = http_get_404_file(hs, &uri);
 80055de:	f107 0308 	add.w	r3, r7, #8
 80055e2:	4619      	mov	r1, r3
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff fded 	bl	80051c4 <http_get_404_file>
 80055ea:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 80055ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <http_find_file+0x1e0>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 80055f2:	f107 0308 	add.w	r3, r7, #8
 80055f6:	4619      	mov	r1, r3
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f7ff fde3 	bl	80051c4 <http_get_404_file>
 80055fe:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005604:	9301      	str	r3, [sp, #4]
 8005606:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	4613      	mov	r3, r2
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f810 	bl	8005638 <http_init_file>
 8005618:	4603      	mov	r3, r0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3744      	adds	r7, #68	; 0x44
 800561e:	46bd      	mov	sp, r7
 8005620:	bd90      	pop	{r4, r7, pc}
 8005622:	bf00      	nop
 8005624:	2000049c 	.word	0x2000049c
 8005628:	08016994 	.word	0x08016994
 800562c:	200004e4 	.word	0x200004e4
 8005630:	200004e0 	.word	0x200004e0
 8005634:	200004dc 	.word	0x200004dc

08005638 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d05d      	beq.n	8005708 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d106      	bne.n	8005662 <http_init_file+0x2a>
 8005654:	4b35      	ldr	r3, [pc, #212]	; (800572c <http_init_file+0xf4>)
 8005656:	f640 120b 	movw	r2, #2315	; 0x90b
 800565a:	4935      	ldr	r1, [pc, #212]	; (8005730 <http_init_file+0xf8>)
 800565c:	4835      	ldr	r0, [pc, #212]	; (8005734 <http_init_file+0xfc>)
 800565e:	f00c ff83 	bl	8012568 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	68ba      	ldr	r2, [r7, #8]
 8005666:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	da06      	bge.n	8005686 <http_init_file+0x4e>
 8005678:	4b2c      	ldr	r3, [pc, #176]	; (800572c <http_init_file+0xf4>)
 800567a:	f640 1234 	movw	r2, #2356	; 0x934
 800567e:	492e      	ldr	r1, [pc, #184]	; (8005738 <http_init_file+0x100>)
 8005680:	482c      	ldr	r0, [pc, #176]	; (8005734 <http_init_file+0xfc>)
 8005682:	f00c ff71 	bl	8012568 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	461a      	mov	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	7c1b      	ldrb	r3, [r3, #16]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <http_init_file+0x7c>
 80056a6:	4b21      	ldr	r3, [pc, #132]	; (800572c <http_init_file+0xf4>)
 80056a8:	f640 1244 	movw	r2, #2372	; 0x944
 80056ac:	4923      	ldr	r1, [pc, #140]	; (800573c <http_init_file+0x104>)
 80056ae:	4821      	ldr	r0, [pc, #132]	; (8005734 <http_init_file+0xfc>)
 80056b0:	f00c ff5a 	bl	8012568 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d033      	beq.n	8005722 <http_init_file+0xea>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	7c1b      	ldrb	r3, [r3, #16]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d02c      	beq.n	8005722 <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6998      	ldr	r0, [r3, #24]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	461a      	mov	r2, r3
 80056d2:	491b      	ldr	r1, [pc, #108]	; (8005740 <http_init_file+0x108>)
 80056d4:	f000 fa28 	bl	8005b28 <lwip_strnstr>
 80056d8:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d020      	beq.n	8005722 <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	3304      	adds	r3, #4
 80056e4:	461a      	mov	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	441a      	add	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad2      	subs	r2, r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	625a      	str	r2, [r3, #36]	; 0x24
 8005706:	e00c      	b.n	8005722 <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	080134b8 	.word	0x080134b8
 8005730:	080135b4 	.word	0x080135b4
 8005734:	08013500 	.word	0x08013500
 8005738:	080135c8 	.word	0x080135c8
 800573c:	080135e8 	.word	0x080135e8
 8005740:	080135ac 	.word	0x080135ac

08005744 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	460b      	mov	r3, r1
 800574e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d002      	beq.n	8005760 <http_err+0x1c>
    http_state_free(hs);
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7ff fb5c 	bl	8004e18 <http_state_free>
  }
}
 8005760:	bf00      	nop
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	4613      	mov	r3, r2
 8005774:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <http_sent+0x1c>
    return ERR_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	e008      	b.n	8005796 <http_sent+0x2e>
  }

  hs->retries = 0;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800578c:	6979      	ldr	r1, [r7, #20]
 800578e:	68b8      	ldr	r0, [r7, #8]
 8005790:	f7ff fce1 	bl	8005156 <http_send>

  return ERR_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d107      	bne.n	80057c2 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 80057b2:	2100      	movs	r1, #0
 80057b4:	6838      	ldr	r0, [r7, #0]
 80057b6:	f7ff fbeb 	bl	8004f90 <http_close_conn>
 80057ba:	4603      	mov	r3, r0
 80057bc:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	e021      	b.n	8005806 <http_poll+0x68>
  } else {
    hs->retries++;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057c8:	3301      	adds	r3, #1
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d105      	bne.n	80057e8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 80057dc:	68f9      	ldr	r1, [r7, #12]
 80057de:	6838      	ldr	r0, [r7, #0]
 80057e0:	f7ff fbd6 	bl	8004f90 <http_close_conn>
      return ERR_OK;
 80057e4:	2300      	movs	r3, #0
 80057e6:	e00e      	b.n	8005806 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d009      	beq.n	8005804 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80057f0:	68f9      	ldr	r1, [r7, #12]
 80057f2:	6838      	ldr	r0, [r7, #0]
 80057f4:	f7ff fcaf 	bl	8005156 <http_send>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80057fe:	6838      	ldr	r0, [r7, #0]
 8005800:	f006 ffae 	bl	800c760 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8005822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d105      	bne.n	8005836 <http_recv+0x26>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <http_recv+0x26>
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d111      	bne.n	800585a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d008      	beq.n	800584e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	891b      	ldrh	r3, [r3, #8]
 8005840:	4619      	mov	r1, r3
 8005842:	68b8      	ldr	r0, [r7, #8]
 8005844:	f002 fb84 	bl	8007f50 <tcp_recved>
      pbuf_free(p);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f001 fc17 	bl	800707c <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800584e:	6979      	ldr	r1, [r7, #20]
 8005850:	68b8      	ldr	r0, [r7, #8]
 8005852:	f7ff fb9d 	bl	8004f90 <http_close_conn>
    return ERR_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	e055      	b.n	8005906 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	891b      	ldrh	r3, [r3, #8]
 800585e:	4619      	mov	r1, r3
 8005860:	68b8      	ldr	r0, [r7, #8]
 8005862:	f002 fb75 	bl	8007f50 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d147      	bne.n	80058fe <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	6979      	ldr	r1, [r7, #20]
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff fcec 	bl	8005250 <http_parse_request>
 8005878:	4603      	mov	r3, r0
 800587a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800587c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d015      	beq.n	80058b0 <http_recv+0xa0>
 8005884:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005888:	f113 0f05 	cmn.w	r3, #5
 800588c:	d010      	beq.n	80058b0 <http_recv+0xa0>
 800588e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005892:	f113 0f10 	cmn.w	r3, #16
 8005896:	d00b      	beq.n	80058b0 <http_recv+0xa0>
 8005898:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800589c:	f113 0f08 	cmn.w	r3, #8
 80058a0:	d006      	beq.n	80058b0 <http_recv+0xa0>
 80058a2:	4b1b      	ldr	r3, [pc, #108]	; (8005910 <http_recv+0x100>)
 80058a4:	f640 2205 	movw	r2, #2565	; 0xa05
 80058a8:	491a      	ldr	r1, [pc, #104]	; (8005914 <http_recv+0x104>)
 80058aa:	481b      	ldr	r0, [pc, #108]	; (8005918 <http_recv+0x108>)
 80058ac:	f00c fe5c 	bl	8012568 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 80058b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80058b4:	f113 0f05 	cmn.w	r3, #5
 80058b8:	d00b      	beq.n	80058d2 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d007      	beq.n	80058d2 <http_recv+0xc2>
          pbuf_free(hs->req);
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f001 fbd8 	bl	800707c <pbuf_free>
          hs->req = NULL;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2200      	movs	r2, #0
 80058d0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f001 fbd2 	bl	800707c <pbuf_free>
      if (parsed == ERR_OK) {
 80058d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d104      	bne.n	80058ea <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 80058e0:	6979      	ldr	r1, [r7, #20]
 80058e2:	68b8      	ldr	r0, [r7, #8]
 80058e4:	f7ff fc37 	bl	8005156 <http_send>
 80058e8:	e00c      	b.n	8005904 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 80058ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80058ee:	f113 0f10 	cmn.w	r3, #16
 80058f2:	d107      	bne.n	8005904 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 80058f4:	6979      	ldr	r1, [r7, #20]
 80058f6:	68b8      	ldr	r0, [r7, #8]
 80058f8:	f7ff fb4a 	bl	8004f90 <http_close_conn>
 80058fc:	e002      	b.n	8005904 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f001 fbbc 	bl	800707c <pbuf_free>
    }
  }
  return ERR_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	080134b8 	.word	0x080134b8
 8005914:	08013614 	.word	0x08013614
 8005918:	08013500 	.word	0x08013500

0800591c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	4613      	mov	r3, r2
 8005928:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800592a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d102      	bne.n	8005938 <http_accept+0x1c>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d102      	bne.n	800593e <http_accept+0x22>
    return ERR_VAL;
 8005938:	f06f 0305 	mvn.w	r3, #5
 800593c:	e025      	b.n	800598a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800593e:	2101      	movs	r1, #1
 8005940:	68b8      	ldr	r0, [r7, #8]
 8005942:	f002 ffe5 	bl	8008910 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8005946:	f7ff fa35 	bl	8004db4 <http_state_alloc>
 800594a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d102      	bne.n	8005958 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8005952:	f04f 33ff 	mov.w	r3, #4294967295
 8005956:	e018      	b.n	800598a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800595e:	6979      	ldr	r1, [r7, #20]
 8005960:	68b8      	ldr	r0, [r7, #8]
 8005962:	f003 f9d5 	bl	8008d10 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8005966:	490b      	ldr	r1, [pc, #44]	; (8005994 <http_accept+0x78>)
 8005968:	68b8      	ldr	r0, [r7, #8]
 800596a:	f003 f9e3 	bl	8008d34 <tcp_recv>
  altcp_err(pcb, http_err);
 800596e:	490a      	ldr	r1, [pc, #40]	; (8005998 <http_accept+0x7c>)
 8005970:	68b8      	ldr	r0, [r7, #8]
 8005972:	f003 fa23 	bl	8008dbc <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8005976:	2204      	movs	r2, #4
 8005978:	4908      	ldr	r1, [pc, #32]	; (800599c <http_accept+0x80>)
 800597a:	68b8      	ldr	r0, [r7, #8]
 800597c:	f003 fa58 	bl	8008e30 <tcp_poll>
  altcp_sent(pcb, http_sent);
 8005980:	4907      	ldr	r1, [pc, #28]	; (80059a0 <http_accept+0x84>)
 8005982:	68b8      	ldr	r0, [r7, #8]
 8005984:	f003 f9f8 	bl	8008d78 <tcp_sent>

  return ERR_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	08005811 	.word	0x08005811
 8005998:	08005745 	.word	0x08005745
 800599c:	0800579f 	.word	0x0800579f
 80059a0:	08005769 	.word	0x08005769

080059a4 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	460b      	mov	r3, r1
 80059ae:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d029      	beq.n	8005a0a <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80059b6:	2101      	movs	r1, #1
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f002 ffa9 	bl	8008910 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 80059be:	887b      	ldrh	r3, [r7, #2]
 80059c0:	461a      	mov	r2, r3
 80059c2:	4914      	ldr	r1, [pc, #80]	; (8005a14 <httpd_init_pcb+0x70>)
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f002 f8f5 	bl	8007bb4 <tcp_bind>
 80059ca:	4603      	mov	r3, r0
 80059cc:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80059ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d006      	beq.n	80059e4 <httpd_init_pcb+0x40>
 80059d6:	4b10      	ldr	r3, [pc, #64]	; (8005a18 <httpd_init_pcb+0x74>)
 80059d8:	f640 2257 	movw	r2, #2647	; 0xa57
 80059dc:	490f      	ldr	r1, [pc, #60]	; (8005a1c <httpd_init_pcb+0x78>)
 80059de:	4810      	ldr	r0, [pc, #64]	; (8005a20 <httpd_init_pcb+0x7c>)
 80059e0:	f00c fdc2 	bl	8012568 <iprintf>
    pcb = altcp_listen(pcb);
 80059e4:	21ff      	movs	r1, #255	; 0xff
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f002 f99c 	bl	8007d24 <tcp_listen_with_backlog>
 80059ec:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d106      	bne.n	8005a02 <httpd_init_pcb+0x5e>
 80059f4:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <httpd_init_pcb+0x74>)
 80059f6:	f640 2259 	movw	r2, #2649	; 0xa59
 80059fa:	490a      	ldr	r1, [pc, #40]	; (8005a24 <httpd_init_pcb+0x80>)
 80059fc:	4808      	ldr	r0, [pc, #32]	; (8005a20 <httpd_init_pcb+0x7c>)
 80059fe:	f00c fdb3 	bl	8012568 <iprintf>
    altcp_accept(pcb, http_accept);
 8005a02:	4909      	ldr	r1, [pc, #36]	; (8005a28 <httpd_init_pcb+0x84>)
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f003 f9fb 	bl	8008e00 <tcp_accept>
  }
}
 8005a0a:	bf00      	nop
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	08016a9c 	.word	0x08016a9c
 8005a18:	080134b8 	.word	0x080134b8
 8005a1c:	08013640 	.word	0x08013640
 8005a20:	08013500 	.word	0x08013500
 8005a24:	0801365c 	.word	0x0801365c
 8005a28:	0800591d 	.word	0x0800591d

08005a2c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8005a32:	202e      	movs	r0, #46	; 0x2e
 8005a34:	f003 f95e 	bl	8008cf4 <tcp_new_ip_type>
 8005a38:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d106      	bne.n	8005a4e <httpd_init+0x22>
 8005a40:	4b07      	ldr	r3, [pc, #28]	; (8005a60 <httpd_init+0x34>)
 8005a42:	f640 2272 	movw	r2, #2674	; 0xa72
 8005a46:	4907      	ldr	r1, [pc, #28]	; (8005a64 <httpd_init+0x38>)
 8005a48:	4807      	ldr	r0, [pc, #28]	; (8005a68 <httpd_init+0x3c>)
 8005a4a:	f00c fd8d 	bl	8012568 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8005a4e:	2150      	movs	r1, #80	; 0x50
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f7ff ffa7 	bl	80059a4 <httpd_init_pcb>
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	080134b8 	.word	0x080134b8
 8005a64:	0801367c 	.word	0x0801367c
 8005a68:	08013500 	.word	0x08013500

08005a6c <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d106      	bne.n	8005a8a <http_set_cgi_handlers+0x1e>
 8005a7c:	4b0d      	ldr	r3, [pc, #52]	; (8005ab4 <http_set_cgi_handlers+0x48>)
 8005a7e:	f640 22b2 	movw	r2, #2738	; 0xab2
 8005a82:	490d      	ldr	r1, [pc, #52]	; (8005ab8 <http_set_cgi_handlers+0x4c>)
 8005a84:	480d      	ldr	r0, [pc, #52]	; (8005abc <http_set_cgi_handlers+0x50>)
 8005a86:	f00c fd6f 	bl	8012568 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	dc06      	bgt.n	8005a9e <http_set_cgi_handlers+0x32>
 8005a90:	4b08      	ldr	r3, [pc, #32]	; (8005ab4 <http_set_cgi_handlers+0x48>)
 8005a92:	f640 22b3 	movw	r2, #2739	; 0xab3
 8005a96:	490a      	ldr	r1, [pc, #40]	; (8005ac0 <http_set_cgi_handlers+0x54>)
 8005a98:	4808      	ldr	r0, [pc, #32]	; (8005abc <http_set_cgi_handlers+0x50>)
 8005a9a:	f00c fd65 	bl	8012568 <iprintf>

  httpd_cgis = cgis;
 8005a9e:	4a09      	ldr	r2, [pc, #36]	; (8005ac4 <http_set_cgi_handlers+0x58>)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8005aa4:	4a08      	ldr	r2, [pc, #32]	; (8005ac8 <http_set_cgi_handlers+0x5c>)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6013      	str	r3, [r2, #0]
}
 8005aaa:	bf00      	nop
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	080134b8 	.word	0x080134b8
 8005ab8:	08013698 	.word	0x08013698
 8005abc:	08013500 	.word	0x08013500
 8005ac0:	080136a8 	.word	0x080136a8
 8005ac4:	200004dc 	.word	0x200004dc
 8005ac8:	200004e0 	.word	0x200004e0

08005acc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8005ad6:	88fb      	ldrh	r3, [r7, #6]
 8005ad8:	021b      	lsls	r3, r3, #8
 8005ada:	b21a      	sxth	r2, r3
 8005adc:	88fb      	ldrh	r3, [r7, #6]
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	b21b      	sxth	r3, r3
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	b21b      	sxth	r3, r3
 8005ae8:	b29b      	uxth	r3, r3
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	061a      	lsls	r2, r3, #24
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	021b      	lsls	r3, r3, #8
 8005b06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	0a1b      	lsrs	r3, r3, #8
 8005b10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	0e1b      	lsrs	r3, r3, #24
 8005b1a:	4313      	orrs	r3, r2
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8005b34:	68b8      	ldr	r0, [r7, #8]
 8005b36:	f7fa fb8d 	bl	8000254 <strlen>
 8005b3a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	e022      	b.n	8005b8c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	617b      	str	r3, [r7, #20]
 8005b4a:	e012      	b.n	8005b72 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	781a      	ldrb	r2, [r3, #0]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d109      	bne.n	8005b6c <lwip_strnstr+0x44>
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	68b9      	ldr	r1, [r7, #8]
 8005b5c:	6978      	ldr	r0, [r7, #20]
 8005b5e:	f00c fd5c 	bl	801261a <strncmp>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	e00f      	b.n	8005b8c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d007      	beq.n	8005b8a <lwip_strnstr+0x62>
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	441a      	add	r2, r3
 8005b80:	68f9      	ldr	r1, [r7, #12]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	440b      	add	r3, r1
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d9e0      	bls.n	8005b4c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3718      	adds	r7, #24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005b9e:	f000 f8d5 	bl	8005d4c <mem_init>
  memp_init();
 8005ba2:	f000 fbdb 	bl	800635c <memp_init>
  pbuf_init();
  netif_init();
 8005ba6:	f000 fc93 	bl	80064d0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8005baa:	f007 fea9 	bl	800d900 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005bae:	f001 fd03 	bl	80075b8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005bb2:	f007 fe1d 	bl	800d7f0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8005bca:	4b05      	ldr	r3, [pc, #20]	; (8005be0 <ptr_to_mem+0x20>)
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	88fb      	ldrh	r3, [r7, #6]
 8005bd0:	4413      	add	r3, r2
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	200004e8 	.word	0x200004e8

08005be4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a05      	ldr	r2, [pc, #20]	; (8005c04 <mem_to_ptr+0x20>)
 8005bf0:	6812      	ldr	r2, [r2, #0]
 8005bf2:	1a9b      	subs	r3, r3, r2
 8005bf4:	b29b      	uxth	r3, r3
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	200004e8 	.word	0x200004e8

08005c08 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005c08:	b590      	push	{r4, r7, lr}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005c10:	4b45      	ldr	r3, [pc, #276]	; (8005d28 <plug_holes+0x120>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d206      	bcs.n	8005c28 <plug_holes+0x20>
 8005c1a:	4b44      	ldr	r3, [pc, #272]	; (8005d2c <plug_holes+0x124>)
 8005c1c:	f240 12df 	movw	r2, #479	; 0x1df
 8005c20:	4943      	ldr	r1, [pc, #268]	; (8005d30 <plug_holes+0x128>)
 8005c22:	4844      	ldr	r0, [pc, #272]	; (8005d34 <plug_holes+0x12c>)
 8005c24:	f00c fca0 	bl	8012568 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005c28:	4b43      	ldr	r3, [pc, #268]	; (8005d38 <plug_holes+0x130>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d306      	bcc.n	8005c40 <plug_holes+0x38>
 8005c32:	4b3e      	ldr	r3, [pc, #248]	; (8005d2c <plug_holes+0x124>)
 8005c34:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005c38:	4940      	ldr	r1, [pc, #256]	; (8005d3c <plug_holes+0x134>)
 8005c3a:	483e      	ldr	r0, [pc, #248]	; (8005d34 <plug_holes+0x12c>)
 8005c3c:	f00c fc94 	bl	8012568 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	791b      	ldrb	r3, [r3, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d006      	beq.n	8005c56 <plug_holes+0x4e>
 8005c48:	4b38      	ldr	r3, [pc, #224]	; (8005d2c <plug_holes+0x124>)
 8005c4a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005c4e:	493c      	ldr	r1, [pc, #240]	; (8005d40 <plug_holes+0x138>)
 8005c50:	4838      	ldr	r0, [pc, #224]	; (8005d34 <plug_holes+0x12c>)
 8005c52:	f00c fc89 	bl	8012568 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c5e:	d906      	bls.n	8005c6e <plug_holes+0x66>
 8005c60:	4b32      	ldr	r3, [pc, #200]	; (8005d2c <plug_holes+0x124>)
 8005c62:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005c66:	4937      	ldr	r1, [pc, #220]	; (8005d44 <plug_holes+0x13c>)
 8005c68:	4832      	ldr	r0, [pc, #200]	; (8005d34 <plug_holes+0x12c>)
 8005c6a:	f00c fc7d 	bl	8012568 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff ffa4 	bl	8005bc0 <ptr_to_mem>
 8005c78:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d024      	beq.n	8005ccc <plug_holes+0xc4>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	791b      	ldrb	r3, [r3, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d120      	bne.n	8005ccc <plug_holes+0xc4>
 8005c8a:	4b2b      	ldr	r3, [pc, #172]	; (8005d38 <plug_holes+0x130>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d01b      	beq.n	8005ccc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005c94:	4b2c      	ldr	r3, [pc, #176]	; (8005d48 <plug_holes+0x140>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d102      	bne.n	8005ca4 <plug_holes+0x9c>
      lfree = mem;
 8005c9e:	4a2a      	ldr	r2, [pc, #168]	; (8005d48 <plug_holes+0x140>)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	881a      	ldrh	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005cb4:	d00a      	beq.n	8005ccc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7ff ff80 	bl	8005bc0 <ptr_to_mem>
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff ff8e 	bl	8005be4 <mem_to_ptr>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	885b      	ldrh	r3, [r3, #2]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff ff75 	bl	8005bc0 <ptr_to_mem>
 8005cd6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d01f      	beq.n	8005d20 <plug_holes+0x118>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	791b      	ldrb	r3, [r3, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d11b      	bne.n	8005d20 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005ce8:	4b17      	ldr	r3, [pc, #92]	; (8005d48 <plug_holes+0x140>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d102      	bne.n	8005cf8 <plug_holes+0xf0>
      lfree = pmem;
 8005cf2:	4a15      	ldr	r2, [pc, #84]	; (8005d48 <plug_holes+0x140>)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	881a      	ldrh	r2, [r3, #0]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d08:	d00a      	beq.n	8005d20 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7ff ff56 	bl	8005bc0 <ptr_to_mem>
 8005d14:	4604      	mov	r4, r0
 8005d16:	68b8      	ldr	r0, [r7, #8]
 8005d18:	f7ff ff64 	bl	8005be4 <mem_to_ptr>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005d20:	bf00      	nop
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd90      	pop	{r4, r7, pc}
 8005d28:	200004e8 	.word	0x200004e8
 8005d2c:	080136c4 	.word	0x080136c4
 8005d30:	080136f4 	.word	0x080136f4
 8005d34:	0801370c 	.word	0x0801370c
 8005d38:	200004ec 	.word	0x200004ec
 8005d3c:	08013734 	.word	0x08013734
 8005d40:	08013750 	.word	0x08013750
 8005d44:	0801376c 	.word	0x0801376c
 8005d48:	200004f0 	.word	0x200004f0

08005d4c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005d52:	4b18      	ldr	r3, [pc, #96]	; (8005db4 <mem_init+0x68>)
 8005d54:	3303      	adds	r3, #3
 8005d56:	f023 0303 	bic.w	r3, r3, #3
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	4b16      	ldr	r3, [pc, #88]	; (8005db8 <mem_init+0x6c>)
 8005d5e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005d60:	4b15      	ldr	r3, [pc, #84]	; (8005db8 <mem_init+0x6c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005d6c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005d7a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005d7e:	f7ff ff1f 	bl	8005bc0 <ptr_to_mem>
 8005d82:	4602      	mov	r2, r0
 8005d84:	4b0d      	ldr	r3, [pc, #52]	; (8005dbc <mem_init+0x70>)
 8005d86:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8005d88:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <mem_init+0x70>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005d90:	4b0a      	ldr	r3, [pc, #40]	; (8005dbc <mem_init+0x70>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005d98:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8005d9a:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <mem_init+0x70>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005da2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005da4:	4b04      	ldr	r3, [pc, #16]	; (8005db8 <mem_init+0x6c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a05      	ldr	r2, [pc, #20]	; (8005dc0 <mem_init+0x74>)
 8005daa:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005dac:	bf00      	nop
 8005dae:	3708      	adds	r7, #8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	20003c3c 	.word	0x20003c3c
 8005db8:	200004e8 	.word	0x200004e8
 8005dbc:	200004ec 	.word	0x200004ec
 8005dc0:	200004f0 	.word	0x200004f0

08005dc4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f7ff ff09 	bl	8005be4 <mem_to_ptr>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff fef0 	bl	8005bc0 <ptr_to_mem>
 8005de0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	885b      	ldrh	r3, [r3, #2]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7ff feea 	bl	8005bc0 <ptr_to_mem>
 8005dec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005df6:	d818      	bhi.n	8005e2a <mem_link_valid+0x66>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	885b      	ldrh	r3, [r3, #2]
 8005dfc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005e00:	d813      	bhi.n	8005e2a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005e06:	8afa      	ldrh	r2, [r7, #22]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d004      	beq.n	8005e16 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	8afa      	ldrh	r2, [r7, #22]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d109      	bne.n	8005e2a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005e16:	4b08      	ldr	r3, [pc, #32]	; (8005e38 <mem_link_valid+0x74>)
 8005e18:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d006      	beq.n	8005e2e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	885b      	ldrh	r3, [r3, #2]
 8005e24:	8afa      	ldrh	r2, [r7, #22]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d001      	beq.n	8005e2e <mem_link_valid+0x6a>
    return 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e000      	b.n	8005e30 <mem_link_valid+0x6c>
  }
  return 1;
 8005e2e:	2301      	movs	r3, #1
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	200004ec 	.word	0x200004ec

08005e3c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d04c      	beq.n	8005ee4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d007      	beq.n	8005e64 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8005e54:	4b25      	ldr	r3, [pc, #148]	; (8005eec <mem_free+0xb0>)
 8005e56:	f240 2273 	movw	r2, #627	; 0x273
 8005e5a:	4925      	ldr	r1, [pc, #148]	; (8005ef0 <mem_free+0xb4>)
 8005e5c:	4825      	ldr	r0, [pc, #148]	; (8005ef4 <mem_free+0xb8>)
 8005e5e:	f00c fb83 	bl	8012568 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e62:	e040      	b.n	8005ee6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3b08      	subs	r3, #8
 8005e68:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005e6a:	4b23      	ldr	r3, [pc, #140]	; (8005ef8 <mem_free+0xbc>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d306      	bcc.n	8005e82 <mem_free+0x46>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f103 020c 	add.w	r2, r3, #12
 8005e7a:	4b20      	ldr	r3, [pc, #128]	; (8005efc <mem_free+0xc0>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d907      	bls.n	8005e92 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005e82:	4b1a      	ldr	r3, [pc, #104]	; (8005eec <mem_free+0xb0>)
 8005e84:	f240 227f 	movw	r2, #639	; 0x27f
 8005e88:	491d      	ldr	r1, [pc, #116]	; (8005f00 <mem_free+0xc4>)
 8005e8a:	481a      	ldr	r0, [pc, #104]	; (8005ef4 <mem_free+0xb8>)
 8005e8c:	f00c fb6c 	bl	8012568 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005e90:	e029      	b.n	8005ee6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	791b      	ldrb	r3, [r3, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d107      	bne.n	8005eaa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005e9a:	4b14      	ldr	r3, [pc, #80]	; (8005eec <mem_free+0xb0>)
 8005e9c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005ea0:	4918      	ldr	r1, [pc, #96]	; (8005f04 <mem_free+0xc8>)
 8005ea2:	4814      	ldr	r0, [pc, #80]	; (8005ef4 <mem_free+0xb8>)
 8005ea4:	f00c fb60 	bl	8012568 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005ea8:	e01d      	b.n	8005ee6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f7ff ff8a 	bl	8005dc4 <mem_link_valid>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d107      	bne.n	8005ec6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	; (8005eec <mem_free+0xb0>)
 8005eb8:	f240 2295 	movw	r2, #661	; 0x295
 8005ebc:	4912      	ldr	r1, [pc, #72]	; (8005f08 <mem_free+0xcc>)
 8005ebe:	480d      	ldr	r0, [pc, #52]	; (8005ef4 <mem_free+0xb8>)
 8005ec0:	f00c fb52 	bl	8012568 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005ec4:	e00f      	b.n	8005ee6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005ecc:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <mem_free+0xd0>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d202      	bcs.n	8005edc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005ed6:	4a0d      	ldr	r2, [pc, #52]	; (8005f0c <mem_free+0xd0>)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f7ff fe93 	bl	8005c08 <plug_holes>
 8005ee2:	e000      	b.n	8005ee6 <mem_free+0xaa>
    return;
 8005ee4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	080136c4 	.word	0x080136c4
 8005ef0:	08013798 	.word	0x08013798
 8005ef4:	0801370c 	.word	0x0801370c
 8005ef8:	200004e8 	.word	0x200004e8
 8005efc:	200004ec 	.word	0x200004ec
 8005f00:	080137bc 	.word	0x080137bc
 8005f04:	080137d8 	.word	0x080137d8
 8005f08:	08013800 	.word	0x08013800
 8005f0c:	200004f0 	.word	0x200004f0

08005f10 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005f1c:	887b      	ldrh	r3, [r7, #2]
 8005f1e:	3303      	adds	r3, #3
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f023 0303 	bic.w	r3, r3, #3
 8005f26:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005f28:	8bfb      	ldrh	r3, [r7, #30]
 8005f2a:	2b0b      	cmp	r3, #11
 8005f2c:	d801      	bhi.n	8005f32 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005f2e:	230c      	movs	r3, #12
 8005f30:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005f32:	8bfb      	ldrh	r3, [r7, #30]
 8005f34:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005f38:	d803      	bhi.n	8005f42 <mem_trim+0x32>
 8005f3a:	8bfa      	ldrh	r2, [r7, #30]
 8005f3c:	887b      	ldrh	r3, [r7, #2]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d201      	bcs.n	8005f46 <mem_trim+0x36>
    return NULL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	e0cc      	b.n	80060e0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005f46:	4b68      	ldr	r3, [pc, #416]	; (80060e8 <mem_trim+0x1d8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d304      	bcc.n	8005f5a <mem_trim+0x4a>
 8005f50:	4b66      	ldr	r3, [pc, #408]	; (80060ec <mem_trim+0x1dc>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d306      	bcc.n	8005f68 <mem_trim+0x58>
 8005f5a:	4b65      	ldr	r3, [pc, #404]	; (80060f0 <mem_trim+0x1e0>)
 8005f5c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8005f60:	4964      	ldr	r1, [pc, #400]	; (80060f4 <mem_trim+0x1e4>)
 8005f62:	4865      	ldr	r0, [pc, #404]	; (80060f8 <mem_trim+0x1e8>)
 8005f64:	f00c fb00 	bl	8012568 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005f68:	4b5f      	ldr	r3, [pc, #380]	; (80060e8 <mem_trim+0x1d8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d304      	bcc.n	8005f7c <mem_trim+0x6c>
 8005f72:	4b5e      	ldr	r3, [pc, #376]	; (80060ec <mem_trim+0x1dc>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d301      	bcc.n	8005f80 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	e0af      	b.n	80060e0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3b08      	subs	r3, #8
 8005f84:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005f86:	69b8      	ldr	r0, [r7, #24]
 8005f88:	f7ff fe2c 	bl	8005be4 <mem_to_ptr>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	881a      	ldrh	r2, [r3, #0]
 8005f94:	8afb      	ldrh	r3, [r7, #22]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b08      	subs	r3, #8
 8005f9c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005f9e:	8bfa      	ldrh	r2, [r7, #30]
 8005fa0:	8abb      	ldrh	r3, [r7, #20]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d906      	bls.n	8005fb4 <mem_trim+0xa4>
 8005fa6:	4b52      	ldr	r3, [pc, #328]	; (80060f0 <mem_trim+0x1e0>)
 8005fa8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005fac:	4953      	ldr	r1, [pc, #332]	; (80060fc <mem_trim+0x1ec>)
 8005fae:	4852      	ldr	r0, [pc, #328]	; (80060f8 <mem_trim+0x1e8>)
 8005fb0:	f00c fada 	bl	8012568 <iprintf>
  if (newsize > size) {
 8005fb4:	8bfa      	ldrh	r2, [r7, #30]
 8005fb6:	8abb      	ldrh	r3, [r7, #20]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d901      	bls.n	8005fc0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	e08f      	b.n	80060e0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005fc0:	8bfa      	ldrh	r2, [r7, #30]
 8005fc2:	8abb      	ldrh	r3, [r7, #20]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d101      	bne.n	8005fcc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	e089      	b.n	80060e0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff fdf5 	bl	8005bc0 <ptr_to_mem>
 8005fd6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	791b      	ldrb	r3, [r3, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d13f      	bne.n	8006060 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005fe8:	d106      	bne.n	8005ff8 <mem_trim+0xe8>
 8005fea:	4b41      	ldr	r3, [pc, #260]	; (80060f0 <mem_trim+0x1e0>)
 8005fec:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005ff0:	4943      	ldr	r1, [pc, #268]	; (8006100 <mem_trim+0x1f0>)
 8005ff2:	4841      	ldr	r0, [pc, #260]	; (80060f8 <mem_trim+0x1e8>)
 8005ff4:	f00c fab8 	bl	8012568 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005ffe:	8afa      	ldrh	r2, [r7, #22]
 8006000:	8bfb      	ldrh	r3, [r7, #30]
 8006002:	4413      	add	r3, r2
 8006004:	b29b      	uxth	r3, r3
 8006006:	3308      	adds	r3, #8
 8006008:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800600a:	4b3e      	ldr	r3, [pc, #248]	; (8006104 <mem_trim+0x1f4>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	429a      	cmp	r2, r3
 8006012:	d106      	bne.n	8006022 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8006014:	89fb      	ldrh	r3, [r7, #14]
 8006016:	4618      	mov	r0, r3
 8006018:	f7ff fdd2 	bl	8005bc0 <ptr_to_mem>
 800601c:	4602      	mov	r2, r0
 800601e:	4b39      	ldr	r3, [pc, #228]	; (8006104 <mem_trim+0x1f4>)
 8006020:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8006022:	89fb      	ldrh	r3, [r7, #14]
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fdcb 	bl	8005bc0 <ptr_to_mem>
 800602a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	2200      	movs	r2, #0
 8006030:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	89ba      	ldrh	r2, [r7, #12]
 8006036:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	8afa      	ldrh	r2, [r7, #22]
 800603c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	89fa      	ldrh	r2, [r7, #14]
 8006042:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800604c:	d047      	beq.n	80060de <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff fdb4 	bl	8005bc0 <ptr_to_mem>
 8006058:	4602      	mov	r2, r0
 800605a:	89fb      	ldrh	r3, [r7, #14]
 800605c:	8053      	strh	r3, [r2, #2]
 800605e:	e03e      	b.n	80060de <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006060:	8bfb      	ldrh	r3, [r7, #30]
 8006062:	f103 0214 	add.w	r2, r3, #20
 8006066:	8abb      	ldrh	r3, [r7, #20]
 8006068:	429a      	cmp	r2, r3
 800606a:	d838      	bhi.n	80060de <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800606c:	8afa      	ldrh	r2, [r7, #22]
 800606e:	8bfb      	ldrh	r3, [r7, #30]
 8006070:	4413      	add	r3, r2
 8006072:	b29b      	uxth	r3, r3
 8006074:	3308      	adds	r3, #8
 8006076:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006080:	d106      	bne.n	8006090 <mem_trim+0x180>
 8006082:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <mem_trim+0x1e0>)
 8006084:	f240 3216 	movw	r2, #790	; 0x316
 8006088:	491d      	ldr	r1, [pc, #116]	; (8006100 <mem_trim+0x1f0>)
 800608a:	481b      	ldr	r0, [pc, #108]	; (80060f8 <mem_trim+0x1e8>)
 800608c:	f00c fa6c 	bl	8012568 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006090:	89fb      	ldrh	r3, [r7, #14]
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff fd94 	bl	8005bc0 <ptr_to_mem>
 8006098:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800609a:	4b1a      	ldr	r3, [pc, #104]	; (8006104 <mem_trim+0x1f4>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d202      	bcs.n	80060aa <mem_trim+0x19a>
      lfree = mem2;
 80060a4:	4a17      	ldr	r2, [pc, #92]	; (8006104 <mem_trim+0x1f4>)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	2200      	movs	r2, #0
 80060ae:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	881a      	ldrh	r2, [r3, #0]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	8afa      	ldrh	r2, [r7, #22]
 80060bc:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	89fa      	ldrh	r2, [r7, #14]
 80060c2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80060cc:	d007      	beq.n	80060de <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	4618      	mov	r0, r3
 80060d4:	f7ff fd74 	bl	8005bc0 <ptr_to_mem>
 80060d8:	4602      	mov	r2, r0
 80060da:	89fb      	ldrh	r3, [r7, #14]
 80060dc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80060de:	687b      	ldr	r3, [r7, #4]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3720      	adds	r7, #32
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	200004e8 	.word	0x200004e8
 80060ec:	200004ec 	.word	0x200004ec
 80060f0:	080136c4 	.word	0x080136c4
 80060f4:	08013834 	.word	0x08013834
 80060f8:	0801370c 	.word	0x0801370c
 80060fc:	0801384c 	.word	0x0801384c
 8006100:	0801386c 	.word	0x0801386c
 8006104:	200004f0 	.word	0x200004f0

08006108 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b088      	sub	sp, #32
 800610c:	af00      	add	r7, sp, #0
 800610e:	4603      	mov	r3, r0
 8006110:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006112:	88fb      	ldrh	r3, [r7, #6]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <mem_malloc+0x14>
    return NULL;
 8006118:	2300      	movs	r3, #0
 800611a:	e0d9      	b.n	80062d0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800611c:	88fb      	ldrh	r3, [r7, #6]
 800611e:	3303      	adds	r3, #3
 8006120:	b29b      	uxth	r3, r3
 8006122:	f023 0303 	bic.w	r3, r3, #3
 8006126:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006128:	8bbb      	ldrh	r3, [r7, #28]
 800612a:	2b0b      	cmp	r3, #11
 800612c:	d801      	bhi.n	8006132 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800612e:	230c      	movs	r3, #12
 8006130:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006132:	8bbb      	ldrh	r3, [r7, #28]
 8006134:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006138:	d803      	bhi.n	8006142 <mem_malloc+0x3a>
 800613a:	8bba      	ldrh	r2, [r7, #28]
 800613c:	88fb      	ldrh	r3, [r7, #6]
 800613e:	429a      	cmp	r2, r3
 8006140:	d201      	bcs.n	8006146 <mem_malloc+0x3e>
    return NULL;
 8006142:	2300      	movs	r3, #0
 8006144:	e0c4      	b.n	80062d0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006146:	4b64      	ldr	r3, [pc, #400]	; (80062d8 <mem_malloc+0x1d0>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff fd4a 	bl	8005be4 <mem_to_ptr>
 8006150:	4603      	mov	r3, r0
 8006152:	83fb      	strh	r3, [r7, #30]
 8006154:	e0b4      	b.n	80062c0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006156:	8bfb      	ldrh	r3, [r7, #30]
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff fd31 	bl	8005bc0 <ptr_to_mem>
 800615e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	791b      	ldrb	r3, [r3, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	f040 80a4 	bne.w	80062b2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	8bfb      	ldrh	r3, [r7, #30]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	f1a3 0208 	sub.w	r2, r3, #8
 8006178:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800617a:	429a      	cmp	r2, r3
 800617c:	f0c0 8099 	bcc.w	80062b2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	461a      	mov	r2, r3
 8006186:	8bfb      	ldrh	r3, [r7, #30]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	f1a3 0208 	sub.w	r2, r3, #8
 800618e:	8bbb      	ldrh	r3, [r7, #28]
 8006190:	3314      	adds	r3, #20
 8006192:	429a      	cmp	r2, r3
 8006194:	d333      	bcc.n	80061fe <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006196:	8bfa      	ldrh	r2, [r7, #30]
 8006198:	8bbb      	ldrh	r3, [r7, #28]
 800619a:	4413      	add	r3, r2
 800619c:	b29b      	uxth	r3, r3
 800619e:	3308      	adds	r3, #8
 80061a0:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80061a2:	8a7b      	ldrh	r3, [r7, #18]
 80061a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80061a8:	d106      	bne.n	80061b8 <mem_malloc+0xb0>
 80061aa:	4b4c      	ldr	r3, [pc, #304]	; (80062dc <mem_malloc+0x1d4>)
 80061ac:	f240 3287 	movw	r2, #903	; 0x387
 80061b0:	494b      	ldr	r1, [pc, #300]	; (80062e0 <mem_malloc+0x1d8>)
 80061b2:	484c      	ldr	r0, [pc, #304]	; (80062e4 <mem_malloc+0x1dc>)
 80061b4:	f00c f9d8 	bl	8012568 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80061b8:	8a7b      	ldrh	r3, [r7, #18]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff fd00 	bl	8005bc0 <ptr_to_mem>
 80061c0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	881a      	ldrh	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8bfa      	ldrh	r2, [r7, #30]
 80061d4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	8a7a      	ldrh	r2, [r7, #18]
 80061da:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2201      	movs	r2, #1
 80061e0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80061ea:	d00b      	beq.n	8006204 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff fce5 	bl	8005bc0 <ptr_to_mem>
 80061f6:	4602      	mov	r2, r0
 80061f8:	8a7b      	ldrh	r3, [r7, #18]
 80061fa:	8053      	strh	r3, [r2, #2]
 80061fc:	e002      	b.n	8006204 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	2201      	movs	r2, #1
 8006202:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006204:	4b34      	ldr	r3, [pc, #208]	; (80062d8 <mem_malloc+0x1d0>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	429a      	cmp	r2, r3
 800620c:	d127      	bne.n	800625e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800620e:	4b32      	ldr	r3, [pc, #200]	; (80062d8 <mem_malloc+0x1d0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006214:	e005      	b.n	8006222 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f7ff fcd0 	bl	8005bc0 <ptr_to_mem>
 8006220:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	791b      	ldrb	r3, [r3, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d004      	beq.n	8006234 <mem_malloc+0x12c>
 800622a:	4b2f      	ldr	r3, [pc, #188]	; (80062e8 <mem_malloc+0x1e0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	429a      	cmp	r2, r3
 8006232:	d1f0      	bne.n	8006216 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006234:	4a28      	ldr	r2, [pc, #160]	; (80062d8 <mem_malloc+0x1d0>)
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800623a:	4b27      	ldr	r3, [pc, #156]	; (80062d8 <mem_malloc+0x1d0>)
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	4b2a      	ldr	r3, [pc, #168]	; (80062e8 <mem_malloc+0x1e0>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	429a      	cmp	r2, r3
 8006244:	d00b      	beq.n	800625e <mem_malloc+0x156>
 8006246:	4b24      	ldr	r3, [pc, #144]	; (80062d8 <mem_malloc+0x1d0>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	791b      	ldrb	r3, [r3, #4]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d006      	beq.n	800625e <mem_malloc+0x156>
 8006250:	4b22      	ldr	r3, [pc, #136]	; (80062dc <mem_malloc+0x1d4>)
 8006252:	f240 32b5 	movw	r2, #949	; 0x3b5
 8006256:	4925      	ldr	r1, [pc, #148]	; (80062ec <mem_malloc+0x1e4>)
 8006258:	4822      	ldr	r0, [pc, #136]	; (80062e4 <mem_malloc+0x1dc>)
 800625a:	f00c f985 	bl	8012568 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800625e:	8bba      	ldrh	r2, [r7, #28]
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	4413      	add	r3, r2
 8006264:	3308      	adds	r3, #8
 8006266:	4a20      	ldr	r2, [pc, #128]	; (80062e8 <mem_malloc+0x1e0>)
 8006268:	6812      	ldr	r2, [r2, #0]
 800626a:	4293      	cmp	r3, r2
 800626c:	d906      	bls.n	800627c <mem_malloc+0x174>
 800626e:	4b1b      	ldr	r3, [pc, #108]	; (80062dc <mem_malloc+0x1d4>)
 8006270:	f240 32ba 	movw	r2, #954	; 0x3ba
 8006274:	491e      	ldr	r1, [pc, #120]	; (80062f0 <mem_malloc+0x1e8>)
 8006276:	481b      	ldr	r0, [pc, #108]	; (80062e4 <mem_malloc+0x1dc>)
 8006278:	f00c f976 	bl	8012568 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d006      	beq.n	8006294 <mem_malloc+0x18c>
 8006286:	4b15      	ldr	r3, [pc, #84]	; (80062dc <mem_malloc+0x1d4>)
 8006288:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800628c:	4919      	ldr	r1, [pc, #100]	; (80062f4 <mem_malloc+0x1ec>)
 800628e:	4815      	ldr	r0, [pc, #84]	; (80062e4 <mem_malloc+0x1dc>)
 8006290:	f00c f96a 	bl	8012568 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f003 0303 	and.w	r3, r3, #3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d006      	beq.n	80062ac <mem_malloc+0x1a4>
 800629e:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <mem_malloc+0x1d4>)
 80062a0:	f240 32be 	movw	r2, #958	; 0x3be
 80062a4:	4914      	ldr	r1, [pc, #80]	; (80062f8 <mem_malloc+0x1f0>)
 80062a6:	480f      	ldr	r0, [pc, #60]	; (80062e4 <mem_malloc+0x1dc>)
 80062a8:	f00c f95e 	bl	8012568 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	3308      	adds	r3, #8
 80062b0:	e00e      	b.n	80062d0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80062b2:	8bfb      	ldrh	r3, [r7, #30]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff fc83 	bl	8005bc0 <ptr_to_mem>
 80062ba:	4603      	mov	r3, r0
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80062c0:	8bfa      	ldrh	r2, [r7, #30]
 80062c2:	8bbb      	ldrh	r3, [r7, #28]
 80062c4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80062c8:	429a      	cmp	r2, r3
 80062ca:	f4ff af44 	bcc.w	8006156 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3720      	adds	r7, #32
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	200004f0 	.word	0x200004f0
 80062dc:	080136c4 	.word	0x080136c4
 80062e0:	0801386c 	.word	0x0801386c
 80062e4:	0801370c 	.word	0x0801370c
 80062e8:	200004ec 	.word	0x200004ec
 80062ec:	08013880 	.word	0x08013880
 80062f0:	0801389c 	.word	0x0801389c
 80062f4:	080138cc 	.word	0x080138cc
 80062f8:	080138fc 	.word	0x080138fc

080062fc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	2200      	movs	r2, #0
 800630a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	3303      	adds	r3, #3
 8006312:	f023 0303 	bic.w	r3, r3, #3
 8006316:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	e011      	b.n	8006342 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	4413      	add	r3, r2
 800633a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	3301      	adds	r3, #1
 8006340:	60fb      	str	r3, [r7, #12]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	885b      	ldrh	r3, [r3, #2]
 8006346:	461a      	mov	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4293      	cmp	r3, r2
 800634c:	dbe7      	blt.n	800631e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800634e:	bf00      	nop
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
	...

0800635c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006362:	2300      	movs	r3, #0
 8006364:	80fb      	strh	r3, [r7, #6]
 8006366:	e009      	b.n	800637c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006368:	88fb      	ldrh	r3, [r7, #6]
 800636a:	4a08      	ldr	r2, [pc, #32]	; (800638c <memp_init+0x30>)
 800636c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006370:	4618      	mov	r0, r3
 8006372:	f7ff ffc3 	bl	80062fc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006376:	88fb      	ldrh	r3, [r7, #6]
 8006378:	3301      	adds	r3, #1
 800637a:	80fb      	strh	r3, [r7, #6]
 800637c:	88fb      	ldrh	r3, [r7, #6]
 800637e:	2b08      	cmp	r3, #8
 8006380:	d9f2      	bls.n	8006368 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006382:	bf00      	nop
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	08016a28 	.word	0x08016a28

08006390 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d012      	beq.n	80063cc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	6812      	ldr	r2, [r2, #0]
 80063ae:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f003 0303 	and.w	r3, r3, #3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d006      	beq.n	80063c8 <do_memp_malloc_pool+0x38>
 80063ba:	4b07      	ldr	r3, [pc, #28]	; (80063d8 <do_memp_malloc_pool+0x48>)
 80063bc:	f240 1219 	movw	r2, #281	; 0x119
 80063c0:	4906      	ldr	r1, [pc, #24]	; (80063dc <do_memp_malloc_pool+0x4c>)
 80063c2:	4807      	ldr	r0, [pc, #28]	; (80063e0 <do_memp_malloc_pool+0x50>)
 80063c4:	f00c f8d0 	bl	8012568 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	e000      	b.n	80063ce <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	08013920 	.word	0x08013920
 80063dc:	08013950 	.word	0x08013950
 80063e0:	08013974 	.word	0x08013974

080063e4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80063ee:	79fb      	ldrb	r3, [r7, #7]
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d908      	bls.n	8006406 <memp_malloc+0x22>
 80063f4:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <memp_malloc+0x3c>)
 80063f6:	f240 1257 	movw	r2, #343	; 0x157
 80063fa:	490a      	ldr	r1, [pc, #40]	; (8006424 <memp_malloc+0x40>)
 80063fc:	480a      	ldr	r0, [pc, #40]	; (8006428 <memp_malloc+0x44>)
 80063fe:	f00c f8b3 	bl	8012568 <iprintf>
 8006402:	2300      	movs	r3, #0
 8006404:	e008      	b.n	8006418 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006406:	79fb      	ldrb	r3, [r7, #7]
 8006408:	4a08      	ldr	r2, [pc, #32]	; (800642c <memp_malloc+0x48>)
 800640a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff ffbe 	bl	8006390 <do_memp_malloc_pool>
 8006414:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006416:	68fb      	ldr	r3, [r7, #12]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	08013920 	.word	0x08013920
 8006424:	080139b0 	.word	0x080139b0
 8006428:	08013974 	.word	0x08013974
 800642c:	08016a28 	.word	0x08016a28

08006430 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	f003 0303 	and.w	r3, r3, #3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d006      	beq.n	8006452 <do_memp_free_pool+0x22>
 8006444:	4b0a      	ldr	r3, [pc, #40]	; (8006470 <do_memp_free_pool+0x40>)
 8006446:	f240 126d 	movw	r2, #365	; 0x16d
 800644a:	490a      	ldr	r1, [pc, #40]	; (8006474 <do_memp_free_pool+0x44>)
 800644c:	480a      	ldr	r0, [pc, #40]	; (8006478 <do_memp_free_pool+0x48>)
 800644e:	f00c f88b 	bl	8012568 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006468:	bf00      	nop
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	08013920 	.word	0x08013920
 8006474:	080139d0 	.word	0x080139d0
 8006478:	08013974 	.word	0x08013974

0800647c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	4603      	mov	r3, r0
 8006484:	6039      	str	r1, [r7, #0]
 8006486:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006488:	79fb      	ldrb	r3, [r7, #7]
 800648a:	2b08      	cmp	r3, #8
 800648c:	d907      	bls.n	800649e <memp_free+0x22>
 800648e:	4b0c      	ldr	r3, [pc, #48]	; (80064c0 <memp_free+0x44>)
 8006490:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8006494:	490b      	ldr	r1, [pc, #44]	; (80064c4 <memp_free+0x48>)
 8006496:	480c      	ldr	r0, [pc, #48]	; (80064c8 <memp_free+0x4c>)
 8006498:	f00c f866 	bl	8012568 <iprintf>
 800649c:	e00c      	b.n	80064b8 <memp_free+0x3c>

  if (mem == NULL) {
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d008      	beq.n	80064b6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	4a09      	ldr	r2, [pc, #36]	; (80064cc <memp_free+0x50>)
 80064a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7ff ffbe 	bl	8006430 <do_memp_free_pool>
 80064b4:	e000      	b.n	80064b8 <memp_free+0x3c>
    return;
 80064b6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	08013920 	.word	0x08013920
 80064c4:	080139f0 	.word	0x080139f0
 80064c8:	08013974 	.word	0x08013974
 80064cc:	08016a28 	.word	0x08016a28

080064d0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80064d4:	bf00      	nop
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
	...

080064e0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b086      	sub	sp, #24
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d108      	bne.n	8006506 <netif_add+0x26>
 80064f4:	4b59      	ldr	r3, [pc, #356]	; (800665c <netif_add+0x17c>)
 80064f6:	f240 1227 	movw	r2, #295	; 0x127
 80064fa:	4959      	ldr	r1, [pc, #356]	; (8006660 <netif_add+0x180>)
 80064fc:	4859      	ldr	r0, [pc, #356]	; (8006664 <netif_add+0x184>)
 80064fe:	f00c f833 	bl	8012568 <iprintf>
 8006502:	2300      	movs	r3, #0
 8006504:	e0a6      	b.n	8006654 <netif_add+0x174>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	2b00      	cmp	r3, #0
 800650a:	d108      	bne.n	800651e <netif_add+0x3e>
 800650c:	4b53      	ldr	r3, [pc, #332]	; (800665c <netif_add+0x17c>)
 800650e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006512:	4955      	ldr	r1, [pc, #340]	; (8006668 <netif_add+0x188>)
 8006514:	4853      	ldr	r0, [pc, #332]	; (8006664 <netif_add+0x184>)
 8006516:	f00c f827 	bl	8012568 <iprintf>
 800651a:	2300      	movs	r3, #0
 800651c:	e09a      	b.n	8006654 <netif_add+0x174>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006524:	4b51      	ldr	r3, [pc, #324]	; (800666c <netif_add+0x18c>)
 8006526:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800652e:	4b4f      	ldr	r3, [pc, #316]	; (800666c <netif_add+0x18c>)
 8006530:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006538:	4b4c      	ldr	r3, [pc, #304]	; (800666c <netif_add+0x18c>)
 800653a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a47      	ldr	r2, [pc, #284]	; (8006670 <netif_add+0x190>)
 8006552:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	3320      	adds	r3, #32
 8006566:	2204      	movs	r2, #4
 8006568:	2100      	movs	r1, #0
 800656a:	4618      	mov	r0, r3
 800656c:	f00b fff4 	bl	8012558 <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6a3a      	ldr	r2, [r7, #32]
 8006574:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 8006576:	4b3f      	ldr	r3, [pc, #252]	; (8006674 <netif_add+0x194>)
 8006578:	781a      	ldrb	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006584:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	68b9      	ldr	r1, [r7, #8]
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 f913 	bl	80067b8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	4798      	blx	r3
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <netif_add+0xc2>
    return NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	e058      	b.n	8006654 <netif_add+0x174>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065a8:	2bff      	cmp	r3, #255	; 0xff
 80065aa:	d103      	bne.n	80065b4 <netif_add+0xd4>
        netif->num = 0;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80065b4:	2300      	movs	r3, #0
 80065b6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80065b8:	4b2f      	ldr	r3, [pc, #188]	; (8006678 <netif_add+0x198>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	617b      	str	r3, [r7, #20]
 80065be:	e02b      	b.n	8006618 <netif_add+0x138>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d106      	bne.n	80065d6 <netif_add+0xf6>
 80065c8:	4b24      	ldr	r3, [pc, #144]	; (800665c <netif_add+0x17c>)
 80065ca:	f240 128b 	movw	r2, #395	; 0x18b
 80065ce:	492b      	ldr	r1, [pc, #172]	; (800667c <netif_add+0x19c>)
 80065d0:	4824      	ldr	r0, [pc, #144]	; (8006664 <netif_add+0x184>)
 80065d2:	f00b ffc9 	bl	8012568 <iprintf>
        num_netifs++;
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	3301      	adds	r3, #1
 80065da:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	2bff      	cmp	r3, #255	; 0xff
 80065e0:	dd06      	ble.n	80065f0 <netif_add+0x110>
 80065e2:	4b1e      	ldr	r3, [pc, #120]	; (800665c <netif_add+0x17c>)
 80065e4:	f240 128d 	movw	r2, #397	; 0x18d
 80065e8:	4925      	ldr	r1, [pc, #148]	; (8006680 <netif_add+0x1a0>)
 80065ea:	481e      	ldr	r0, [pc, #120]	; (8006664 <netif_add+0x184>)
 80065ec:	f00b ffbc 	bl	8012568 <iprintf>
        if (netif2->num == netif->num) {
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d108      	bne.n	8006612 <netif_add+0x132>
          netif->num++;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006606:	3301      	adds	r3, #1
 8006608:	b2da      	uxtb	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006610:	e005      	b.n	800661e <netif_add+0x13e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1d0      	bne.n	80065c0 <netif_add+0xe0>
        }
      }
    } while (netif2 != NULL);
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1be      	bne.n	80065a2 <netif_add+0xc2>
  }
  if (netif->num == 254) {
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800662a:	2bfe      	cmp	r3, #254	; 0xfe
 800662c:	d103      	bne.n	8006636 <netif_add+0x156>
    netif_num = 0;
 800662e:	4b11      	ldr	r3, [pc, #68]	; (8006674 <netif_add+0x194>)
 8006630:	2200      	movs	r2, #0
 8006632:	701a      	strb	r2, [r3, #0]
 8006634:	e006      	b.n	8006644 <netif_add+0x164>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800663c:	3301      	adds	r3, #1
 800663e:	b2da      	uxtb	r2, r3
 8006640:	4b0c      	ldr	r3, [pc, #48]	; (8006674 <netif_add+0x194>)
 8006642:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8006644:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <netif_add+0x198>)
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800664c:	4a0a      	ldr	r2, [pc, #40]	; (8006678 <netif_add+0x198>)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8006652:	68fb      	ldr	r3, [r7, #12]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3718      	adds	r7, #24
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	08013a0c 	.word	0x08013a0c
 8006660:	08013aa0 	.word	0x08013aa0
 8006664:	08013a5c 	.word	0x08013a5c
 8006668:	08013abc 	.word	0x08013abc
 800666c:	08016a9c 	.word	0x08016a9c
 8006670:	080069a9 	.word	0x080069a9
 8006674:	20000518 	.word	0x20000518
 8006678:	20007178 	.word	0x20007178
 800667c:	08013ae0 	.word	0x08013ae0
 8006680:	08013af4 	.word	0x08013af4

08006684 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f002 fd73 	bl	800917c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8006696:	6839      	ldr	r1, [r7, #0]
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f007 fdbd 	bl	800e218 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800669e:	bf00      	nop
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d106      	bne.n	80066c8 <netif_do_set_ipaddr+0x20>
 80066ba:	4b1d      	ldr	r3, [pc, #116]	; (8006730 <netif_do_set_ipaddr+0x88>)
 80066bc:	f240 12cb 	movw	r2, #459	; 0x1cb
 80066c0:	491c      	ldr	r1, [pc, #112]	; (8006734 <netif_do_set_ipaddr+0x8c>)
 80066c2:	481d      	ldr	r0, [pc, #116]	; (8006738 <netif_do_set_ipaddr+0x90>)
 80066c4:	f00b ff50 	bl	8012568 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d106      	bne.n	80066dc <netif_do_set_ipaddr+0x34>
 80066ce:	4b18      	ldr	r3, [pc, #96]	; (8006730 <netif_do_set_ipaddr+0x88>)
 80066d0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80066d4:	4917      	ldr	r1, [pc, #92]	; (8006734 <netif_do_set_ipaddr+0x8c>)
 80066d6:	4818      	ldr	r0, [pc, #96]	; (8006738 <netif_do_set_ipaddr+0x90>)
 80066d8:	f00b ff46 	bl	8012568 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3304      	adds	r3, #4
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d01c      	beq.n	8006724 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3304      	adds	r3, #4
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80066fa:	f107 0314 	add.w	r3, r7, #20
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f7ff ffbf 	bl	8006684 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d002      	beq.n	8006712 <netif_do_set_ipaddr+0x6a>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	e000      	b.n	8006714 <netif_do_set_ipaddr+0x6c>
 8006712:	2300      	movs	r3, #0
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006718:	2101      	movs	r1, #1
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 f8d2 	bl	80068c4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006720:	2301      	movs	r3, #1
 8006722:	e000      	b.n	8006726 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3718      	adds	r7, #24
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	08013a0c 	.word	0x08013a0c
 8006734:	08013b24 	.word	0x08013b24
 8006738:	08013a5c 	.word	0x08013a5c

0800673c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800673c:	b480      	push	{r7}
 800673e:	b085      	sub	sp, #20
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3308      	adds	r3, #8
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	429a      	cmp	r2, r3
 8006754:	d00a      	beq.n	800676c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <netif_do_set_netmask+0x26>
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	e000      	b.n	8006764 <netif_do_set_netmask+0x28>
 8006762:	2300      	movs	r3, #0
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006768:	2301      	movs	r3, #1
 800676a:	e000      	b.n	800676e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800677a:	b480      	push	{r7}
 800677c:	b085      	sub	sp, #20
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	330c      	adds	r3, #12
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d00a      	beq.n	80067aa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d002      	beq.n	80067a0 <netif_do_set_gw+0x26>
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	e000      	b.n	80067a2 <netif_do_set_gw+0x28>
 80067a0:	2300      	movs	r3, #0
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80067a6:	2301      	movs	r3, #1
 80067a8:	e000      	b.n	80067ac <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80067ca:	2300      	movs	r3, #0
 80067cc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80067d4:	4b1c      	ldr	r3, [pc, #112]	; (8006848 <netif_set_addr+0x90>)
 80067d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80067de:	4b1a      	ldr	r3, [pc, #104]	; (8006848 <netif_set_addr+0x90>)
 80067e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80067e8:	4b17      	ldr	r3, [pc, #92]	; (8006848 <netif_set_addr+0x90>)
 80067ea:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <netif_set_addr+0x42>
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <netif_set_addr+0x46>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e000      	b.n	8006800 <netif_set_addr+0x48>
 80067fe:	2300      	movs	r3, #0
 8006800:	617b      	str	r3, [r7, #20]
  if (remove) {
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d006      	beq.n	8006816 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006808:	f107 0310 	add.w	r3, r7, #16
 800680c:	461a      	mov	r2, r3
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f7ff ff49 	bl	80066a8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8006816:	69fa      	ldr	r2, [r7, #28]
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f7ff ff8e 	bl	800673c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006820:	69ba      	ldr	r2, [r7, #24]
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f7ff ffa8 	bl	800677a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d106      	bne.n	800683e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006830:	f107 0310 	add.w	r3, r7, #16
 8006834:	461a      	mov	r2, r3
 8006836:	68b9      	ldr	r1, [r7, #8]
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f7ff ff35 	bl	80066a8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800683e:	bf00      	nop
 8006840:	3720      	adds	r7, #32
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	08016a9c 	.word	0x08016a9c

0800684c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006854:	4a04      	ldr	r2, [pc, #16]	; (8006868 <netif_set_default+0x1c>)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	2000717c 	.word	0x2000717c

0800686c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d107      	bne.n	800688a <netif_set_up+0x1e>
 800687a:	4b0f      	ldr	r3, [pc, #60]	; (80068b8 <netif_set_up+0x4c>)
 800687c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006880:	490e      	ldr	r1, [pc, #56]	; (80068bc <netif_set_up+0x50>)
 8006882:	480f      	ldr	r0, [pc, #60]	; (80068c0 <netif_set_up+0x54>)
 8006884:	f00b fe70 	bl	8012568 <iprintf>
 8006888:	e013      	b.n	80068b2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10c      	bne.n	80068b2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800689e:	f043 0301 	orr.w	r3, r3, #1
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80068aa:	2103      	movs	r1, #3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f809 	bl	80068c4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80068b2:	3708      	adds	r7, #8
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	08013a0c 	.word	0x08013a0c
 80068bc:	08013b94 	.word	0x08013b94
 80068c0:	08013a5c 	.word	0x08013a5c

080068c4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d106      	bne.n	80068e4 <netif_issue_reports+0x20>
 80068d6:	4b18      	ldr	r3, [pc, #96]	; (8006938 <netif_issue_reports+0x74>)
 80068d8:	f240 326d 	movw	r2, #877	; 0x36d
 80068dc:	4917      	ldr	r1, [pc, #92]	; (800693c <netif_issue_reports+0x78>)
 80068de:	4818      	ldr	r0, [pc, #96]	; (8006940 <netif_issue_reports+0x7c>)
 80068e0:	f00b fe42 	bl	8012568 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d01e      	beq.n	8006930 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80068f8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d017      	beq.n	8006930 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006900:	78fb      	ldrb	r3, [r7, #3]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d013      	beq.n	8006932 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	3304      	adds	r3, #4
 800690e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00e      	beq.n	8006932 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800691a:	f003 0308 	and.w	r3, r3, #8
 800691e:	2b00      	cmp	r3, #0
 8006920:	d007      	beq.n	8006932 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3304      	adds	r3, #4
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f00a fa39 	bl	8010da0 <etharp_request>
 800692e:	e000      	b.n	8006932 <netif_issue_reports+0x6e>
    return;
 8006930:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	08013a0c 	.word	0x08013a0c
 800693c:	08013bb0 	.word	0x08013bb0
 8006940:	08013a5c 	.word	0x08013a5c

08006944 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d107      	bne.n	8006962 <netif_set_down+0x1e>
 8006952:	4b12      	ldr	r3, [pc, #72]	; (800699c <netif_set_down+0x58>)
 8006954:	f240 329b 	movw	r2, #923	; 0x39b
 8006958:	4911      	ldr	r1, [pc, #68]	; (80069a0 <netif_set_down+0x5c>)
 800695a:	4812      	ldr	r0, [pc, #72]	; (80069a4 <netif_set_down+0x60>)
 800695c:	f00b fe04 	bl	8012568 <iprintf>
 8006960:	e019      	b.n	8006996 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d012      	beq.n	8006996 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006976:	f023 0301 	bic.w	r3, r3, #1
 800697a:	b2da      	uxtb	r2, r3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006988:	f003 0308 	and.w	r3, r3, #8
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f009 fdbf 	bl	8010514 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	08013a0c 	.word	0x08013a0c
 80069a0:	08013bd4 	.word	0x08013bd4
 80069a4:	08013a5c 	.word	0x08013a5c

080069a8 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80069b4:	f06f 030b 	mvn.w	r3, #11
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	4603      	mov	r3, r0
 80069cc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80069ce:	79fb      	ldrb	r3, [r7, #7]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d013      	beq.n	80069fc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80069d4:	4b0d      	ldr	r3, [pc, #52]	; (8006a0c <netif_get_by_index+0x48>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	e00c      	b.n	80069f6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069e2:	3301      	adds	r3, #1
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	79fa      	ldrb	r2, [r7, #7]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d101      	bne.n	80069f0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	e006      	b.n	80069fe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1ef      	bne.n	80069dc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	20007178 	.word	0x20007178

08006a10 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006a16:	4b0c      	ldr	r3, [pc, #48]	; (8006a48 <pbuf_free_ooseq+0x38>)
 8006a18:	2200      	movs	r2, #0
 8006a1a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006a1c:	4b0b      	ldr	r3, [pc, #44]	; (8006a4c <pbuf_free_ooseq+0x3c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	607b      	str	r3, [r7, #4]
 8006a22:	e00a      	b.n	8006a3a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f002 fbe3 	bl	80091f8 <tcp_free_ooseq>
      return;
 8006a32:	e005      	b.n	8006a40 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	607b      	str	r3, [r7, #4]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1f1      	bne.n	8006a24 <pbuf_free_ooseq+0x14>
    }
  }
}
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	20007180 	.word	0x20007180
 8006a4c:	20007188 	.word	0x20007188

08006a50 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006a54:	4b03      	ldr	r3, [pc, #12]	; (8006a64 <pbuf_pool_is_empty+0x14>)
 8006a56:	2201      	movs	r2, #1
 8006a58:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8006a5a:	bf00      	nop
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	20007180 	.word	0x20007180

08006a68 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	4611      	mov	r1, r2
 8006a74:	461a      	mov	r2, r3
 8006a76:	460b      	mov	r3, r1
 8006a78:	80fb      	strh	r3, [r7, #6]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	88fa      	ldrh	r2, [r7, #6]
 8006a8e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	88ba      	ldrh	r2, [r7, #4]
 8006a94:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8006a96:	8b3b      	ldrh	r3, [r7, #24]
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	7f3a      	ldrb	r2, [r7, #28]
 8006aa2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	73da      	strb	r2, [r3, #15]
}
 8006ab0:	bf00      	nop
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08c      	sub	sp, #48	; 0x30
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	71fb      	strb	r3, [r7, #7]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	80bb      	strh	r3, [r7, #4]
 8006aca:	4613      	mov	r3, r2
 8006acc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006ace:	79fb      	ldrb	r3, [r7, #7]
 8006ad0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8006ad2:	887b      	ldrh	r3, [r7, #2]
 8006ad4:	2b41      	cmp	r3, #65	; 0x41
 8006ad6:	d00b      	beq.n	8006af0 <pbuf_alloc+0x34>
 8006ad8:	2b41      	cmp	r3, #65	; 0x41
 8006ada:	dc02      	bgt.n	8006ae2 <pbuf_alloc+0x26>
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d007      	beq.n	8006af0 <pbuf_alloc+0x34>
 8006ae0:	e0c2      	b.n	8006c68 <pbuf_alloc+0x1ac>
 8006ae2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006ae6:	d00b      	beq.n	8006b00 <pbuf_alloc+0x44>
 8006ae8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006aec:	d070      	beq.n	8006bd0 <pbuf_alloc+0x114>
 8006aee:	e0bb      	b.n	8006c68 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006af0:	887a      	ldrh	r2, [r7, #2]
 8006af2:	88bb      	ldrh	r3, [r7, #4]
 8006af4:	4619      	mov	r1, r3
 8006af6:	2000      	movs	r0, #0
 8006af8:	f000 f8d2 	bl	8006ca0 <pbuf_alloc_reference>
 8006afc:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8006afe:	e0bd      	b.n	8006c7c <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006b04:	2300      	movs	r3, #0
 8006b06:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006b08:	88bb      	ldrh	r3, [r7, #4]
 8006b0a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006b0c:	2008      	movs	r0, #8
 8006b0e:	f7ff fc69 	bl	80063e4 <memp_malloc>
 8006b12:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d109      	bne.n	8006b2e <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8006b1a:	f7ff ff99 	bl	8006a50 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <pbuf_alloc+0x6e>
            pbuf_free(p);
 8006b24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b26:	f000 faa9 	bl	800707c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	e0a7      	b.n	8006c7e <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8006b2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b30:	3303      	adds	r3, #3
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	f023 0303 	bic.w	r3, r3, #3
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	8b7a      	ldrh	r2, [r7, #26]
 8006b42:	4293      	cmp	r3, r2
 8006b44:	bf28      	it	cs
 8006b46:	4613      	movcs	r3, r2
 8006b48:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006b4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b4c:	3310      	adds	r3, #16
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4413      	add	r3, r2
 8006b52:	3303      	adds	r3, #3
 8006b54:	f023 0303 	bic.w	r3, r3, #3
 8006b58:	4618      	mov	r0, r3
 8006b5a:	89f9      	ldrh	r1, [r7, #14]
 8006b5c:	8b7a      	ldrh	r2, [r7, #26]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	9301      	str	r3, [sp, #4]
 8006b62:	887b      	ldrh	r3, [r7, #2]
 8006b64:	9300      	str	r3, [sp, #0]
 8006b66:	460b      	mov	r3, r1
 8006b68:	4601      	mov	r1, r0
 8006b6a:	6938      	ldr	r0, [r7, #16]
 8006b6c:	f7ff ff7c 	bl	8006a68 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f003 0303 	and.w	r3, r3, #3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d006      	beq.n	8006b8a <pbuf_alloc+0xce>
 8006b7c:	4b42      	ldr	r3, [pc, #264]	; (8006c88 <pbuf_alloc+0x1cc>)
 8006b7e:	f240 1201 	movw	r2, #257	; 0x101
 8006b82:	4942      	ldr	r1, [pc, #264]	; (8006c8c <pbuf_alloc+0x1d0>)
 8006b84:	4842      	ldr	r0, [pc, #264]	; (8006c90 <pbuf_alloc+0x1d4>)
 8006b86:	f00b fcef 	bl	8012568 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006b8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b8c:	3303      	adds	r3, #3
 8006b8e:	f023 0303 	bic.w	r3, r3, #3
 8006b92:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006b96:	d106      	bne.n	8006ba6 <pbuf_alloc+0xea>
 8006b98:	4b3b      	ldr	r3, [pc, #236]	; (8006c88 <pbuf_alloc+0x1cc>)
 8006b9a:	f240 1203 	movw	r2, #259	; 0x103
 8006b9e:	493d      	ldr	r1, [pc, #244]	; (8006c94 <pbuf_alloc+0x1d8>)
 8006ba0:	483b      	ldr	r0, [pc, #236]	; (8006c90 <pbuf_alloc+0x1d4>)
 8006ba2:	f00b fce1 	bl	8012568 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d102      	bne.n	8006bb2 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb0:	e002      	b.n	8006bb8 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8006bbc:	8b7a      	ldrh	r2, [r7, #26]
 8006bbe:	89fb      	ldrh	r3, [r7, #14]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8006bc8:	8b7b      	ldrh	r3, [r7, #26]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d19e      	bne.n	8006b0c <pbuf_alloc+0x50>
      break;
 8006bce:	e055      	b.n	8006c7c <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006bd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006bd2:	3303      	adds	r3, #3
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f023 0303 	bic.w	r3, r3, #3
 8006bda:	b29a      	uxth	r2, r3
 8006bdc:	88bb      	ldrh	r3, [r7, #4]
 8006bde:	3303      	adds	r3, #3
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	f023 0303 	bic.w	r3, r3, #3
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	4413      	add	r3, r2
 8006bea:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8006bec:	8b3b      	ldrh	r3, [r7, #24]
 8006bee:	3310      	adds	r3, #16
 8006bf0:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006bf2:	8b3a      	ldrh	r2, [r7, #24]
 8006bf4:	88bb      	ldrh	r3, [r7, #4]
 8006bf6:	3303      	adds	r3, #3
 8006bf8:	f023 0303 	bic.w	r3, r3, #3
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d306      	bcc.n	8006c0e <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006c00:	8afa      	ldrh	r2, [r7, #22]
 8006c02:	88bb      	ldrh	r3, [r7, #4]
 8006c04:	3303      	adds	r3, #3
 8006c06:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d201      	bcs.n	8006c12 <pbuf_alloc+0x156>
        return NULL;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	e035      	b.n	8006c7e <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006c12:	8afb      	ldrh	r3, [r7, #22]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7ff fa77 	bl	8006108 <mem_malloc>
 8006c1a:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <pbuf_alloc+0x16a>
        return NULL;
 8006c22:	2300      	movs	r3, #0
 8006c24:	e02b      	b.n	8006c7e <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006c26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c28:	3310      	adds	r3, #16
 8006c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2c:	4413      	add	r3, r2
 8006c2e:	3303      	adds	r3, #3
 8006c30:	f023 0303 	bic.w	r3, r3, #3
 8006c34:	4618      	mov	r0, r3
 8006c36:	88b9      	ldrh	r1, [r7, #4]
 8006c38:	88ba      	ldrh	r2, [r7, #4]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	9301      	str	r3, [sp, #4]
 8006c3e:	887b      	ldrh	r3, [r7, #2]
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	460b      	mov	r3, r1
 8006c44:	4601      	mov	r1, r0
 8006c46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c48:	f7ff ff0e 	bl	8006a68 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	f003 0303 	and.w	r3, r3, #3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d010      	beq.n	8006c7a <pbuf_alloc+0x1be>
 8006c58:	4b0b      	ldr	r3, [pc, #44]	; (8006c88 <pbuf_alloc+0x1cc>)
 8006c5a:	f240 1223 	movw	r2, #291	; 0x123
 8006c5e:	490e      	ldr	r1, [pc, #56]	; (8006c98 <pbuf_alloc+0x1dc>)
 8006c60:	480b      	ldr	r0, [pc, #44]	; (8006c90 <pbuf_alloc+0x1d4>)
 8006c62:	f00b fc81 	bl	8012568 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006c66:	e008      	b.n	8006c7a <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006c68:	4b07      	ldr	r3, [pc, #28]	; (8006c88 <pbuf_alloc+0x1cc>)
 8006c6a:	f240 1227 	movw	r2, #295	; 0x127
 8006c6e:	490b      	ldr	r1, [pc, #44]	; (8006c9c <pbuf_alloc+0x1e0>)
 8006c70:	4807      	ldr	r0, [pc, #28]	; (8006c90 <pbuf_alloc+0x1d4>)
 8006c72:	f00b fc79 	bl	8012568 <iprintf>
      return NULL;
 8006c76:	2300      	movs	r3, #0
 8006c78:	e001      	b.n	8006c7e <pbuf_alloc+0x1c2>
      break;
 8006c7a:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3728      	adds	r7, #40	; 0x28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	08013c3c 	.word	0x08013c3c
 8006c8c:	08013c6c 	.word	0x08013c6c
 8006c90:	08013c9c 	.word	0x08013c9c
 8006c94:	08013cc4 	.word	0x08013cc4
 8006c98:	08013cf8 	.word	0x08013cf8
 8006c9c:	08013d24 	.word	0x08013d24

08006ca0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	807b      	strh	r3, [r7, #2]
 8006cac:	4613      	mov	r3, r2
 8006cae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006cb0:	883b      	ldrh	r3, [r7, #0]
 8006cb2:	2b41      	cmp	r3, #65	; 0x41
 8006cb4:	d009      	beq.n	8006cca <pbuf_alloc_reference+0x2a>
 8006cb6:	883b      	ldrh	r3, [r7, #0]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d006      	beq.n	8006cca <pbuf_alloc_reference+0x2a>
 8006cbc:	4b0f      	ldr	r3, [pc, #60]	; (8006cfc <pbuf_alloc_reference+0x5c>)
 8006cbe:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006cc2:	490f      	ldr	r1, [pc, #60]	; (8006d00 <pbuf_alloc_reference+0x60>)
 8006cc4:	480f      	ldr	r0, [pc, #60]	; (8006d04 <pbuf_alloc_reference+0x64>)
 8006cc6:	f00b fc4f 	bl	8012568 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006cca:	2007      	movs	r0, #7
 8006ccc:	f7ff fb8a 	bl	80063e4 <memp_malloc>
 8006cd0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	e00b      	b.n	8006cf4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8006cdc:	8879      	ldrh	r1, [r7, #2]
 8006cde:	887a      	ldrh	r2, [r7, #2]
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9301      	str	r3, [sp, #4]
 8006ce4:	883b      	ldrh	r3, [r7, #0]
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	6879      	ldr	r1, [r7, #4]
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f7ff febb 	bl	8006a68 <pbuf_init_alloced_pbuf>
  return p;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3710      	adds	r7, #16
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	08013c3c 	.word	0x08013c3c
 8006d00:	08013d40 	.word	0x08013d40
 8006d04:	08013c9c 	.word	0x08013c9c

08006d08 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af02      	add	r7, sp, #8
 8006d0e:	607b      	str	r3, [r7, #4]
 8006d10:	4603      	mov	r3, r0
 8006d12:	73fb      	strb	r3, [r7, #15]
 8006d14:	460b      	mov	r3, r1
 8006d16:	81bb      	strh	r3, [r7, #12]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006d20:	8a7b      	ldrh	r3, [r7, #18]
 8006d22:	3303      	adds	r3, #3
 8006d24:	f023 0203 	bic.w	r2, r3, #3
 8006d28:	89bb      	ldrh	r3, [r7, #12]
 8006d2a:	441a      	add	r2, r3
 8006d2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d901      	bls.n	8006d36 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	e018      	b.n	8006d68 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d007      	beq.n	8006d4c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006d3c:	8a7b      	ldrh	r3, [r7, #18]
 8006d3e:	3303      	adds	r3, #3
 8006d40:	f023 0303 	bic.w	r3, r3, #3
 8006d44:	6a3a      	ldr	r2, [r7, #32]
 8006d46:	4413      	add	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	e001      	b.n	8006d50 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	89b9      	ldrh	r1, [r7, #12]
 8006d54:	89ba      	ldrh	r2, [r7, #12]
 8006d56:	2302      	movs	r3, #2
 8006d58:	9301      	str	r3, [sp, #4]
 8006d5a:	897b      	ldrh	r3, [r7, #10]
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	460b      	mov	r3, r1
 8006d60:	6979      	ldr	r1, [r7, #20]
 8006d62:	f7ff fe81 	bl	8006a68 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006d66:	687b      	ldr	r3, [r7, #4]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3718      	adds	r7, #24
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d106      	bne.n	8006d90 <pbuf_realloc+0x20>
 8006d82:	4b3a      	ldr	r3, [pc, #232]	; (8006e6c <pbuf_realloc+0xfc>)
 8006d84:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006d88:	4939      	ldr	r1, [pc, #228]	; (8006e70 <pbuf_realloc+0x100>)
 8006d8a:	483a      	ldr	r0, [pc, #232]	; (8006e74 <pbuf_realloc+0x104>)
 8006d8c:	f00b fbec 	bl	8012568 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	891b      	ldrh	r3, [r3, #8]
 8006d94:	887a      	ldrh	r2, [r7, #2]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d264      	bcs.n	8006e64 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	891a      	ldrh	r2, [r3, #8]
 8006d9e:	887b      	ldrh	r3, [r7, #2]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006da4:	887b      	ldrh	r3, [r7, #2]
 8006da6:	817b      	strh	r3, [r7, #10]
  q = p;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006dac:	e018      	b.n	8006de0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	895b      	ldrh	r3, [r3, #10]
 8006db2:	897a      	ldrh	r2, [r7, #10]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	891a      	ldrh	r2, [r3, #8]
 8006dbc:	893b      	ldrh	r3, [r7, #8]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d106      	bne.n	8006de0 <pbuf_realloc+0x70>
 8006dd2:	4b26      	ldr	r3, [pc, #152]	; (8006e6c <pbuf_realloc+0xfc>)
 8006dd4:	f240 12af 	movw	r2, #431	; 0x1af
 8006dd8:	4927      	ldr	r1, [pc, #156]	; (8006e78 <pbuf_realloc+0x108>)
 8006dda:	4826      	ldr	r0, [pc, #152]	; (8006e74 <pbuf_realloc+0x104>)
 8006ddc:	f00b fbc4 	bl	8012568 <iprintf>
  while (rem_len > q->len) {
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	895b      	ldrh	r3, [r3, #10]
 8006de4:	897a      	ldrh	r2, [r7, #10]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d8e1      	bhi.n	8006dae <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	7b1b      	ldrb	r3, [r3, #12]
 8006dee:	f003 030f 	and.w	r3, r3, #15
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d122      	bne.n	8006e3c <pbuf_realloc+0xcc>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	895b      	ldrh	r3, [r3, #10]
 8006dfa:	897a      	ldrh	r2, [r7, #10]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d01d      	beq.n	8006e3c <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	7b5b      	ldrb	r3, [r3, #13]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d117      	bne.n	8006e3c <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	461a      	mov	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	897b      	ldrh	r3, [r7, #10]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	4619      	mov	r1, r3
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f7ff f875 	bl	8005f10 <mem_trim>
 8006e26:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d106      	bne.n	8006e3c <pbuf_realloc+0xcc>
 8006e2e:	4b0f      	ldr	r3, [pc, #60]	; (8006e6c <pbuf_realloc+0xfc>)
 8006e30:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006e34:	4911      	ldr	r1, [pc, #68]	; (8006e7c <pbuf_realloc+0x10c>)
 8006e36:	480f      	ldr	r0, [pc, #60]	; (8006e74 <pbuf_realloc+0x104>)
 8006e38:	f00b fb96 	bl	8012568 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	897a      	ldrh	r2, [r7, #10]
 8006e40:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	895a      	ldrh	r2, [r3, #10]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d004      	beq.n	8006e5c <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 f910 	bl	800707c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	e000      	b.n	8006e66 <pbuf_realloc+0xf6>
    return;
 8006e64:	bf00      	nop

}
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	08013c3c 	.word	0x08013c3c
 8006e70:	08013d54 	.word	0x08013d54
 8006e74:	08013c9c 	.word	0x08013c9c
 8006e78:	08013d6c 	.word	0x08013d6c
 8006e7c:	08013d84 	.word	0x08013d84

08006e80 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d106      	bne.n	8006ea2 <pbuf_add_header_impl+0x22>
 8006e94:	4b2b      	ldr	r3, [pc, #172]	; (8006f44 <pbuf_add_header_impl+0xc4>)
 8006e96:	f240 12df 	movw	r2, #479	; 0x1df
 8006e9a:	492b      	ldr	r1, [pc, #172]	; (8006f48 <pbuf_add_header_impl+0xc8>)
 8006e9c:	482b      	ldr	r0, [pc, #172]	; (8006f4c <pbuf_add_header_impl+0xcc>)
 8006e9e:	f00b fb63 	bl	8012568 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <pbuf_add_header_impl+0x30>
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eae:	d301      	bcc.n	8006eb4 <pbuf_add_header_impl+0x34>
    return 1;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e043      	b.n	8006f3c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <pbuf_add_header_impl+0x3e>
    return 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	e03e      	b.n	8006f3c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	891a      	ldrh	r2, [r3, #8]
 8006ec6:	8a7b      	ldrh	r3, [r7, #18]
 8006ec8:	4413      	add	r3, r2
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	8a7a      	ldrh	r2, [r7, #18]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d901      	bls.n	8006ed6 <pbuf_add_header_impl+0x56>
    return 1;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e032      	b.n	8006f3c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	7b1b      	ldrb	r3, [r3, #12]
 8006eda:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006edc:	8a3b      	ldrh	r3, [r7, #16]
 8006ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00c      	beq.n	8006f00 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	425b      	negs	r3, r3
 8006eee:	4413      	add	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3310      	adds	r3, #16
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d20d      	bcs.n	8006f18 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e01d      	b.n	8006f3c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d006      	beq.n	8006f14 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	425b      	negs	r3, r3
 8006f0e:	4413      	add	r3, r2
 8006f10:	617b      	str	r3, [r7, #20]
 8006f12:	e001      	b.n	8006f18 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e011      	b.n	8006f3c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	895a      	ldrh	r2, [r3, #10]
 8006f22:	8a7b      	ldrh	r3, [r7, #18]
 8006f24:	4413      	add	r3, r2
 8006f26:	b29a      	uxth	r2, r3
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	891a      	ldrh	r2, [r3, #8]
 8006f30:	8a7b      	ldrh	r3, [r7, #18]
 8006f32:	4413      	add	r3, r2
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	811a      	strh	r2, [r3, #8]


  return 0;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3718      	adds	r7, #24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	08013c3c 	.word	0x08013c3c
 8006f48:	08013da0 	.word	0x08013da0
 8006f4c:	08013c9c 	.word	0x08013c9c

08006f50 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7ff ff8e 	bl	8006e80 <pbuf_add_header_impl>
 8006f64:	4603      	mov	r3, r0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d106      	bne.n	8006f8e <pbuf_remove_header+0x1e>
 8006f80:	4b20      	ldr	r3, [pc, #128]	; (8007004 <pbuf_remove_header+0x94>)
 8006f82:	f240 224b 	movw	r2, #587	; 0x24b
 8006f86:	4920      	ldr	r1, [pc, #128]	; (8007008 <pbuf_remove_header+0x98>)
 8006f88:	4820      	ldr	r0, [pc, #128]	; (800700c <pbuf_remove_header+0x9c>)
 8006f8a:	f00b faed 	bl	8012568 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d003      	beq.n	8006f9c <pbuf_remove_header+0x2c>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f9a:	d301      	bcc.n	8006fa0 <pbuf_remove_header+0x30>
    return 1;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e02c      	b.n	8006ffa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <pbuf_remove_header+0x3a>
    return 0;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	e027      	b.n	8006ffa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	895b      	ldrh	r3, [r3, #10]
 8006fb2:	89fa      	ldrh	r2, [r7, #14]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d908      	bls.n	8006fca <pbuf_remove_header+0x5a>
 8006fb8:	4b12      	ldr	r3, [pc, #72]	; (8007004 <pbuf_remove_header+0x94>)
 8006fba:	f240 2255 	movw	r2, #597	; 0x255
 8006fbe:	4914      	ldr	r1, [pc, #80]	; (8007010 <pbuf_remove_header+0xa0>)
 8006fc0:	4812      	ldr	r0, [pc, #72]	; (800700c <pbuf_remove_header+0x9c>)
 8006fc2:	f00b fad1 	bl	8012568 <iprintf>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e017      	b.n	8006ffa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	441a      	add	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	895a      	ldrh	r2, [r3, #10]
 8006fe0:	89fb      	ldrh	r3, [r7, #14]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	891a      	ldrh	r2, [r3, #8]
 8006fee:	89fb      	ldrh	r3, [r7, #14]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	08013c3c 	.word	0x08013c3c
 8007008:	08013da0 	.word	0x08013da0
 800700c:	08013c9c 	.word	0x08013c9c
 8007010:	08013dac 	.word	0x08013dac

08007014 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	460b      	mov	r3, r1
 800701e:	807b      	strh	r3, [r7, #2]
 8007020:	4613      	mov	r3, r2
 8007022:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007024:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007028:	2b00      	cmp	r3, #0
 800702a:	da08      	bge.n	800703e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800702c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007030:	425b      	negs	r3, r3
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7ff ff9b 	bl	8006f70 <pbuf_remove_header>
 800703a:	4603      	mov	r3, r0
 800703c:	e007      	b.n	800704e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800703e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007042:	787a      	ldrb	r2, [r7, #1]
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff ff1a 	bl	8006e80 <pbuf_add_header_impl>
 800704c:	4603      	mov	r3, r0
  }
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	460b      	mov	r3, r1
 8007060:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007062:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007066:	2201      	movs	r2, #1
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff ffd2 	bl	8007014 <pbuf_header_impl>
 8007070:	4603      	mov	r3, r0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
	...

0800707c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10b      	bne.n	80070a2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d106      	bne.n	800709e <pbuf_free+0x22>
 8007090:	4b38      	ldr	r3, [pc, #224]	; (8007174 <pbuf_free+0xf8>)
 8007092:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007096:	4938      	ldr	r1, [pc, #224]	; (8007178 <pbuf_free+0xfc>)
 8007098:	4838      	ldr	r0, [pc, #224]	; (800717c <pbuf_free+0x100>)
 800709a:	f00b fa65 	bl	8012568 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	e063      	b.n	800716a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80070a2:	2300      	movs	r3, #0
 80070a4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80070a6:	e05c      	b.n	8007162 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	7b9b      	ldrb	r3, [r3, #14]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d106      	bne.n	80070be <pbuf_free+0x42>
 80070b0:	4b30      	ldr	r3, [pc, #192]	; (8007174 <pbuf_free+0xf8>)
 80070b2:	f240 22f1 	movw	r2, #753	; 0x2f1
 80070b6:	4932      	ldr	r1, [pc, #200]	; (8007180 <pbuf_free+0x104>)
 80070b8:	4830      	ldr	r0, [pc, #192]	; (800717c <pbuf_free+0x100>)
 80070ba:	f00b fa55 	bl	8012568 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	7b9b      	ldrb	r3, [r3, #14]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	739a      	strb	r2, [r3, #14]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	7b9b      	ldrb	r3, [r3, #14]
 80070ce:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80070d0:	7dbb      	ldrb	r3, [r7, #22]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d143      	bne.n	800715e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	7b1b      	ldrb	r3, [r3, #12]
 80070e0:	f003 030f 	and.w	r3, r3, #15
 80070e4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	7b5b      	ldrb	r3, [r3, #13]
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d011      	beq.n	8007116 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <pbuf_free+0x90>
 80070fe:	4b1d      	ldr	r3, [pc, #116]	; (8007174 <pbuf_free+0xf8>)
 8007100:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007104:	491f      	ldr	r1, [pc, #124]	; (8007184 <pbuf_free+0x108>)
 8007106:	481d      	ldr	r0, [pc, #116]	; (800717c <pbuf_free+0x100>)
 8007108:	f00b fa2e 	bl	8012568 <iprintf>
        pc->custom_free_function(p);
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	691b      	ldr	r3, [r3, #16]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	4798      	blx	r3
 8007114:	e01d      	b.n	8007152 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	2b02      	cmp	r3, #2
 800711a:	d104      	bne.n	8007126 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800711c:	6879      	ldr	r1, [r7, #4]
 800711e:	2008      	movs	r0, #8
 8007120:	f7ff f9ac 	bl	800647c <memp_free>
 8007124:	e015      	b.n	8007152 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d104      	bne.n	8007136 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	2007      	movs	r0, #7
 8007130:	f7ff f9a4 	bl	800647c <memp_free>
 8007134:	e00d      	b.n	8007152 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d103      	bne.n	8007144 <pbuf_free+0xc8>
          mem_free(p);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7fe fe7d 	bl	8005e3c <mem_free>
 8007142:	e006      	b.n	8007152 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007144:	4b0b      	ldr	r3, [pc, #44]	; (8007174 <pbuf_free+0xf8>)
 8007146:	f240 320f 	movw	r2, #783	; 0x30f
 800714a:	490f      	ldr	r1, [pc, #60]	; (8007188 <pbuf_free+0x10c>)
 800714c:	480b      	ldr	r0, [pc, #44]	; (800717c <pbuf_free+0x100>)
 800714e:	f00b fa0b 	bl	8012568 <iprintf>
        }
      }
      count++;
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	3301      	adds	r3, #1
 8007156:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	607b      	str	r3, [r7, #4]
 800715c:	e001      	b.n	8007162 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800715e:	2300      	movs	r3, #0
 8007160:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d19f      	bne.n	80070a8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007168:	7dfb      	ldrb	r3, [r7, #23]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	08013c3c 	.word	0x08013c3c
 8007178:	08013da0 	.word	0x08013da0
 800717c:	08013c9c 	.word	0x08013c9c
 8007180:	08013dcc 	.word	0x08013dcc
 8007184:	08013de4 	.word	0x08013de4
 8007188:	08013e08 	.word	0x08013e08

0800718c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007198:	e005      	b.n	80071a6 <pbuf_clen+0x1a>
    ++len;
 800719a:	89fb      	ldrh	r3, [r7, #14]
 800719c:	3301      	adds	r3, #1
 800719e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1f6      	bne.n	800719a <pbuf_clen+0xe>
  }
  return len;
 80071ac:	89fb      	ldrh	r3, [r7, #14]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
	...

080071bc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d010      	beq.n	80071ec <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	7b9b      	ldrb	r3, [r3, #14]
 80071ce:	3301      	adds	r3, #1
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	7b9b      	ldrb	r3, [r3, #14]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d106      	bne.n	80071ec <pbuf_ref+0x30>
 80071de:	4b05      	ldr	r3, [pc, #20]	; (80071f4 <pbuf_ref+0x38>)
 80071e0:	f240 3242 	movw	r2, #834	; 0x342
 80071e4:	4904      	ldr	r1, [pc, #16]	; (80071f8 <pbuf_ref+0x3c>)
 80071e6:	4805      	ldr	r0, [pc, #20]	; (80071fc <pbuf_ref+0x40>)
 80071e8:	f00b f9be 	bl	8012568 <iprintf>
  }
}
 80071ec:	bf00      	nop
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	08013c3c 	.word	0x08013c3c
 80071f8:	08013e1c 	.word	0x08013e1c
 80071fc:	08013c9c 	.word	0x08013c9c

08007200 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <pbuf_cat+0x16>
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d107      	bne.n	8007226 <pbuf_cat+0x26>
 8007216:	4b20      	ldr	r3, [pc, #128]	; (8007298 <pbuf_cat+0x98>)
 8007218:	f240 325a 	movw	r2, #858	; 0x35a
 800721c:	491f      	ldr	r1, [pc, #124]	; (800729c <pbuf_cat+0x9c>)
 800721e:	4820      	ldr	r0, [pc, #128]	; (80072a0 <pbuf_cat+0xa0>)
 8007220:	f00b f9a2 	bl	8012568 <iprintf>
 8007224:	e034      	b.n	8007290 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	e00a      	b.n	8007242 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	891a      	ldrh	r2, [r3, #8]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	891b      	ldrh	r3, [r3, #8]
 8007234:	4413      	add	r3, r2
 8007236:	b29a      	uxth	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1f0      	bne.n	800722c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	891a      	ldrh	r2, [r3, #8]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	895b      	ldrh	r3, [r3, #10]
 8007252:	429a      	cmp	r2, r3
 8007254:	d006      	beq.n	8007264 <pbuf_cat+0x64>
 8007256:	4b10      	ldr	r3, [pc, #64]	; (8007298 <pbuf_cat+0x98>)
 8007258:	f240 3262 	movw	r2, #866	; 0x362
 800725c:	4911      	ldr	r1, [pc, #68]	; (80072a4 <pbuf_cat+0xa4>)
 800725e:	4810      	ldr	r0, [pc, #64]	; (80072a0 <pbuf_cat+0xa0>)
 8007260:	f00b f982 	bl	8012568 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d006      	beq.n	800727a <pbuf_cat+0x7a>
 800726c:	4b0a      	ldr	r3, [pc, #40]	; (8007298 <pbuf_cat+0x98>)
 800726e:	f240 3263 	movw	r2, #867	; 0x363
 8007272:	490d      	ldr	r1, [pc, #52]	; (80072a8 <pbuf_cat+0xa8>)
 8007274:	480a      	ldr	r0, [pc, #40]	; (80072a0 <pbuf_cat+0xa0>)
 8007276:	f00b f977 	bl	8012568 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	891a      	ldrh	r2, [r3, #8]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	891b      	ldrh	r3, [r3, #8]
 8007282:	4413      	add	r3, r2
 8007284:	b29a      	uxth	r2, r3
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	08013c3c 	.word	0x08013c3c
 800729c:	08013e30 	.word	0x08013e30
 80072a0:	08013c9c 	.word	0x08013c9c
 80072a4:	08013e68 	.word	0x08013e68
 80072a8:	08013e98 	.word	0x08013e98

080072ac <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff ffa1 	bl	8007200 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80072be:	6838      	ldr	r0, [r7, #0]
 80072c0:	f7ff ff7c 	bl	80071bc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80072c4:	bf00      	nop
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80072d6:	2300      	movs	r3, #0
 80072d8:	617b      	str	r3, [r7, #20]
 80072da:	2300      	movs	r3, #0
 80072dc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d008      	beq.n	80072f6 <pbuf_copy+0x2a>
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d005      	beq.n	80072f6 <pbuf_copy+0x2a>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	891a      	ldrh	r2, [r3, #8]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	891b      	ldrh	r3, [r3, #8]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d209      	bcs.n	800730a <pbuf_copy+0x3e>
 80072f6:	4b57      	ldr	r3, [pc, #348]	; (8007454 <pbuf_copy+0x188>)
 80072f8:	f240 32ca 	movw	r2, #970	; 0x3ca
 80072fc:	4956      	ldr	r1, [pc, #344]	; (8007458 <pbuf_copy+0x18c>)
 80072fe:	4857      	ldr	r0, [pc, #348]	; (800745c <pbuf_copy+0x190>)
 8007300:	f00b f932 	bl	8012568 <iprintf>
 8007304:	f06f 030f 	mvn.w	r3, #15
 8007308:	e09f      	b.n	800744a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	895b      	ldrh	r3, [r3, #10]
 800730e:	461a      	mov	r2, r3
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	1ad2      	subs	r2, r2, r3
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	895b      	ldrh	r3, [r3, #10]
 8007318:	4619      	mov	r1, r3
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	1acb      	subs	r3, r1, r3
 800731e:	429a      	cmp	r2, r3
 8007320:	d306      	bcc.n	8007330 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	895b      	ldrh	r3, [r3, #10]
 8007326:	461a      	mov	r2, r3
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	1ad3      	subs	r3, r2, r3
 800732c:	60fb      	str	r3, [r7, #12]
 800732e:	e005      	b.n	800733c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	895b      	ldrh	r3, [r3, #10]
 8007334:	461a      	mov	r2, r3
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	18d0      	adds	r0, r2, r3
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685a      	ldr	r2, [r3, #4]
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	4413      	add	r3, r2
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4619      	mov	r1, r3
 8007350:	f00b f8f7 	bl	8012542 <memcpy>
    offset_to += len;
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4413      	add	r3, r2
 800735a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	895b      	ldrh	r3, [r3, #10]
 8007368:	461a      	mov	r2, r3
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	4293      	cmp	r3, r2
 800736e:	d906      	bls.n	800737e <pbuf_copy+0xb2>
 8007370:	4b38      	ldr	r3, [pc, #224]	; (8007454 <pbuf_copy+0x188>)
 8007372:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007376:	493a      	ldr	r1, [pc, #232]	; (8007460 <pbuf_copy+0x194>)
 8007378:	4838      	ldr	r0, [pc, #224]	; (800745c <pbuf_copy+0x190>)
 800737a:	f00b f8f5 	bl	8012568 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	895b      	ldrh	r3, [r3, #10]
 8007382:	461a      	mov	r2, r3
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	4293      	cmp	r3, r2
 8007388:	d906      	bls.n	8007398 <pbuf_copy+0xcc>
 800738a:	4b32      	ldr	r3, [pc, #200]	; (8007454 <pbuf_copy+0x188>)
 800738c:	f240 32da 	movw	r2, #986	; 0x3da
 8007390:	4934      	ldr	r1, [pc, #208]	; (8007464 <pbuf_copy+0x198>)
 8007392:	4832      	ldr	r0, [pc, #200]	; (800745c <pbuf_copy+0x190>)
 8007394:	f00b f8e8 	bl	8012568 <iprintf>
    if (offset_from >= p_from->len) {
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	895b      	ldrh	r3, [r3, #10]
 800739c:	461a      	mov	r2, r3
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d304      	bcc.n	80073ae <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	895b      	ldrh	r3, [r3, #10]
 80073b2:	461a      	mov	r2, r3
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d114      	bne.n	80073e4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80073ba:	2300      	movs	r3, #0
 80073bc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10c      	bne.n	80073e4 <pbuf_copy+0x118>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d009      	beq.n	80073e4 <pbuf_copy+0x118>
 80073d0:	4b20      	ldr	r3, [pc, #128]	; (8007454 <pbuf_copy+0x188>)
 80073d2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80073d6:	4924      	ldr	r1, [pc, #144]	; (8007468 <pbuf_copy+0x19c>)
 80073d8:	4820      	ldr	r0, [pc, #128]	; (800745c <pbuf_copy+0x190>)
 80073da:	f00b f8c5 	bl	8012568 <iprintf>
 80073de:	f06f 030f 	mvn.w	r3, #15
 80073e2:	e032      	b.n	800744a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d013      	beq.n	8007412 <pbuf_copy+0x146>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	895a      	ldrh	r2, [r3, #10]
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	891b      	ldrh	r3, [r3, #8]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d10d      	bne.n	8007412 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d009      	beq.n	8007412 <pbuf_copy+0x146>
 80073fe:	4b15      	ldr	r3, [pc, #84]	; (8007454 <pbuf_copy+0x188>)
 8007400:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8007404:	4919      	ldr	r1, [pc, #100]	; (800746c <pbuf_copy+0x1a0>)
 8007406:	4815      	ldr	r0, [pc, #84]	; (800745c <pbuf_copy+0x190>)
 8007408:	f00b f8ae 	bl	8012568 <iprintf>
 800740c:	f06f 0305 	mvn.w	r3, #5
 8007410:	e01b      	b.n	800744a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d013      	beq.n	8007440 <pbuf_copy+0x174>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	895a      	ldrh	r2, [r3, #10]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	891b      	ldrh	r3, [r3, #8]
 8007420:	429a      	cmp	r2, r3
 8007422:	d10d      	bne.n	8007440 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d009      	beq.n	8007440 <pbuf_copy+0x174>
 800742c:	4b09      	ldr	r3, [pc, #36]	; (8007454 <pbuf_copy+0x188>)
 800742e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8007432:	490e      	ldr	r1, [pc, #56]	; (800746c <pbuf_copy+0x1a0>)
 8007434:	4809      	ldr	r0, [pc, #36]	; (800745c <pbuf_copy+0x190>)
 8007436:	f00b f897 	bl	8012568 <iprintf>
 800743a:	f06f 0305 	mvn.w	r3, #5
 800743e:	e004      	b.n	800744a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	f47f af61 	bne.w	800730a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	08013c3c 	.word	0x08013c3c
 8007458:	08013ee4 	.word	0x08013ee4
 800745c:	08013c9c 	.word	0x08013c9c
 8007460:	08013f14 	.word	0x08013f14
 8007464:	08013f2c 	.word	0x08013f2c
 8007468:	08013f48 	.word	0x08013f48
 800746c:	08013f58 	.word	0x08013f58

08007470 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b088      	sub	sp, #32
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	4611      	mov	r1, r2
 800747c:	461a      	mov	r2, r3
 800747e:	460b      	mov	r3, r1
 8007480:	80fb      	strh	r3, [r7, #6]
 8007482:	4613      	mov	r3, r2
 8007484:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d108      	bne.n	80074a6 <pbuf_copy_partial+0x36>
 8007494:	4b2b      	ldr	r3, [pc, #172]	; (8007544 <pbuf_copy_partial+0xd4>)
 8007496:	f240 420a 	movw	r2, #1034	; 0x40a
 800749a:	492b      	ldr	r1, [pc, #172]	; (8007548 <pbuf_copy_partial+0xd8>)
 800749c:	482b      	ldr	r0, [pc, #172]	; (800754c <pbuf_copy_partial+0xdc>)
 800749e:	f00b f863 	bl	8012568 <iprintf>
 80074a2:	2300      	movs	r3, #0
 80074a4:	e04a      	b.n	800753c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d108      	bne.n	80074be <pbuf_copy_partial+0x4e>
 80074ac:	4b25      	ldr	r3, [pc, #148]	; (8007544 <pbuf_copy_partial+0xd4>)
 80074ae:	f240 420b 	movw	r2, #1035	; 0x40b
 80074b2:	4927      	ldr	r1, [pc, #156]	; (8007550 <pbuf_copy_partial+0xe0>)
 80074b4:	4825      	ldr	r0, [pc, #148]	; (800754c <pbuf_copy_partial+0xdc>)
 80074b6:	f00b f857 	bl	8012568 <iprintf>
 80074ba:	2300      	movs	r3, #0
 80074bc:	e03e      	b.n	800753c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	61fb      	str	r3, [r7, #28]
 80074c2:	e034      	b.n	800752e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80074c4:	88bb      	ldrh	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <pbuf_copy_partial+0x70>
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	895b      	ldrh	r3, [r3, #10]
 80074ce:	88ba      	ldrh	r2, [r7, #4]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d305      	bcc.n	80074e0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	895b      	ldrh	r3, [r3, #10]
 80074d8:	88ba      	ldrh	r2, [r7, #4]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	80bb      	strh	r3, [r7, #4]
 80074de:	e023      	b.n	8007528 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	895a      	ldrh	r2, [r3, #10]
 80074e4:	88bb      	ldrh	r3, [r7, #4]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80074ea:	8b3a      	ldrh	r2, [r7, #24]
 80074ec:	88fb      	ldrh	r3, [r7, #6]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d901      	bls.n	80074f6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80074f2:	88fb      	ldrh	r3, [r7, #6]
 80074f4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80074f6:	8b7b      	ldrh	r3, [r7, #26]
 80074f8:	68ba      	ldr	r2, [r7, #8]
 80074fa:	18d0      	adds	r0, r2, r3
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	88bb      	ldrh	r3, [r7, #4]
 8007502:	4413      	add	r3, r2
 8007504:	8b3a      	ldrh	r2, [r7, #24]
 8007506:	4619      	mov	r1, r3
 8007508:	f00b f81b 	bl	8012542 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800750c:	8afa      	ldrh	r2, [r7, #22]
 800750e:	8b3b      	ldrh	r3, [r7, #24]
 8007510:	4413      	add	r3, r2
 8007512:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007514:	8b7a      	ldrh	r2, [r7, #26]
 8007516:	8b3b      	ldrh	r3, [r7, #24]
 8007518:	4413      	add	r3, r2
 800751a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800751c:	88fa      	ldrh	r2, [r7, #6]
 800751e:	8b3b      	ldrh	r3, [r7, #24]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007524:	2300      	movs	r3, #0
 8007526:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	61fb      	str	r3, [r7, #28]
 800752e:	88fb      	ldrh	r3, [r7, #6]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <pbuf_copy_partial+0xca>
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1c4      	bne.n	80074c4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800753a:	8afb      	ldrh	r3, [r7, #22]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3720      	adds	r7, #32
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	08013c3c 	.word	0x08013c3c
 8007548:	08013f84 	.word	0x08013f84
 800754c:	08013c9c 	.word	0x08013c9c
 8007550:	08013fa4 	.word	0x08013fa4

08007554 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	4603      	mov	r3, r0
 800755c:	603a      	str	r2, [r7, #0]
 800755e:	71fb      	strb	r3, [r7, #7]
 8007560:	460b      	mov	r3, r1
 8007562:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	8919      	ldrh	r1, [r3, #8]
 8007568:	88ba      	ldrh	r2, [r7, #4]
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	4618      	mov	r0, r3
 800756e:	f7ff faa5 	bl	8006abc <pbuf_alloc>
 8007572:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <pbuf_clone+0x2a>
    return NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	e011      	b.n	80075a2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f7ff fea3 	bl	80072cc <pbuf_copy>
 8007586:	4603      	mov	r3, r0
 8007588:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800758a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d006      	beq.n	80075a0 <pbuf_clone+0x4c>
 8007592:	4b06      	ldr	r3, [pc, #24]	; (80075ac <pbuf_clone+0x58>)
 8007594:	f240 5224 	movw	r2, #1316	; 0x524
 8007598:	4905      	ldr	r1, [pc, #20]	; (80075b0 <pbuf_clone+0x5c>)
 800759a:	4806      	ldr	r0, [pc, #24]	; (80075b4 <pbuf_clone+0x60>)
 800759c:	f00a ffe4 	bl	8012568 <iprintf>
  return q;
 80075a0:	68fb      	ldr	r3, [r7, #12]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	08013c3c 	.word	0x08013c3c
 80075b0:	080140b0 	.word	0x080140b0
 80075b4:	08013c9c 	.word	0x08013c9c

080075b8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80075bc:	f00a ffec 	bl	8012598 <rand>
 80075c0:	4603      	mov	r3, r0
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	4b01      	ldr	r3, [pc, #4]	; (80075d8 <tcp_init+0x20>)
 80075d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80075d4:	bf00      	nop
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	2000000a 	.word	0x2000000a

080075dc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	7d1b      	ldrb	r3, [r3, #20]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d105      	bne.n	80075f8 <tcp_free+0x1c>
 80075ec:	4b06      	ldr	r3, [pc, #24]	; (8007608 <tcp_free+0x2c>)
 80075ee:	22d4      	movs	r2, #212	; 0xd4
 80075f0:	4906      	ldr	r1, [pc, #24]	; (800760c <tcp_free+0x30>)
 80075f2:	4807      	ldr	r0, [pc, #28]	; (8007610 <tcp_free+0x34>)
 80075f4:	f00a ffb8 	bl	8012568 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80075f8:	6879      	ldr	r1, [r7, #4]
 80075fa:	2001      	movs	r0, #1
 80075fc:	f7fe ff3e 	bl	800647c <memp_free>
}
 8007600:	bf00      	nop
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	0801413c 	.word	0x0801413c
 800760c:	0801416c 	.word	0x0801416c
 8007610:	08014180 	.word	0x08014180

08007614 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	7d1b      	ldrb	r3, [r3, #20]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d105      	bne.n	8007630 <tcp_free_listen+0x1c>
 8007624:	4b06      	ldr	r3, [pc, #24]	; (8007640 <tcp_free_listen+0x2c>)
 8007626:	22df      	movs	r2, #223	; 0xdf
 8007628:	4906      	ldr	r1, [pc, #24]	; (8007644 <tcp_free_listen+0x30>)
 800762a:	4807      	ldr	r0, [pc, #28]	; (8007648 <tcp_free_listen+0x34>)
 800762c:	f00a ff9c 	bl	8012568 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	2002      	movs	r0, #2
 8007634:	f7fe ff22 	bl	800647c <memp_free>
}
 8007638:	bf00      	nop
 800763a:	3708      	adds	r7, #8
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	0801413c 	.word	0x0801413c
 8007644:	080141a8 	.word	0x080141a8
 8007648:	08014180 	.word	0x08014180

0800764c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8007650:	f001 f852 	bl	80086f8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007654:	4b07      	ldr	r3, [pc, #28]	; (8007674 <tcp_tmr+0x28>)
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	3301      	adds	r3, #1
 800765a:	b2da      	uxtb	r2, r3
 800765c:	4b05      	ldr	r3, [pc, #20]	; (8007674 <tcp_tmr+0x28>)
 800765e:	701a      	strb	r2, [r3, #0]
 8007660:	4b04      	ldr	r3, [pc, #16]	; (8007674 <tcp_tmr+0x28>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800766c:	f000 fd06 	bl	800807c <tcp_slowtmr>
  }
}
 8007670:	bf00      	nop
 8007672:	bd80      	pop	{r7, pc}
 8007674:	20000519 	.word	0x20000519

08007678 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d105      	bne.n	8007694 <tcp_remove_listener+0x1c>
 8007688:	4b0d      	ldr	r3, [pc, #52]	; (80076c0 <tcp_remove_listener+0x48>)
 800768a:	22ff      	movs	r2, #255	; 0xff
 800768c:	490d      	ldr	r1, [pc, #52]	; (80076c4 <tcp_remove_listener+0x4c>)
 800768e:	480e      	ldr	r0, [pc, #56]	; (80076c8 <tcp_remove_listener+0x50>)
 8007690:	f00a ff6a 	bl	8012568 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	e00a      	b.n	80076b0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d102      	bne.n	80076aa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	60fb      	str	r3, [r7, #12]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1f1      	bne.n	800769a <tcp_remove_listener+0x22>
    }
  }
}
 80076b6:	bf00      	nop
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	0801413c 	.word	0x0801413c
 80076c4:	080141c4 	.word	0x080141c4
 80076c8:	08014180 	.word	0x08014180

080076cc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d106      	bne.n	80076e8 <tcp_listen_closed+0x1c>
 80076da:	4b14      	ldr	r3, [pc, #80]	; (800772c <tcp_listen_closed+0x60>)
 80076dc:	f240 1211 	movw	r2, #273	; 0x111
 80076e0:	4913      	ldr	r1, [pc, #76]	; (8007730 <tcp_listen_closed+0x64>)
 80076e2:	4814      	ldr	r0, [pc, #80]	; (8007734 <tcp_listen_closed+0x68>)
 80076e4:	f00a ff40 	bl	8012568 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7d1b      	ldrb	r3, [r3, #20]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d006      	beq.n	80076fe <tcp_listen_closed+0x32>
 80076f0:	4b0e      	ldr	r3, [pc, #56]	; (800772c <tcp_listen_closed+0x60>)
 80076f2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80076f6:	4910      	ldr	r1, [pc, #64]	; (8007738 <tcp_listen_closed+0x6c>)
 80076f8:	480e      	ldr	r0, [pc, #56]	; (8007734 <tcp_listen_closed+0x68>)
 80076fa:	f00a ff35 	bl	8012568 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80076fe:	2301      	movs	r3, #1
 8007700:	60fb      	str	r3, [r7, #12]
 8007702:	e00b      	b.n	800771c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8007704:	4a0d      	ldr	r2, [pc, #52]	; (800773c <tcp_listen_closed+0x70>)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	4618      	mov	r0, r3
 8007712:	f7ff ffb1 	bl	8007678 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	3301      	adds	r3, #1
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b03      	cmp	r3, #3
 8007720:	d9f0      	bls.n	8007704 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8007722:	bf00      	nop
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	0801413c 	.word	0x0801413c
 8007730:	080141ec 	.word	0x080141ec
 8007734:	08014180 	.word	0x08014180
 8007738:	080141f8 	.word	0x080141f8
 800773c:	08016a64 	.word	0x08016a64

08007740 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8007740:	b5b0      	push	{r4, r5, r7, lr}
 8007742:	b088      	sub	sp, #32
 8007744:	af04      	add	r7, sp, #16
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d106      	bne.n	8007760 <tcp_close_shutdown+0x20>
 8007752:	4b61      	ldr	r3, [pc, #388]	; (80078d8 <tcp_close_shutdown+0x198>)
 8007754:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007758:	4960      	ldr	r1, [pc, #384]	; (80078dc <tcp_close_shutdown+0x19c>)
 800775a:	4861      	ldr	r0, [pc, #388]	; (80078e0 <tcp_close_shutdown+0x1a0>)
 800775c:	f00a ff04 	bl	8012568 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007760:	78fb      	ldrb	r3, [r7, #3]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d066      	beq.n	8007834 <tcp_close_shutdown+0xf4>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	7d1b      	ldrb	r3, [r3, #20]
 800776a:	2b04      	cmp	r3, #4
 800776c:	d003      	beq.n	8007776 <tcp_close_shutdown+0x36>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	7d1b      	ldrb	r3, [r3, #20]
 8007772:	2b07      	cmp	r3, #7
 8007774:	d15e      	bne.n	8007834 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800777a:	2b00      	cmp	r3, #0
 800777c:	d104      	bne.n	8007788 <tcp_close_shutdown+0x48>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007782:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007786:	d055      	beq.n	8007834 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	8b5b      	ldrh	r3, [r3, #26]
 800778c:	f003 0310 	and.w	r3, r3, #16
 8007790:	2b00      	cmp	r3, #0
 8007792:	d106      	bne.n	80077a2 <tcp_close_shutdown+0x62>
 8007794:	4b50      	ldr	r3, [pc, #320]	; (80078d8 <tcp_close_shutdown+0x198>)
 8007796:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800779a:	4952      	ldr	r1, [pc, #328]	; (80078e4 <tcp_close_shutdown+0x1a4>)
 800779c:	4850      	ldr	r0, [pc, #320]	; (80078e0 <tcp_close_shutdown+0x1a0>)
 800779e:	f00a fee3 	bl	8012568 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80077aa:	687d      	ldr	r5, [r7, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3304      	adds	r3, #4
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	8ad2      	ldrh	r2, [r2, #22]
 80077b4:	6879      	ldr	r1, [r7, #4]
 80077b6:	8b09      	ldrh	r1, [r1, #24]
 80077b8:	9102      	str	r1, [sp, #8]
 80077ba:	9201      	str	r2, [sp, #4]
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	462b      	mov	r3, r5
 80077c0:	4622      	mov	r2, r4
 80077c2:	4601      	mov	r1, r0
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f005 fd91 	bl	800d2ec <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 fb60 	bl	8008e90 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80077d0:	4b45      	ldr	r3, [pc, #276]	; (80078e8 <tcp_close_shutdown+0x1a8>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d105      	bne.n	80077e6 <tcp_close_shutdown+0xa6>
 80077da:	4b43      	ldr	r3, [pc, #268]	; (80078e8 <tcp_close_shutdown+0x1a8>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	4a41      	ldr	r2, [pc, #260]	; (80078e8 <tcp_close_shutdown+0x1a8>)
 80077e2:	6013      	str	r3, [r2, #0]
 80077e4:	e013      	b.n	800780e <tcp_close_shutdown+0xce>
 80077e6:	4b40      	ldr	r3, [pc, #256]	; (80078e8 <tcp_close_shutdown+0x1a8>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	e00c      	b.n	8007808 <tcp_close_shutdown+0xc8>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d104      	bne.n	8007802 <tcp_close_shutdown+0xc2>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	60da      	str	r2, [r3, #12]
 8007800:	e005      	b.n	800780e <tcp_close_shutdown+0xce>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	60fb      	str	r3, [r7, #12]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1ef      	bne.n	80077ee <tcp_close_shutdown+0xae>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	60da      	str	r2, [r3, #12]
 8007814:	4b35      	ldr	r3, [pc, #212]	; (80078ec <tcp_close_shutdown+0x1ac>)
 8007816:	2201      	movs	r2, #1
 8007818:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800781a:	4b35      	ldr	r3, [pc, #212]	; (80078f0 <tcp_close_shutdown+0x1b0>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	429a      	cmp	r2, r3
 8007822:	d102      	bne.n	800782a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007824:	f003 fff2 	bl	800b80c <tcp_trigger_input_pcb_close>
 8007828:	e002      	b.n	8007830 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7ff fed6 	bl	80075dc <tcp_free>
      }
      return ERR_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	e04d      	b.n	80078d0 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	7d1b      	ldrb	r3, [r3, #20]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d02d      	beq.n	8007898 <tcp_close_shutdown+0x158>
 800783c:	2b02      	cmp	r3, #2
 800783e:	d036      	beq.n	80078ae <tcp_close_shutdown+0x16e>
 8007840:	2b00      	cmp	r3, #0
 8007842:	d13f      	bne.n	80078c4 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	8adb      	ldrh	r3, [r3, #22]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d021      	beq.n	8007890 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800784c:	4b29      	ldr	r3, [pc, #164]	; (80078f4 <tcp_close_shutdown+0x1b4>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	429a      	cmp	r2, r3
 8007854:	d105      	bne.n	8007862 <tcp_close_shutdown+0x122>
 8007856:	4b27      	ldr	r3, [pc, #156]	; (80078f4 <tcp_close_shutdown+0x1b4>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	4a25      	ldr	r2, [pc, #148]	; (80078f4 <tcp_close_shutdown+0x1b4>)
 800785e:	6013      	str	r3, [r2, #0]
 8007860:	e013      	b.n	800788a <tcp_close_shutdown+0x14a>
 8007862:	4b24      	ldr	r3, [pc, #144]	; (80078f4 <tcp_close_shutdown+0x1b4>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60bb      	str	r3, [r7, #8]
 8007868:	e00c      	b.n	8007884 <tcp_close_shutdown+0x144>
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	429a      	cmp	r2, r3
 8007872:	d104      	bne.n	800787e <tcp_close_shutdown+0x13e>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	60da      	str	r2, [r3, #12]
 800787c:	e005      	b.n	800788a <tcp_close_shutdown+0x14a>
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	60bb      	str	r3, [r7, #8]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1ef      	bne.n	800786a <tcp_close_shutdown+0x12a>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7ff fea3 	bl	80075dc <tcp_free>
      break;
 8007896:	e01a      	b.n	80078ce <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f7ff ff17 	bl	80076cc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800789e:	6879      	ldr	r1, [r7, #4]
 80078a0:	4815      	ldr	r0, [pc, #84]	; (80078f8 <tcp_close_shutdown+0x1b8>)
 80078a2:	f001 fb45 	bl	8008f30 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7ff feb4 	bl	8007614 <tcp_free_listen>
      break;
 80078ac:	e00f      	b.n	80078ce <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	480d      	ldr	r0, [pc, #52]	; (80078e8 <tcp_close_shutdown+0x1a8>)
 80078b2:	f001 fb3d 	bl	8008f30 <tcp_pcb_remove>
 80078b6:	4b0d      	ldr	r3, [pc, #52]	; (80078ec <tcp_close_shutdown+0x1ac>)
 80078b8:	2201      	movs	r2, #1
 80078ba:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7ff fe8d 	bl	80075dc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80078c2:	e004      	b.n	80078ce <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f819 	bl	80078fc <tcp_close_shutdown_fin>
 80078ca:	4603      	mov	r3, r0
 80078cc:	e000      	b.n	80078d0 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bdb0      	pop	{r4, r5, r7, pc}
 80078d8:	0801413c 	.word	0x0801413c
 80078dc:	08014210 	.word	0x08014210
 80078e0:	08014180 	.word	0x08014180
 80078e4:	08014230 	.word	0x08014230
 80078e8:	20007188 	.word	0x20007188
 80078ec:	20007184 	.word	0x20007184
 80078f0:	2000719c 	.word	0x2000719c
 80078f4:	20007194 	.word	0x20007194
 80078f8:	20007190 	.word	0x20007190

080078fc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d106      	bne.n	8007918 <tcp_close_shutdown_fin+0x1c>
 800790a:	4b2c      	ldr	r3, [pc, #176]	; (80079bc <tcp_close_shutdown_fin+0xc0>)
 800790c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8007910:	492b      	ldr	r1, [pc, #172]	; (80079c0 <tcp_close_shutdown_fin+0xc4>)
 8007912:	482c      	ldr	r0, [pc, #176]	; (80079c4 <tcp_close_shutdown_fin+0xc8>)
 8007914:	f00a fe28 	bl	8012568 <iprintf>

  switch (pcb->state) {
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	7d1b      	ldrb	r3, [r3, #20]
 800791c:	2b04      	cmp	r3, #4
 800791e:	d010      	beq.n	8007942 <tcp_close_shutdown_fin+0x46>
 8007920:	2b07      	cmp	r3, #7
 8007922:	d01b      	beq.n	800795c <tcp_close_shutdown_fin+0x60>
 8007924:	2b03      	cmp	r3, #3
 8007926:	d126      	bne.n	8007976 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f004 fddb 	bl	800c4e4 <tcp_send_fin>
 800792e:	4603      	mov	r3, r0
 8007930:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d11f      	bne.n	800797a <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2205      	movs	r2, #5
 800793e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007940:	e01b      	b.n	800797a <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f004 fdce 	bl	800c4e4 <tcp_send_fin>
 8007948:	4603      	mov	r3, r0
 800794a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800794c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d114      	bne.n	800797e <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2205      	movs	r2, #5
 8007958:	751a      	strb	r2, [r3, #20]
      }
      break;
 800795a:	e010      	b.n	800797e <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f004 fdc1 	bl	800c4e4 <tcp_send_fin>
 8007962:	4603      	mov	r3, r0
 8007964:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d109      	bne.n	8007982 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2209      	movs	r2, #9
 8007972:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007974:	e005      	b.n	8007982 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	e01c      	b.n	80079b4 <tcp_close_shutdown_fin+0xb8>
      break;
 800797a:	bf00      	nop
 800797c:	e002      	b.n	8007984 <tcp_close_shutdown_fin+0x88>
      break;
 800797e:	bf00      	nop
 8007980:	e000      	b.n	8007984 <tcp_close_shutdown_fin+0x88>
      break;
 8007982:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d103      	bne.n	8007994 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f004 fee7 	bl	800c760 <tcp_output>
 8007992:	e00d      	b.n	80079b0 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8007994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799c:	d108      	bne.n	80079b0 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	8b5b      	ldrh	r3, [r3, #26]
 80079a2:	f043 0308 	orr.w	r3, r3, #8
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	e001      	b.n	80079b4 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 80079b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	0801413c 	.word	0x0801413c
 80079c0:	080141ec 	.word	0x080141ec
 80079c4:	08014180 	.word	0x08014180

080079c8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d109      	bne.n	80079ea <tcp_close+0x22>
 80079d6:	4b0f      	ldr	r3, [pc, #60]	; (8007a14 <tcp_close+0x4c>)
 80079d8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80079dc:	490e      	ldr	r1, [pc, #56]	; (8007a18 <tcp_close+0x50>)
 80079de:	480f      	ldr	r0, [pc, #60]	; (8007a1c <tcp_close+0x54>)
 80079e0:	f00a fdc2 	bl	8012568 <iprintf>
 80079e4:	f06f 030f 	mvn.w	r3, #15
 80079e8:	e00f      	b.n	8007a0a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	7d1b      	ldrb	r3, [r3, #20]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d006      	beq.n	8007a00 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	8b5b      	ldrh	r3, [r3, #26]
 80079f6:	f043 0310 	orr.w	r3, r3, #16
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8007a00:	2101      	movs	r1, #1
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff fe9c 	bl	8007740 <tcp_close_shutdown>
 8007a08:	4603      	mov	r3, r0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	0801413c 	.word	0x0801413c
 8007a18:	0801424c 	.word	0x0801424c
 8007a1c:	08014180 	.word	0x08014180

08007a20 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b08e      	sub	sp, #56	; 0x38
 8007a24:	af04      	add	r7, sp, #16
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d107      	bne.n	8007a40 <tcp_abandon+0x20>
 8007a30:	4b52      	ldr	r3, [pc, #328]	; (8007b7c <tcp_abandon+0x15c>)
 8007a32:	f240 223d 	movw	r2, #573	; 0x23d
 8007a36:	4952      	ldr	r1, [pc, #328]	; (8007b80 <tcp_abandon+0x160>)
 8007a38:	4852      	ldr	r0, [pc, #328]	; (8007b84 <tcp_abandon+0x164>)
 8007a3a:	f00a fd95 	bl	8012568 <iprintf>
 8007a3e:	e099      	b.n	8007b74 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	7d1b      	ldrb	r3, [r3, #20]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d106      	bne.n	8007a56 <tcp_abandon+0x36>
 8007a48:	4b4c      	ldr	r3, [pc, #304]	; (8007b7c <tcp_abandon+0x15c>)
 8007a4a:	f240 2241 	movw	r2, #577	; 0x241
 8007a4e:	494e      	ldr	r1, [pc, #312]	; (8007b88 <tcp_abandon+0x168>)
 8007a50:	484c      	ldr	r0, [pc, #304]	; (8007b84 <tcp_abandon+0x164>)
 8007a52:	f00a fd89 	bl	8012568 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	7d1b      	ldrb	r3, [r3, #20]
 8007a5a:	2b0a      	cmp	r3, #10
 8007a5c:	d107      	bne.n	8007a6e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007a5e:	6879      	ldr	r1, [r7, #4]
 8007a60:	484a      	ldr	r0, [pc, #296]	; (8007b8c <tcp_abandon+0x16c>)
 8007a62:	f001 fa65 	bl	8008f30 <tcp_pcb_remove>
    tcp_free(pcb);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7ff fdb8 	bl	80075dc <tcp_free>
 8007a6c:	e082      	b.n	8007b74 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a88:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	7d1b      	ldrb	r3, [r3, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d126      	bne.n	8007ae6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	8adb      	ldrh	r3, [r3, #22]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d02e      	beq.n	8007afe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007aa0:	4b3b      	ldr	r3, [pc, #236]	; (8007b90 <tcp_abandon+0x170>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d105      	bne.n	8007ab6 <tcp_abandon+0x96>
 8007aaa:	4b39      	ldr	r3, [pc, #228]	; (8007b90 <tcp_abandon+0x170>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	4a37      	ldr	r2, [pc, #220]	; (8007b90 <tcp_abandon+0x170>)
 8007ab2:	6013      	str	r3, [r2, #0]
 8007ab4:	e013      	b.n	8007ade <tcp_abandon+0xbe>
 8007ab6:	4b36      	ldr	r3, [pc, #216]	; (8007b90 <tcp_abandon+0x170>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	61fb      	str	r3, [r7, #28]
 8007abc:	e00c      	b.n	8007ad8 <tcp_abandon+0xb8>
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d104      	bne.n	8007ad2 <tcp_abandon+0xb2>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	68da      	ldr	r2, [r3, #12]
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	60da      	str	r2, [r3, #12]
 8007ad0:	e005      	b.n	8007ade <tcp_abandon+0xbe>
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	61fb      	str	r3, [r7, #28]
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1ef      	bne.n	8007abe <tcp_abandon+0x9e>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	60da      	str	r2, [r3, #12]
 8007ae4:	e00b      	b.n	8007afe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	8adb      	ldrh	r3, [r3, #22]
 8007aee:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007af0:	6879      	ldr	r1, [r7, #4]
 8007af2:	4828      	ldr	r0, [pc, #160]	; (8007b94 <tcp_abandon+0x174>)
 8007af4:	f001 fa1c 	bl	8008f30 <tcp_pcb_remove>
 8007af8:	4b27      	ldr	r3, [pc, #156]	; (8007b98 <tcp_abandon+0x178>)
 8007afa:	2201      	movs	r2, #1
 8007afc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d004      	beq.n	8007b10 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 fed4 	bl	80088b8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d004      	beq.n	8007b22 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f000 fecb 	bl	80088b8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d004      	beq.n	8007b34 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fec2 	bl	80088b8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00e      	beq.n	8007b58 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007b3a:	6879      	ldr	r1, [r7, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	8b12      	ldrh	r2, [r2, #24]
 8007b44:	9202      	str	r2, [sp, #8]
 8007b46:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007b48:	9201      	str	r2, [sp, #4]
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	69b9      	ldr	r1, [r7, #24]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f005 fbca 	bl	800d2ec <tcp_rst>
    }
    last_state = pcb->state;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	7d1b      	ldrb	r3, [r3, #20]
 8007b5c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f7ff fd3c 	bl	80075dc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d004      	beq.n	8007b74 <tcp_abandon+0x154>
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f06f 010c 	mvn.w	r1, #12
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	4798      	blx	r3
  }
}
 8007b74:	3728      	adds	r7, #40	; 0x28
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	0801413c 	.word	0x0801413c
 8007b80:	08014280 	.word	0x08014280
 8007b84:	08014180 	.word	0x08014180
 8007b88:	0801429c 	.word	0x0801429c
 8007b8c:	20007198 	.word	0x20007198
 8007b90:	20007194 	.word	0x20007194
 8007b94:	20007188 	.word	0x20007188
 8007b98:	20007184 	.word	0x20007184

08007b9c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007ba4:	2101      	movs	r1, #1
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7ff ff3a 	bl	8007a20 <tcp_abandon>
}
 8007bac:	bf00      	nop
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b088      	sub	sp, #32
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8007bc2:	2304      	movs	r3, #4
 8007bc4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d101      	bne.n	8007bd0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8007bcc:	4b3e      	ldr	r3, [pc, #248]	; (8007cc8 <tcp_bind+0x114>)
 8007bce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d109      	bne.n	8007bea <tcp_bind+0x36>
 8007bd6:	4b3d      	ldr	r3, [pc, #244]	; (8007ccc <tcp_bind+0x118>)
 8007bd8:	f240 22a9 	movw	r2, #681	; 0x2a9
 8007bdc:	493c      	ldr	r1, [pc, #240]	; (8007cd0 <tcp_bind+0x11c>)
 8007bde:	483d      	ldr	r0, [pc, #244]	; (8007cd4 <tcp_bind+0x120>)
 8007be0:	f00a fcc2 	bl	8012568 <iprintf>
 8007be4:	f06f 030f 	mvn.w	r3, #15
 8007be8:	e06a      	b.n	8007cc0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	7d1b      	ldrb	r3, [r3, #20]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d009      	beq.n	8007c06 <tcp_bind+0x52>
 8007bf2:	4b36      	ldr	r3, [pc, #216]	; (8007ccc <tcp_bind+0x118>)
 8007bf4:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007bf8:	4937      	ldr	r1, [pc, #220]	; (8007cd8 <tcp_bind+0x124>)
 8007bfa:	4836      	ldr	r0, [pc, #216]	; (8007cd4 <tcp_bind+0x120>)
 8007bfc:	f00a fcb4 	bl	8012568 <iprintf>
 8007c00:	f06f 0305 	mvn.w	r3, #5
 8007c04:	e05c      	b.n	8007cc0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8007c06:	88fb      	ldrh	r3, [r7, #6]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d109      	bne.n	8007c20 <tcp_bind+0x6c>
    port = tcp_new_port();
 8007c0c:	f000 f9f0 	bl	8007ff0 <tcp_new_port>
 8007c10:	4603      	mov	r3, r0
 8007c12:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8007c14:	88fb      	ldrh	r3, [r7, #6]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d135      	bne.n	8007c86 <tcp_bind+0xd2>
      return ERR_BUF;
 8007c1a:	f06f 0301 	mvn.w	r3, #1
 8007c1e:	e04f      	b.n	8007cc0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8007c20:	2300      	movs	r3, #0
 8007c22:	61fb      	str	r3, [r7, #28]
 8007c24:	e02b      	b.n	8007c7e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007c26:	4a2d      	ldr	r2, [pc, #180]	; (8007cdc <tcp_bind+0x128>)
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	61bb      	str	r3, [r7, #24]
 8007c32:	e01e      	b.n	8007c72 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	8adb      	ldrh	r3, [r3, #22]
 8007c38:	88fa      	ldrh	r2, [r7, #6]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d116      	bne.n	8007c6c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8007c3e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d010      	beq.n	8007c66 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00c      	beq.n	8007c66 <tcp_bind+0xb2>
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d009      	beq.n	8007c66 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d005      	beq.n	8007c66 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d102      	bne.n	8007c6c <tcp_bind+0xb8>
              return ERR_USE;
 8007c66:	f06f 0307 	mvn.w	r3, #7
 8007c6a:	e029      	b.n	8007cc0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	61bb      	str	r3, [r7, #24]
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1dd      	bne.n	8007c34 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	61fb      	str	r3, [r7, #28]
 8007c7e:	69fa      	ldr	r2, [r7, #28]
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	dbcf      	blt.n	8007c26 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00c      	beq.n	8007ca6 <tcp_bind+0xf2>
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d008      	beq.n	8007ca6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d002      	beq.n	8007ca0 <tcp_bind+0xec>
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	e000      	b.n	8007ca2 <tcp_bind+0xee>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	68fa      	ldr	r2, [r7, #12]
 8007ca4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	88fa      	ldrh	r2, [r7, #6]
 8007caa:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8007cac:	4b0c      	ldr	r3, [pc, #48]	; (8007ce0 <tcp_bind+0x12c>)
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	60da      	str	r2, [r3, #12]
 8007cb4:	4a0a      	ldr	r2, [pc, #40]	; (8007ce0 <tcp_bind+0x12c>)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6013      	str	r3, [r2, #0]
 8007cba:	f005 fcd9 	bl	800d670 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3720      	adds	r7, #32
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	08016a9c 	.word	0x08016a9c
 8007ccc:	0801413c 	.word	0x0801413c
 8007cd0:	080142d0 	.word	0x080142d0
 8007cd4:	08014180 	.word	0x08014180
 8007cd8:	080142e8 	.word	0x080142e8
 8007cdc:	08016a64 	.word	0x08016a64
 8007ce0:	20007194 	.word	0x20007194

08007ce4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d106      	bne.n	8007d06 <tcp_accept_null+0x22>
 8007cf8:	4b07      	ldr	r3, [pc, #28]	; (8007d18 <tcp_accept_null+0x34>)
 8007cfa:	f240 320f 	movw	r2, #783	; 0x30f
 8007cfe:	4907      	ldr	r1, [pc, #28]	; (8007d1c <tcp_accept_null+0x38>)
 8007d00:	4807      	ldr	r0, [pc, #28]	; (8007d20 <tcp_accept_null+0x3c>)
 8007d02:	f00a fc31 	bl	8012568 <iprintf>

  tcp_abort(pcb);
 8007d06:	68b8      	ldr	r0, [r7, #8]
 8007d08:	f7ff ff48 	bl	8007b9c <tcp_abort>

  return ERR_ABRT;
 8007d0c:	f06f 030c 	mvn.w	r3, #12
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	0801413c 	.word	0x0801413c
 8007d1c:	08014310 	.word	0x08014310
 8007d20:	08014180 	.word	0x08014180

08007d24 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8007d30:	78fb      	ldrb	r3, [r7, #3]
 8007d32:	2200      	movs	r2, #0
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f806 	bl	8007d48 <tcp_listen_with_backlog_and_err>
 8007d3c:	4603      	mov	r3, r0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b088      	sub	sp, #32
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	460b      	mov	r3, r1
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8007d56:	2300      	movs	r3, #0
 8007d58:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d109      	bne.n	8007d74 <tcp_listen_with_backlog_and_err+0x2c>
 8007d60:	4b47      	ldr	r3, [pc, #284]	; (8007e80 <tcp_listen_with_backlog_and_err+0x138>)
 8007d62:	f240 3259 	movw	r2, #857	; 0x359
 8007d66:	4947      	ldr	r1, [pc, #284]	; (8007e84 <tcp_listen_with_backlog_and_err+0x13c>)
 8007d68:	4847      	ldr	r0, [pc, #284]	; (8007e88 <tcp_listen_with_backlog_and_err+0x140>)
 8007d6a:	f00a fbfd 	bl	8012568 <iprintf>
 8007d6e:	23f0      	movs	r3, #240	; 0xf0
 8007d70:	76fb      	strb	r3, [r7, #27]
 8007d72:	e079      	b.n	8007e68 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	7d1b      	ldrb	r3, [r3, #20]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d009      	beq.n	8007d90 <tcp_listen_with_backlog_and_err+0x48>
 8007d7c:	4b40      	ldr	r3, [pc, #256]	; (8007e80 <tcp_listen_with_backlog_and_err+0x138>)
 8007d7e:	f240 325a 	movw	r2, #858	; 0x35a
 8007d82:	4942      	ldr	r1, [pc, #264]	; (8007e8c <tcp_listen_with_backlog_and_err+0x144>)
 8007d84:	4840      	ldr	r0, [pc, #256]	; (8007e88 <tcp_listen_with_backlog_and_err+0x140>)
 8007d86:	f00a fbef 	bl	8012568 <iprintf>
 8007d8a:	23f1      	movs	r3, #241	; 0xf1
 8007d8c:	76fb      	strb	r3, [r7, #27]
 8007d8e:	e06b      	b.n	8007e68 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	7d1b      	ldrb	r3, [r3, #20]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d104      	bne.n	8007da2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8007d9c:	23f7      	movs	r3, #247	; 0xf7
 8007d9e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007da0:	e062      	b.n	8007e68 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007da2:	2002      	movs	r0, #2
 8007da4:	f7fe fb1e 	bl	80063e4 <memp_malloc>
 8007da8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d102      	bne.n	8007db6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8007db0:	23ff      	movs	r3, #255	; 0xff
 8007db2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007db4:	e058      	b.n	8007e68 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	691a      	ldr	r2, [r3, #16]
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	8ada      	ldrh	r2, [r3, #22]
 8007dc2:	69fb      	ldr	r3, [r7, #28]
 8007dc4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	7d5a      	ldrb	r2, [r3, #21]
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	7a5a      	ldrb	r2, [r3, #9]
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	2200      	movs	r2, #0
 8007de0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	7ada      	ldrb	r2, [r3, #11]
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	7a9a      	ldrb	r2, [r3, #10]
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	8adb      	ldrh	r3, [r3, #22]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d021      	beq.n	8007e46 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8007e02:	4b23      	ldr	r3, [pc, #140]	; (8007e90 <tcp_listen_with_backlog_and_err+0x148>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d105      	bne.n	8007e18 <tcp_listen_with_backlog_and_err+0xd0>
 8007e0c:	4b20      	ldr	r3, [pc, #128]	; (8007e90 <tcp_listen_with_backlog_and_err+0x148>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	4a1f      	ldr	r2, [pc, #124]	; (8007e90 <tcp_listen_with_backlog_and_err+0x148>)
 8007e14:	6013      	str	r3, [r2, #0]
 8007e16:	e013      	b.n	8007e40 <tcp_listen_with_backlog_and_err+0xf8>
 8007e18:	4b1d      	ldr	r3, [pc, #116]	; (8007e90 <tcp_listen_with_backlog_and_err+0x148>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	617b      	str	r3, [r7, #20]
 8007e1e:	e00c      	b.n	8007e3a <tcp_listen_with_backlog_and_err+0xf2>
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d104      	bne.n	8007e34 <tcp_listen_with_backlog_and_err+0xec>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	60da      	str	r2, [r3, #12]
 8007e32:	e005      	b.n	8007e40 <tcp_listen_with_backlog_and_err+0xf8>
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	617b      	str	r3, [r7, #20]
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1ef      	bne.n	8007e20 <tcp_listen_with_backlog_and_err+0xd8>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f7ff fbc8 	bl	80075dc <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	4a11      	ldr	r2, [pc, #68]	; (8007e94 <tcp_listen_with_backlog_and_err+0x14c>)
 8007e50:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8007e52:	4b11      	ldr	r3, [pc, #68]	; (8007e98 <tcp_listen_with_backlog_and_err+0x150>)
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	60da      	str	r2, [r3, #12]
 8007e5a:	4a0f      	ldr	r2, [pc, #60]	; (8007e98 <tcp_listen_with_backlog_and_err+0x150>)
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	f005 fc06 	bl	800d670 <tcp_timer_needed>
  res = ERR_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	7efa      	ldrb	r2, [r7, #27]
 8007e72:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8007e74:	69fb      	ldr	r3, [r7, #28]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3720      	adds	r7, #32
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	0801413c 	.word	0x0801413c
 8007e84:	08014330 	.word	0x08014330
 8007e88:	08014180 	.word	0x08014180
 8007e8c:	08014360 	.word	0x08014360
 8007e90:	20007194 	.word	0x20007194
 8007e94:	08007ce5 	.word	0x08007ce5
 8007e98:	20007190 	.word	0x20007190

08007e9c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d106      	bne.n	8007eb8 <tcp_update_rcv_ann_wnd+0x1c>
 8007eaa:	4b25      	ldr	r3, [pc, #148]	; (8007f40 <tcp_update_rcv_ann_wnd+0xa4>)
 8007eac:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007eb0:	4924      	ldr	r1, [pc, #144]	; (8007f44 <tcp_update_rcv_ann_wnd+0xa8>)
 8007eb2:	4825      	ldr	r0, [pc, #148]	; (8007f48 <tcp_update_rcv_ann_wnd+0xac>)
 8007eb4:	f00a fb58 	bl	8012568 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007ec0:	4413      	add	r3, r2
 8007ec2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007ecc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007ed0:	bf28      	it	cs
 8007ed2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007ed6:	b292      	uxth	r2, r2
 8007ed8:	4413      	add	r3, r2
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	db08      	blt.n	8007ef4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	e020      	b.n	8007f36 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	dd03      	ble.n	8007f0a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f08:	e014      	b.n	8007f34 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f1c:	d306      	bcc.n	8007f2c <tcp_update_rcv_ann_wnd+0x90>
 8007f1e:	4b08      	ldr	r3, [pc, #32]	; (8007f40 <tcp_update_rcv_ann_wnd+0xa4>)
 8007f20:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007f24:	4909      	ldr	r1, [pc, #36]	; (8007f4c <tcp_update_rcv_ann_wnd+0xb0>)
 8007f26:	4808      	ldr	r0, [pc, #32]	; (8007f48 <tcp_update_rcv_ann_wnd+0xac>)
 8007f28:	f00a fb1e 	bl	8012568 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007f34:	2300      	movs	r3, #0
  }
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	0801413c 	.word	0x0801413c
 8007f44:	08014398 	.word	0x08014398
 8007f48:	08014180 	.word	0x08014180
 8007f4c:	080143bc 	.word	0x080143bc

08007f50 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d107      	bne.n	8007f72 <tcp_recved+0x22>
 8007f62:	4b1f      	ldr	r3, [pc, #124]	; (8007fe0 <tcp_recved+0x90>)
 8007f64:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007f68:	491e      	ldr	r1, [pc, #120]	; (8007fe4 <tcp_recved+0x94>)
 8007f6a:	481f      	ldr	r0, [pc, #124]	; (8007fe8 <tcp_recved+0x98>)
 8007f6c:	f00a fafc 	bl	8012568 <iprintf>
 8007f70:	e032      	b.n	8007fd8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	7d1b      	ldrb	r3, [r3, #20]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d106      	bne.n	8007f88 <tcp_recved+0x38>
 8007f7a:	4b19      	ldr	r3, [pc, #100]	; (8007fe0 <tcp_recved+0x90>)
 8007f7c:	f240 32d3 	movw	r2, #979	; 0x3d3
 8007f80:	491a      	ldr	r1, [pc, #104]	; (8007fec <tcp_recved+0x9c>)
 8007f82:	4819      	ldr	r0, [pc, #100]	; (8007fe8 <tcp_recved+0x98>)
 8007f84:	f00a faf0 	bl	8012568 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007f8c:	887b      	ldrh	r3, [r7, #2]
 8007f8e:	4413      	add	r3, r2
 8007f90:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007f92:	89fb      	ldrh	r3, [r7, #14]
 8007f94:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007f98:	d804      	bhi.n	8007fa4 <tcp_recved+0x54>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f9e:	89fa      	ldrh	r2, [r7, #14]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d204      	bcs.n	8007fae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007faa:	851a      	strh	r2, [r3, #40]	; 0x28
 8007fac:	e002      	b.n	8007fb4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	89fa      	ldrh	r2, [r7, #14]
 8007fb2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff ff71 	bl	8007e9c <tcp_update_rcv_ann_wnd>
 8007fba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007fc2:	d309      	bcc.n	8007fd8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	8b5b      	ldrh	r3, [r3, #26]
 8007fc8:	f043 0302 	orr.w	r3, r3, #2
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f004 fbc4 	bl	800c760 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	0801413c 	.word	0x0801413c
 8007fe4:	080143d8 	.word	0x080143d8
 8007fe8:	08014180 	.word	0x08014180
 8007fec:	080143f0 	.word	0x080143f0

08007ff0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8007ffa:	4b1e      	ldr	r3, [pc, #120]	; (8008074 <tcp_new_port+0x84>)
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	3301      	adds	r3, #1
 8008000:	b29a      	uxth	r2, r3
 8008002:	4b1c      	ldr	r3, [pc, #112]	; (8008074 <tcp_new_port+0x84>)
 8008004:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008006:	4b1b      	ldr	r3, [pc, #108]	; (8008074 <tcp_new_port+0x84>)
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800800e:	4293      	cmp	r3, r2
 8008010:	d103      	bne.n	800801a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008012:	4b18      	ldr	r3, [pc, #96]	; (8008074 <tcp_new_port+0x84>)
 8008014:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008018:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800801a:	2300      	movs	r3, #0
 800801c:	71fb      	strb	r3, [r7, #7]
 800801e:	e01e      	b.n	800805e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008020:	79fb      	ldrb	r3, [r7, #7]
 8008022:	4a15      	ldr	r2, [pc, #84]	; (8008078 <tcp_new_port+0x88>)
 8008024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	603b      	str	r3, [r7, #0]
 800802c:	e011      	b.n	8008052 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	8ada      	ldrh	r2, [r3, #22]
 8008032:	4b10      	ldr	r3, [pc, #64]	; (8008074 <tcp_new_port+0x84>)
 8008034:	881b      	ldrh	r3, [r3, #0]
 8008036:	429a      	cmp	r2, r3
 8008038:	d108      	bne.n	800804c <tcp_new_port+0x5c>
        n++;
 800803a:	88bb      	ldrh	r3, [r7, #4]
 800803c:	3301      	adds	r3, #1
 800803e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008040:	88bb      	ldrh	r3, [r7, #4]
 8008042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008046:	d3d8      	bcc.n	8007ffa <tcp_new_port+0xa>
          return 0;
 8008048:	2300      	movs	r3, #0
 800804a:	e00d      	b.n	8008068 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	603b      	str	r3, [r7, #0]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1ea      	bne.n	800802e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008058:	79fb      	ldrb	r3, [r7, #7]
 800805a:	3301      	adds	r3, #1
 800805c:	71fb      	strb	r3, [r7, #7]
 800805e:	79fb      	ldrb	r3, [r7, #7]
 8008060:	2b03      	cmp	r3, #3
 8008062:	d9dd      	bls.n	8008020 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008064:	4b03      	ldr	r3, [pc, #12]	; (8008074 <tcp_new_port+0x84>)
 8008066:	881b      	ldrh	r3, [r3, #0]
}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	2000000a 	.word	0x2000000a
 8008078:	08016a64 	.word	0x08016a64

0800807c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800807c:	b5b0      	push	{r4, r5, r7, lr}
 800807e:	b090      	sub	sp, #64	; 0x40
 8008080:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8008088:	4b94      	ldr	r3, [pc, #592]	; (80082dc <tcp_slowtmr+0x260>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	3301      	adds	r3, #1
 800808e:	4a93      	ldr	r2, [pc, #588]	; (80082dc <tcp_slowtmr+0x260>)
 8008090:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008092:	4b93      	ldr	r3, [pc, #588]	; (80082e0 <tcp_slowtmr+0x264>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	3301      	adds	r3, #1
 8008098:	b2da      	uxtb	r2, r3
 800809a:	4b91      	ldr	r3, [pc, #580]	; (80082e0 <tcp_slowtmr+0x264>)
 800809c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800809e:	2300      	movs	r3, #0
 80080a0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80080a2:	4b90      	ldr	r3, [pc, #576]	; (80082e4 <tcp_slowtmr+0x268>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80080a8:	e29d      	b.n	80085e6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80080aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ac:	7d1b      	ldrb	r3, [r3, #20]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d106      	bne.n	80080c0 <tcp_slowtmr+0x44>
 80080b2:	4b8d      	ldr	r3, [pc, #564]	; (80082e8 <tcp_slowtmr+0x26c>)
 80080b4:	f240 42be 	movw	r2, #1214	; 0x4be
 80080b8:	498c      	ldr	r1, [pc, #560]	; (80082ec <tcp_slowtmr+0x270>)
 80080ba:	488d      	ldr	r0, [pc, #564]	; (80082f0 <tcp_slowtmr+0x274>)
 80080bc:	f00a fa54 	bl	8012568 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80080c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c2:	7d1b      	ldrb	r3, [r3, #20]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d106      	bne.n	80080d6 <tcp_slowtmr+0x5a>
 80080c8:	4b87      	ldr	r3, [pc, #540]	; (80082e8 <tcp_slowtmr+0x26c>)
 80080ca:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80080ce:	4989      	ldr	r1, [pc, #548]	; (80082f4 <tcp_slowtmr+0x278>)
 80080d0:	4887      	ldr	r0, [pc, #540]	; (80082f0 <tcp_slowtmr+0x274>)
 80080d2:	f00a fa49 	bl	8012568 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80080d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d8:	7d1b      	ldrb	r3, [r3, #20]
 80080da:	2b0a      	cmp	r3, #10
 80080dc:	d106      	bne.n	80080ec <tcp_slowtmr+0x70>
 80080de:	4b82      	ldr	r3, [pc, #520]	; (80082e8 <tcp_slowtmr+0x26c>)
 80080e0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80080e4:	4984      	ldr	r1, [pc, #528]	; (80082f8 <tcp_slowtmr+0x27c>)
 80080e6:	4882      	ldr	r0, [pc, #520]	; (80082f0 <tcp_slowtmr+0x274>)
 80080e8:	f00a fa3e 	bl	8012568 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80080ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ee:	7f9a      	ldrb	r2, [r3, #30]
 80080f0:	4b7b      	ldr	r3, [pc, #492]	; (80082e0 <tcp_slowtmr+0x264>)
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d105      	bne.n	8008104 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80080f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80080fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8008102:	e270      	b.n	80085e6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8008104:	4b76      	ldr	r3, [pc, #472]	; (80082e0 <tcp_slowtmr+0x264>)
 8008106:	781a      	ldrb	r2, [r3, #0]
 8008108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800810c:	2300      	movs	r3, #0
 800810e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811a:	7d1b      	ldrb	r3, [r3, #20]
 800811c:	2b02      	cmp	r3, #2
 800811e:	d10a      	bne.n	8008136 <tcp_slowtmr+0xba>
 8008120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008122:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008126:	2b05      	cmp	r3, #5
 8008128:	d905      	bls.n	8008136 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800812a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800812e:	3301      	adds	r3, #1
 8008130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008134:	e11e      	b.n	8008374 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8008136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008138:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800813c:	2b0b      	cmp	r3, #11
 800813e:	d905      	bls.n	800814c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8008140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008144:	3301      	adds	r3, #1
 8008146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800814a:	e113      	b.n	8008374 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008152:	2b00      	cmp	r3, #0
 8008154:	d075      	beq.n	8008242 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8008156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815a:	2b00      	cmp	r3, #0
 800815c:	d006      	beq.n	800816c <tcp_slowtmr+0xf0>
 800815e:	4b62      	ldr	r3, [pc, #392]	; (80082e8 <tcp_slowtmr+0x26c>)
 8008160:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8008164:	4965      	ldr	r1, [pc, #404]	; (80082fc <tcp_slowtmr+0x280>)
 8008166:	4862      	ldr	r0, [pc, #392]	; (80082f0 <tcp_slowtmr+0x274>)
 8008168:	f00a f9fe 	bl	8012568 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800816c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008170:	2b00      	cmp	r3, #0
 8008172:	d106      	bne.n	8008182 <tcp_slowtmr+0x106>
 8008174:	4b5c      	ldr	r3, [pc, #368]	; (80082e8 <tcp_slowtmr+0x26c>)
 8008176:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800817a:	4961      	ldr	r1, [pc, #388]	; (8008300 <tcp_slowtmr+0x284>)
 800817c:	485c      	ldr	r0, [pc, #368]	; (80082f0 <tcp_slowtmr+0x274>)
 800817e:	f00a f9f3 	bl	8012568 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8008182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008184:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8008188:	2b0b      	cmp	r3, #11
 800818a:	d905      	bls.n	8008198 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800818c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008190:	3301      	adds	r3, #1
 8008192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008196:	e0ed      	b.n	8008374 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800819e:	3b01      	subs	r3, #1
 80081a0:	4a58      	ldr	r2, [pc, #352]	; (8008304 <tcp_slowtmr+0x288>)
 80081a2:	5cd3      	ldrb	r3, [r2, r3]
 80081a4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80081a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80081ac:	7c7a      	ldrb	r2, [r7, #17]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d907      	bls.n	80081c2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80081b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80081b8:	3301      	adds	r3, #1
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80081c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80081c8:	7c7a      	ldrb	r2, [r7, #17]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	f200 80d2 	bhi.w	8008374 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80081d0:	2301      	movs	r3, #1
 80081d2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80081d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d108      	bne.n	80081f0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80081de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081e0:	f005 f978 	bl	800d4d4 <tcp_zero_window_probe>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d014      	beq.n	8008214 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80081ea:	2300      	movs	r3, #0
 80081ec:	623b      	str	r3, [r7, #32]
 80081ee:	e011      	b.n	8008214 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80081f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081f6:	4619      	mov	r1, r3
 80081f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081fa:	f004 f82b 	bl	800c254 <tcp_split_unsent_seg>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d107      	bne.n	8008214 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8008204:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008206:	f004 faab 	bl	800c760 <tcp_output>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8008210:	2300      	movs	r3, #0
 8008212:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 80ac 	beq.w	8008374 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800821c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8008224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008226:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800822a:	2b06      	cmp	r3, #6
 800822c:	f200 80a2 	bhi.w	8008374 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8008230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008232:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8008236:	3301      	adds	r3, #1
 8008238:	b2da      	uxtb	r2, r3
 800823a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8008240:	e098      	b.n	8008374 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008244:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008248:	2b00      	cmp	r3, #0
 800824a:	db0f      	blt.n	800826c <tcp_slowtmr+0x1f0>
 800824c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008252:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008256:	4293      	cmp	r3, r2
 8008258:	d008      	beq.n	800826c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800825a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008260:	b29b      	uxth	r3, r3
 8008262:	3301      	adds	r3, #1
 8008264:	b29b      	uxth	r3, r3
 8008266:	b21a      	sxth	r2, r3
 8008268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800826c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8008272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008274:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8008278:	429a      	cmp	r2, r3
 800827a:	db7b      	blt.n	8008374 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800827c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800827e:	f004 fd67 	bl	800cd50 <tcp_rexmit_rto_prepare>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d007      	beq.n	8008298 <tcp_slowtmr+0x21c>
 8008288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800828a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800828c:	2b00      	cmp	r3, #0
 800828e:	d171      	bne.n	8008374 <tcp_slowtmr+0x2f8>
 8008290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008294:	2b00      	cmp	r3, #0
 8008296:	d06d      	beq.n	8008374 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8008298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800829a:	7d1b      	ldrb	r3, [r3, #20]
 800829c:	2b02      	cmp	r3, #2
 800829e:	d03a      	beq.n	8008316 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80082a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082a6:	2b0c      	cmp	r3, #12
 80082a8:	bf28      	it	cs
 80082aa:	230c      	movcs	r3, #12
 80082ac:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80082ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80082b4:	10db      	asrs	r3, r3, #3
 80082b6:	b21b      	sxth	r3, r3
 80082b8:	461a      	mov	r2, r3
 80082ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80082c0:	4413      	add	r3, r2
 80082c2:	7efa      	ldrb	r2, [r7, #27]
 80082c4:	4910      	ldr	r1, [pc, #64]	; (8008308 <tcp_slowtmr+0x28c>)
 80082c6:	5c8a      	ldrb	r2, [r1, r2]
 80082c8:	4093      	lsls	r3, r2
 80082ca:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80082d2:	4293      	cmp	r3, r2
 80082d4:	dc1a      	bgt.n	800830c <tcp_slowtmr+0x290>
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	b21a      	sxth	r2, r3
 80082da:	e019      	b.n	8008310 <tcp_slowtmr+0x294>
 80082dc:	2000718c 	.word	0x2000718c
 80082e0:	2000051a 	.word	0x2000051a
 80082e4:	20007188 	.word	0x20007188
 80082e8:	0801413c 	.word	0x0801413c
 80082ec:	08014480 	.word	0x08014480
 80082f0:	08014180 	.word	0x08014180
 80082f4:	080144ac 	.word	0x080144ac
 80082f8:	080144d8 	.word	0x080144d8
 80082fc:	08014508 	.word	0x08014508
 8008300:	0801453c 	.word	0x0801453c
 8008304:	08016a5c 	.word	0x08016a5c
 8008308:	08016a4c 	.word	0x08016a4c
 800830c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8008310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008312:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8008316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008318:	2200      	movs	r2, #0
 800831a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800831c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008324:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008328:	4293      	cmp	r3, r2
 800832a:	bf28      	it	cs
 800832c:	4613      	movcs	r3, r2
 800832e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008330:	8a7b      	ldrh	r3, [r7, #18]
 8008332:	085b      	lsrs	r3, r3, #1
 8008334:	b29a      	uxth	r2, r3
 8008336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008338:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800833c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008344:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008346:	005b      	lsls	r3, r3, #1
 8008348:	b29b      	uxth	r3, r3
 800834a:	429a      	cmp	r2, r3
 800834c:	d206      	bcs.n	800835c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	b29a      	uxth	r2, r3
 8008356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008358:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800835c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8008360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008362:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8008366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008368:	2200      	movs	r2, #0
 800836a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800836e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008370:	f004 fd5e 	bl	800ce30 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8008374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008376:	7d1b      	ldrb	r3, [r3, #20]
 8008378:	2b06      	cmp	r3, #6
 800837a:	d111      	bne.n	80083a0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	8b5b      	ldrh	r3, [r3, #26]
 8008380:	f003 0310 	and.w	r3, r3, #16
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008388:	4b9c      	ldr	r3, [pc, #624]	; (80085fc <tcp_slowtmr+0x580>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b28      	cmp	r3, #40	; 0x28
 8008394:	d904      	bls.n	80083a0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8008396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800839a:	3301      	adds	r3, #1
 800839c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80083a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a2:	7a5b      	ldrb	r3, [r3, #9]
 80083a4:	f003 0308 	and.w	r3, r3, #8
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d04a      	beq.n	8008442 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80083ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ae:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80083b0:	2b04      	cmp	r3, #4
 80083b2:	d003      	beq.n	80083bc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80083b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80083b8:	2b07      	cmp	r3, #7
 80083ba:	d142      	bne.n	8008442 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80083bc:	4b8f      	ldr	r3, [pc, #572]	; (80085fc <tcp_slowtmr+0x580>)
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80083c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80083cc:	4b8c      	ldr	r3, [pc, #560]	; (8008600 <tcp_slowtmr+0x584>)
 80083ce:	440b      	add	r3, r1
 80083d0:	498c      	ldr	r1, [pc, #560]	; (8008604 <tcp_slowtmr+0x588>)
 80083d2:	fba1 1303 	umull	r1, r3, r1, r3
 80083d6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80083d8:	429a      	cmp	r2, r3
 80083da:	d90a      	bls.n	80083f2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80083dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80083e0:	3301      	adds	r3, #1
 80083e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80083e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80083ea:	3301      	adds	r3, #1
 80083ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80083f0:	e027      	b.n	8008442 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80083f2:	4b82      	ldr	r3, [pc, #520]	; (80085fc <tcp_slowtmr+0x580>)
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80083fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fe:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8008402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008404:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008408:	4618      	mov	r0, r3
 800840a:	4b7f      	ldr	r3, [pc, #508]	; (8008608 <tcp_slowtmr+0x58c>)
 800840c:	fb03 f300 	mul.w	r3, r3, r0
 8008410:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008412:	497c      	ldr	r1, [pc, #496]	; (8008604 <tcp_slowtmr+0x588>)
 8008414:	fba1 1303 	umull	r1, r3, r1, r3
 8008418:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800841a:	429a      	cmp	r2, r3
 800841c:	d911      	bls.n	8008442 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800841e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008420:	f005 f818 	bl	800d454 <tcp_keepalive>
 8008424:	4603      	mov	r3, r0
 8008426:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800842a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800842e:	2b00      	cmp	r3, #0
 8008430:	d107      	bne.n	8008442 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8008432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008434:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8008438:	3301      	adds	r3, #1
 800843a:	b2da      	uxtb	r2, r3
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8008442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008446:	2b00      	cmp	r3, #0
 8008448:	d011      	beq.n	800846e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800844a:	4b6c      	ldr	r3, [pc, #432]	; (80085fc <tcp_slowtmr+0x580>)
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	1ad2      	subs	r2, r2, r3
 8008454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008456:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800845a:	4619      	mov	r1, r3
 800845c:	460b      	mov	r3, r1
 800845e:	005b      	lsls	r3, r3, #1
 8008460:	440b      	add	r3, r1
 8008462:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008464:	429a      	cmp	r2, r3
 8008466:	d302      	bcc.n	800846e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8008468:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800846a:	f000 fec5 	bl	80091f8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008470:	7d1b      	ldrb	r3, [r3, #20]
 8008472:	2b03      	cmp	r3, #3
 8008474:	d10b      	bne.n	800848e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008476:	4b61      	ldr	r3, [pc, #388]	; (80085fc <tcp_slowtmr+0x580>)
 8008478:	681a      	ldr	r2, [r3, #0]
 800847a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	2b28      	cmp	r3, #40	; 0x28
 8008482:	d904      	bls.n	800848e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8008484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008488:	3301      	adds	r3, #1
 800848a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800848e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008490:	7d1b      	ldrb	r3, [r3, #20]
 8008492:	2b09      	cmp	r3, #9
 8008494:	d10b      	bne.n	80084ae <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008496:	4b59      	ldr	r3, [pc, #356]	; (80085fc <tcp_slowtmr+0x580>)
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	2bf0      	cmp	r3, #240	; 0xf0
 80084a2:	d904      	bls.n	80084ae <tcp_slowtmr+0x432>
        ++pcb_remove;
 80084a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084a8:	3301      	adds	r3, #1
 80084aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80084ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d060      	beq.n	8008578 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80084b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084bc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80084be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80084c0:	f000 fce6 	bl	8008e90 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d010      	beq.n	80084ec <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80084ca:	4b50      	ldr	r3, [pc, #320]	; (800860c <tcp_slowtmr+0x590>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d106      	bne.n	80084e2 <tcp_slowtmr+0x466>
 80084d4:	4b4e      	ldr	r3, [pc, #312]	; (8008610 <tcp_slowtmr+0x594>)
 80084d6:	f240 526d 	movw	r2, #1389	; 0x56d
 80084da:	494e      	ldr	r1, [pc, #312]	; (8008614 <tcp_slowtmr+0x598>)
 80084dc:	484e      	ldr	r0, [pc, #312]	; (8008618 <tcp_slowtmr+0x59c>)
 80084de:	f00a f843 	bl	8012568 <iprintf>
        prev->next = pcb->next;
 80084e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e8:	60da      	str	r2, [r3, #12]
 80084ea:	e00f      	b.n	800850c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80084ec:	4b47      	ldr	r3, [pc, #284]	; (800860c <tcp_slowtmr+0x590>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d006      	beq.n	8008504 <tcp_slowtmr+0x488>
 80084f6:	4b46      	ldr	r3, [pc, #280]	; (8008610 <tcp_slowtmr+0x594>)
 80084f8:	f240 5271 	movw	r2, #1393	; 0x571
 80084fc:	4947      	ldr	r1, [pc, #284]	; (800861c <tcp_slowtmr+0x5a0>)
 80084fe:	4846      	ldr	r0, [pc, #280]	; (8008618 <tcp_slowtmr+0x59c>)
 8008500:	f00a f832 	bl	8012568 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	4a40      	ldr	r2, [pc, #256]	; (800860c <tcp_slowtmr+0x590>)
 800850a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800850c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008510:	2b00      	cmp	r3, #0
 8008512:	d013      	beq.n	800853c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008516:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8008518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800851c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008520:	3304      	adds	r3, #4
 8008522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008524:	8ad2      	ldrh	r2, [r2, #22]
 8008526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008528:	8b09      	ldrh	r1, [r1, #24]
 800852a:	9102      	str	r1, [sp, #8]
 800852c:	9201      	str	r2, [sp, #4]
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	462b      	mov	r3, r5
 8008532:	4622      	mov	r2, r4
 8008534:	4601      	mov	r1, r0
 8008536:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008538:	f004 fed8 	bl	800d2ec <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008544:	7d1b      	ldrb	r3, [r3, #20]
 8008546:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800854c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008552:	6838      	ldr	r0, [r7, #0]
 8008554:	f7ff f842 	bl	80075dc <tcp_free>

      tcp_active_pcbs_changed = 0;
 8008558:	4b31      	ldr	r3, [pc, #196]	; (8008620 <tcp_slowtmr+0x5a4>)
 800855a:	2200      	movs	r2, #0
 800855c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d004      	beq.n	800856e <tcp_slowtmr+0x4f2>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f06f 010c 	mvn.w	r1, #12
 800856a:	68b8      	ldr	r0, [r7, #8]
 800856c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800856e:	4b2c      	ldr	r3, [pc, #176]	; (8008620 <tcp_slowtmr+0x5a4>)
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d037      	beq.n	80085e6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8008576:	e592      	b.n	800809e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8008578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8008582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008584:	7f1b      	ldrb	r3, [r3, #28]
 8008586:	3301      	adds	r3, #1
 8008588:	b2da      	uxtb	r2, r3
 800858a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008590:	7f1a      	ldrb	r2, [r3, #28]
 8008592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008594:	7f5b      	ldrb	r3, [r3, #29]
 8008596:	429a      	cmp	r2, r3
 8008598:	d325      	bcc.n	80085e6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800859a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859c:	2200      	movs	r2, #0
 800859e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80085a0:	4b1f      	ldr	r3, [pc, #124]	; (8008620 <tcp_slowtmr+0x5a4>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80085a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00b      	beq.n	80085c8 <tcp_slowtmr+0x54c>
 80085b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085b8:	6912      	ldr	r2, [r2, #16]
 80085ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085bc:	4610      	mov	r0, r2
 80085be:	4798      	blx	r3
 80085c0:	4603      	mov	r3, r0
 80085c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80085c6:	e002      	b.n	80085ce <tcp_slowtmr+0x552>
 80085c8:	2300      	movs	r3, #0
 80085ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80085ce:	4b14      	ldr	r3, [pc, #80]	; (8008620 <tcp_slowtmr+0x5a4>)
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d000      	beq.n	80085d8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80085d6:	e562      	b.n	800809e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80085d8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d102      	bne.n	80085e6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80085e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085e2:	f004 f8bd 	bl	800c760 <tcp_output>
  while (pcb != NULL) {
 80085e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f47f ad5e 	bne.w	80080aa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80085ee:	2300      	movs	r3, #0
 80085f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80085f2:	4b0c      	ldr	r3, [pc, #48]	; (8008624 <tcp_slowtmr+0x5a8>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80085f8:	e069      	b.n	80086ce <tcp_slowtmr+0x652>
 80085fa:	bf00      	nop
 80085fc:	2000718c 	.word	0x2000718c
 8008600:	000a4cb8 	.word	0x000a4cb8
 8008604:	10624dd3 	.word	0x10624dd3
 8008608:	000124f8 	.word	0x000124f8
 800860c:	20007188 	.word	0x20007188
 8008610:	0801413c 	.word	0x0801413c
 8008614:	08014574 	.word	0x08014574
 8008618:	08014180 	.word	0x08014180
 800861c:	080145a0 	.word	0x080145a0
 8008620:	20007184 	.word	0x20007184
 8008624:	20007198 	.word	0x20007198
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862a:	7d1b      	ldrb	r3, [r3, #20]
 800862c:	2b0a      	cmp	r3, #10
 800862e:	d006      	beq.n	800863e <tcp_slowtmr+0x5c2>
 8008630:	4b2a      	ldr	r3, [pc, #168]	; (80086dc <tcp_slowtmr+0x660>)
 8008632:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008636:	492a      	ldr	r1, [pc, #168]	; (80086e0 <tcp_slowtmr+0x664>)
 8008638:	482a      	ldr	r0, [pc, #168]	; (80086e4 <tcp_slowtmr+0x668>)
 800863a:	f009 ff95 	bl	8012568 <iprintf>
    pcb_remove = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008644:	4b28      	ldr	r3, [pc, #160]	; (80086e8 <tcp_slowtmr+0x66c>)
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	2bf0      	cmp	r3, #240	; 0xf0
 8008650:	d904      	bls.n	800865c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8008652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008656:	3301      	adds	r3, #1
 8008658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800865c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008660:	2b00      	cmp	r3, #0
 8008662:	d02f      	beq.n	80086c4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008666:	f000 fc13 	bl	8008e90 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866c:	2b00      	cmp	r3, #0
 800866e:	d010      	beq.n	8008692 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008670:	4b1e      	ldr	r3, [pc, #120]	; (80086ec <tcp_slowtmr+0x670>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008676:	429a      	cmp	r2, r3
 8008678:	d106      	bne.n	8008688 <tcp_slowtmr+0x60c>
 800867a:	4b18      	ldr	r3, [pc, #96]	; (80086dc <tcp_slowtmr+0x660>)
 800867c:	f240 52af 	movw	r2, #1455	; 0x5af
 8008680:	491b      	ldr	r1, [pc, #108]	; (80086f0 <tcp_slowtmr+0x674>)
 8008682:	4818      	ldr	r0, [pc, #96]	; (80086e4 <tcp_slowtmr+0x668>)
 8008684:	f009 ff70 	bl	8012568 <iprintf>
        prev->next = pcb->next;
 8008688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868e:	60da      	str	r2, [r3, #12]
 8008690:	e00f      	b.n	80086b2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008692:	4b16      	ldr	r3, [pc, #88]	; (80086ec <tcp_slowtmr+0x670>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008698:	429a      	cmp	r2, r3
 800869a:	d006      	beq.n	80086aa <tcp_slowtmr+0x62e>
 800869c:	4b0f      	ldr	r3, [pc, #60]	; (80086dc <tcp_slowtmr+0x660>)
 800869e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80086a2:	4914      	ldr	r1, [pc, #80]	; (80086f4 <tcp_slowtmr+0x678>)
 80086a4:	480f      	ldr	r0, [pc, #60]	; (80086e4 <tcp_slowtmr+0x668>)
 80086a6:	f009 ff5f 	bl	8012568 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80086aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	4a0f      	ldr	r2, [pc, #60]	; (80086ec <tcp_slowtmr+0x670>)
 80086b0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80086b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80086b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80086bc:	69f8      	ldr	r0, [r7, #28]
 80086be:	f7fe ff8d 	bl	80075dc <tcp_free>
 80086c2:	e004      	b.n	80086ce <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80086c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80086c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80086ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1a9      	bne.n	8008628 <tcp_slowtmr+0x5ac>
    }
  }
}
 80086d4:	bf00      	nop
 80086d6:	3730      	adds	r7, #48	; 0x30
 80086d8:	46bd      	mov	sp, r7
 80086da:	bdb0      	pop	{r4, r5, r7, pc}
 80086dc:	0801413c 	.word	0x0801413c
 80086e0:	080145cc 	.word	0x080145cc
 80086e4:	08014180 	.word	0x08014180
 80086e8:	2000718c 	.word	0x2000718c
 80086ec:	20007198 	.word	0x20007198
 80086f0:	080145fc 	.word	0x080145fc
 80086f4:	08014624 	.word	0x08014624

080086f8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80086fe:	4b2d      	ldr	r3, [pc, #180]	; (80087b4 <tcp_fasttmr+0xbc>)
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	3301      	adds	r3, #1
 8008704:	b2da      	uxtb	r2, r3
 8008706:	4b2b      	ldr	r3, [pc, #172]	; (80087b4 <tcp_fasttmr+0xbc>)
 8008708:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800870a:	4b2b      	ldr	r3, [pc, #172]	; (80087b8 <tcp_fasttmr+0xc0>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008710:	e048      	b.n	80087a4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	7f9a      	ldrb	r2, [r3, #30]
 8008716:	4b27      	ldr	r3, [pc, #156]	; (80087b4 <tcp_fasttmr+0xbc>)
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	429a      	cmp	r2, r3
 800871c:	d03f      	beq.n	800879e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800871e:	4b25      	ldr	r3, [pc, #148]	; (80087b4 <tcp_fasttmr+0xbc>)
 8008720:	781a      	ldrb	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	8b5b      	ldrh	r3, [r3, #26]
 800872a:	f003 0301 	and.w	r3, r3, #1
 800872e:	2b00      	cmp	r3, #0
 8008730:	d010      	beq.n	8008754 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	8b5b      	ldrh	r3, [r3, #26]
 8008736:	f043 0302 	orr.w	r3, r3, #2
 800873a:	b29a      	uxth	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f004 f80d 	bl	800c760 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	8b5b      	ldrh	r3, [r3, #26]
 800874a:	f023 0303 	bic.w	r3, r3, #3
 800874e:	b29a      	uxth	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	8b5b      	ldrh	r3, [r3, #26]
 8008758:	f003 0308 	and.w	r3, r3, #8
 800875c:	2b00      	cmp	r3, #0
 800875e:	d009      	beq.n	8008774 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	8b5b      	ldrh	r3, [r3, #26]
 8008764:	f023 0308 	bic.w	r3, r3, #8
 8008768:	b29a      	uxth	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff f8c4 	bl	80078fc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00a      	beq.n	8008798 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008782:	4b0e      	ldr	r3, [pc, #56]	; (80087bc <tcp_fasttmr+0xc4>)
 8008784:	2200      	movs	r2, #0
 8008786:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f819 	bl	80087c0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800878e:	4b0b      	ldr	r3, [pc, #44]	; (80087bc <tcp_fasttmr+0xc4>)
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d000      	beq.n	8008798 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008796:	e7b8      	b.n	800870a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	607b      	str	r3, [r7, #4]
 800879c:	e002      	b.n	80087a4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1b3      	bne.n	8008712 <tcp_fasttmr+0x1a>
    }
  }
}
 80087aa:	bf00      	nop
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	2000051a 	.word	0x2000051a
 80087b8:	20007188 	.word	0x20007188
 80087bc:	20007184 	.word	0x20007184

080087c0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80087c0:	b590      	push	{r4, r7, lr}
 80087c2:	b085      	sub	sp, #20
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d109      	bne.n	80087e2 <tcp_process_refused_data+0x22>
 80087ce:	4b37      	ldr	r3, [pc, #220]	; (80088ac <tcp_process_refused_data+0xec>)
 80087d0:	f240 6209 	movw	r2, #1545	; 0x609
 80087d4:	4936      	ldr	r1, [pc, #216]	; (80088b0 <tcp_process_refused_data+0xf0>)
 80087d6:	4837      	ldr	r0, [pc, #220]	; (80088b4 <tcp_process_refused_data+0xf4>)
 80087d8:	f009 fec6 	bl	8012568 <iprintf>
 80087dc:	f06f 030f 	mvn.w	r3, #15
 80087e0:	e060      	b.n	80088a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087e6:	7b5b      	ldrb	r3, [r3, #13]
 80087e8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087ee:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00b      	beq.n	8008818 <tcp_process_refused_data+0x58>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6918      	ldr	r0, [r3, #16]
 800880a:	2300      	movs	r3, #0
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	6879      	ldr	r1, [r7, #4]
 8008810:	47a0      	blx	r4
 8008812:	4603      	mov	r3, r0
 8008814:	73fb      	strb	r3, [r7, #15]
 8008816:	e007      	b.n	8008828 <tcp_process_refused_data+0x68>
 8008818:	2300      	movs	r3, #0
 800881a:	68ba      	ldr	r2, [r7, #8]
 800881c:	6879      	ldr	r1, [r7, #4]
 800881e:	2000      	movs	r0, #0
 8008820:	f000 f8c0 	bl	80089a4 <tcp_recv_null>
 8008824:	4603      	mov	r3, r0
 8008826:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d12a      	bne.n	8008886 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008830:	7bbb      	ldrb	r3, [r7, #14]
 8008832:	f003 0320 	and.w	r3, r3, #32
 8008836:	2b00      	cmp	r3, #0
 8008838:	d033      	beq.n	80088a2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800883e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008842:	d005      	beq.n	8008850 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008848:	3301      	adds	r3, #1
 800884a:	b29a      	uxth	r2, r3
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00b      	beq.n	8008872 <tcp_process_refused_data+0xb2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6918      	ldr	r0, [r3, #16]
 8008864:	2300      	movs	r3, #0
 8008866:	2200      	movs	r2, #0
 8008868:	6879      	ldr	r1, [r7, #4]
 800886a:	47a0      	blx	r4
 800886c:	4603      	mov	r3, r0
 800886e:	73fb      	strb	r3, [r7, #15]
 8008870:	e001      	b.n	8008876 <tcp_process_refused_data+0xb6>
 8008872:	2300      	movs	r3, #0
 8008874:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800887a:	f113 0f0d 	cmn.w	r3, #13
 800887e:	d110      	bne.n	80088a2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008880:	f06f 030c 	mvn.w	r3, #12
 8008884:	e00e      	b.n	80088a4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800888a:	f113 0f0d 	cmn.w	r3, #13
 800888e:	d102      	bne.n	8008896 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008890:	f06f 030c 	mvn.w	r3, #12
 8008894:	e006      	b.n	80088a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800889c:	f06f 0304 	mvn.w	r3, #4
 80088a0:	e000      	b.n	80088a4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd90      	pop	{r4, r7, pc}
 80088ac:	0801413c 	.word	0x0801413c
 80088b0:	0801464c 	.word	0x0801464c
 80088b4:	08014180 	.word	0x08014180

080088b8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80088c0:	e007      	b.n	80088d2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f809 	bl	80088e0 <tcp_seg_free>
    seg = next;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1f4      	bne.n	80088c2 <tcp_segs_free+0xa>
  }
}
 80088d8:	bf00      	nop
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00c      	beq.n	8008908 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d004      	beq.n	8008900 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fe fbbe 	bl	800707c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	2003      	movs	r0, #3
 8008904:	f7fd fdba 	bl	800647c <memp_free>
  }
}
 8008908:	bf00      	nop
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d107      	bne.n	8008932 <tcp_setprio+0x22>
 8008922:	4b07      	ldr	r3, [pc, #28]	; (8008940 <tcp_setprio+0x30>)
 8008924:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8008928:	4906      	ldr	r1, [pc, #24]	; (8008944 <tcp_setprio+0x34>)
 800892a:	4807      	ldr	r0, [pc, #28]	; (8008948 <tcp_setprio+0x38>)
 800892c:	f009 fe1c 	bl	8012568 <iprintf>
 8008930:	e002      	b.n	8008938 <tcp_setprio+0x28>

  pcb->prio = prio;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	78fa      	ldrb	r2, [r7, #3]
 8008936:	755a      	strb	r2, [r3, #21]
}
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	0801413c 	.word	0x0801413c
 8008944:	08014674 	.word	0x08014674
 8008948:	08014180 	.word	0x08014180

0800894c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d106      	bne.n	8008968 <tcp_seg_copy+0x1c>
 800895a:	4b0f      	ldr	r3, [pc, #60]	; (8008998 <tcp_seg_copy+0x4c>)
 800895c:	f240 6282 	movw	r2, #1666	; 0x682
 8008960:	490e      	ldr	r1, [pc, #56]	; (800899c <tcp_seg_copy+0x50>)
 8008962:	480f      	ldr	r0, [pc, #60]	; (80089a0 <tcp_seg_copy+0x54>)
 8008964:	f009 fe00 	bl	8012568 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008968:	2003      	movs	r0, #3
 800896a:	f7fd fd3b 	bl	80063e4 <memp_malloc>
 800896e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <tcp_seg_copy+0x2e>
    return NULL;
 8008976:	2300      	movs	r3, #0
 8008978:	e00a      	b.n	8008990 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800897a:	2210      	movs	r2, #16
 800897c:	6879      	ldr	r1, [r7, #4]
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f009 fddf 	bl	8012542 <memcpy>
  pbuf_ref(cseg->p);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	4618      	mov	r0, r3
 800898a:	f7fe fc17 	bl	80071bc <pbuf_ref>
  return cseg;
 800898e:	68fb      	ldr	r3, [r7, #12]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	0801413c 	.word	0x0801413c
 800899c:	08014690 	.word	0x08014690
 80089a0:	08014180 	.word	0x08014180

080089a4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
 80089b0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d109      	bne.n	80089cc <tcp_recv_null+0x28>
 80089b8:	4b12      	ldr	r3, [pc, #72]	; (8008a04 <tcp_recv_null+0x60>)
 80089ba:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80089be:	4912      	ldr	r1, [pc, #72]	; (8008a08 <tcp_recv_null+0x64>)
 80089c0:	4812      	ldr	r0, [pc, #72]	; (8008a0c <tcp_recv_null+0x68>)
 80089c2:	f009 fdd1 	bl	8012568 <iprintf>
 80089c6:	f06f 030f 	mvn.w	r3, #15
 80089ca:	e016      	b.n	80089fa <tcp_recv_null+0x56>

  if (p != NULL) {
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d009      	beq.n	80089e6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	891b      	ldrh	r3, [r3, #8]
 80089d6:	4619      	mov	r1, r3
 80089d8:	68b8      	ldr	r0, [r7, #8]
 80089da:	f7ff fab9 	bl	8007f50 <tcp_recved>
    pbuf_free(p);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f7fe fb4c 	bl	800707c <pbuf_free>
 80089e4:	e008      	b.n	80089f8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80089e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d104      	bne.n	80089f8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80089ee:	68b8      	ldr	r0, [r7, #8]
 80089f0:	f7fe ffea 	bl	80079c8 <tcp_close>
 80089f4:	4603      	mov	r3, r0
 80089f6:	e000      	b.n	80089fa <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	0801413c 	.word	0x0801413c
 8008a08:	080146ac 	.word	0x080146ac
 8008a0c:	08014180 	.word	0x08014180

08008a10 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	4603      	mov	r3, r0
 8008a18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	db01      	blt.n	8008a26 <tcp_kill_prio+0x16>
 8008a22:	79fb      	ldrb	r3, [r7, #7]
 8008a24:	e000      	b.n	8008a28 <tcp_kill_prio+0x18>
 8008a26:	237f      	movs	r3, #127	; 0x7f
 8008a28:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8008a2a:	7afb      	ldrb	r3, [r7, #11]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d034      	beq.n	8008a9a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008a30:	7afb      	ldrb	r3, [r7, #11]
 8008a32:	3b01      	subs	r3, #1
 8008a34:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8008a36:	2300      	movs	r3, #0
 8008a38:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a3e:	4b19      	ldr	r3, [pc, #100]	; (8008aa4 <tcp_kill_prio+0x94>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	617b      	str	r3, [r7, #20]
 8008a44:	e01f      	b.n	8008a86 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	7d5b      	ldrb	r3, [r3, #21]
 8008a4a:	7afa      	ldrb	r2, [r7, #11]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d80c      	bhi.n	8008a6a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008a54:	7afa      	ldrb	r2, [r7, #11]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d112      	bne.n	8008a80 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008a5a:	4b13      	ldr	r3, [pc, #76]	; (8008aa8 <tcp_kill_prio+0x98>)
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d80a      	bhi.n	8008a80 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008a6a:	4b0f      	ldr	r3, [pc, #60]	; (8008aa8 <tcp_kill_prio+0x98>)
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	6a1b      	ldr	r3, [r3, #32]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	7d5b      	ldrb	r3, [r3, #21]
 8008a7e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	617b      	str	r3, [r7, #20]
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1dc      	bne.n	8008a46 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d004      	beq.n	8008a9c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008a92:	6938      	ldr	r0, [r7, #16]
 8008a94:	f7ff f882 	bl	8007b9c <tcp_abort>
 8008a98:	e000      	b.n	8008a9c <tcp_kill_prio+0x8c>
    return;
 8008a9a:	bf00      	nop
  }
}
 8008a9c:	3718      	adds	r7, #24
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20007188 	.word	0x20007188
 8008aa8:	2000718c 	.word	0x2000718c

08008aac <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	d009      	beq.n	8008ad0 <tcp_kill_state+0x24>
 8008abc:	79fb      	ldrb	r3, [r7, #7]
 8008abe:	2b09      	cmp	r3, #9
 8008ac0:	d006      	beq.n	8008ad0 <tcp_kill_state+0x24>
 8008ac2:	4b1a      	ldr	r3, [pc, #104]	; (8008b2c <tcp_kill_state+0x80>)
 8008ac4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008ac8:	4919      	ldr	r1, [pc, #100]	; (8008b30 <tcp_kill_state+0x84>)
 8008aca:	481a      	ldr	r0, [pc, #104]	; (8008b34 <tcp_kill_state+0x88>)
 8008acc:	f009 fd4c 	bl	8012568 <iprintf>

  inactivity = 0;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ad8:	4b17      	ldr	r3, [pc, #92]	; (8008b38 <tcp_kill_state+0x8c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	617b      	str	r3, [r7, #20]
 8008ade:	e017      	b.n	8008b10 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	7d1b      	ldrb	r3, [r3, #20]
 8008ae4:	79fa      	ldrb	r2, [r7, #7]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d10f      	bne.n	8008b0a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008aea:	4b14      	ldr	r3, [pc, #80]	; (8008b3c <tcp_kill_state+0x90>)
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d807      	bhi.n	8008b0a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8008afa:	4b10      	ldr	r3, [pc, #64]	; (8008b3c <tcp_kill_state+0x90>)
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	617b      	str	r3, [r7, #20]
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d1e4      	bne.n	8008ae0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	6938      	ldr	r0, [r7, #16]
 8008b20:	f7fe ff7e 	bl	8007a20 <tcp_abandon>
  }
}
 8008b24:	bf00      	nop
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	0801413c 	.word	0x0801413c
 8008b30:	080146c8 	.word	0x080146c8
 8008b34:	08014180 	.word	0x08014180
 8008b38:	20007188 	.word	0x20007188
 8008b3c:	2000718c 	.word	0x2000718c

08008b40 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8008b46:	2300      	movs	r3, #0
 8008b48:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b4e:	4b12      	ldr	r3, [pc, #72]	; (8008b98 <tcp_kill_timewait+0x58>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	60fb      	str	r3, [r7, #12]
 8008b54:	e012      	b.n	8008b7c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008b56:	4b11      	ldr	r3, [pc, #68]	; (8008b9c <tcp_kill_timewait+0x5c>)
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d807      	bhi.n	8008b76 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8008b66:	4b0d      	ldr	r3, [pc, #52]	; (8008b9c <tcp_kill_timewait+0x5c>)
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6a1b      	ldr	r3, [r3, #32]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	60fb      	str	r3, [r7, #12]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e9      	bne.n	8008b56 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008b88:	68b8      	ldr	r0, [r7, #8]
 8008b8a:	f7ff f807 	bl	8007b9c <tcp_abort>
  }
}
 8008b8e:	bf00      	nop
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	20007198 	.word	0x20007198
 8008b9c:	2000718c 	.word	0x2000718c

08008ba0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008ba6:	4b10      	ldr	r3, [pc, #64]	; (8008be8 <tcp_handle_closepend+0x48>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008bac:	e014      	b.n	8008bd8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	8b5b      	ldrh	r3, [r3, #26]
 8008bb8:	f003 0308 	and.w	r3, r3, #8
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d009      	beq.n	8008bd4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	8b5b      	ldrh	r3, [r3, #26]
 8008bc4:	f023 0308 	bic.w	r3, r3, #8
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7fe fe94 	bl	80078fc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1e7      	bne.n	8008bae <tcp_handle_closepend+0xe>
  }
}
 8008bde:	bf00      	nop
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	20007188 	.word	0x20007188

08008bec <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008bf6:	2001      	movs	r0, #1
 8008bf8:	f7fd fbf4 	bl	80063e4 <memp_malloc>
 8008bfc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d126      	bne.n	8008c52 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008c04:	f7ff ffcc 	bl	8008ba0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8008c08:	f7ff ff9a 	bl	8008b40 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008c0c:	2001      	movs	r0, #1
 8008c0e:	f7fd fbe9 	bl	80063e4 <memp_malloc>
 8008c12:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d11b      	bne.n	8008c52 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8008c1a:	2009      	movs	r0, #9
 8008c1c:	f7ff ff46 	bl	8008aac <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008c20:	2001      	movs	r0, #1
 8008c22:	f7fd fbdf 	bl	80063e4 <memp_malloc>
 8008c26:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d111      	bne.n	8008c52 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008c2e:	2008      	movs	r0, #8
 8008c30:	f7ff ff3c 	bl	8008aac <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008c34:	2001      	movs	r0, #1
 8008c36:	f7fd fbd5 	bl	80063e4 <memp_malloc>
 8008c3a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d107      	bne.n	8008c52 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008c42:	79fb      	ldrb	r3, [r7, #7]
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7ff fee3 	bl	8008a10 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008c4a:	2001      	movs	r0, #1
 8008c4c:	f7fd fbca 	bl	80063e4 <memp_malloc>
 8008c50:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d03f      	beq.n	8008cd8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008c58:	229c      	movs	r2, #156	; 0x9c
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f009 fc7b 	bl	8012558 <memset>
    pcb->prio = prio;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	79fa      	ldrb	r2, [r7, #7]
 8008c66:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008c6e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008c78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	22ff      	movs	r2, #255	; 0xff
 8008c86:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008c8e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2206      	movs	r2, #6
 8008c94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2206      	movs	r2, #6
 8008c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ca4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008cae:	4b0d      	ldr	r3, [pc, #52]	; (8008ce4 <tcp_alloc+0xf8>)
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008cb6:	4b0c      	ldr	r3, [pc, #48]	; (8008ce8 <tcp_alloc+0xfc>)
 8008cb8:	781a      	ldrb	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008cc4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4a08      	ldr	r2, [pc, #32]	; (8008cec <tcp_alloc+0x100>)
 8008ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4a07      	ldr	r2, [pc, #28]	; (8008cf0 <tcp_alloc+0x104>)
 8008cd4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	2000718c 	.word	0x2000718c
 8008ce8:	2000051a 	.word	0x2000051a
 8008cec:	080089a5 	.word	0x080089a5
 8008cf0:	006ddd00 	.word	0x006ddd00

08008cf4 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008cfe:	2040      	movs	r0, #64	; 0x40
 8008d00:	f7ff ff74 	bl	8008bec <tcp_alloc>
 8008d04:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8008d06:	68fb      	ldr	r3, [r7, #12]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	683a      	ldr	r2, [r7, #0]
 8008d24:	611a      	str	r2, [r3, #16]
  }
}
 8008d26:	bf00      	nop
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00e      	beq.n	8008d62 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	7d1b      	ldrb	r3, [r3, #20]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d106      	bne.n	8008d5a <tcp_recv+0x26>
 8008d4c:	4b07      	ldr	r3, [pc, #28]	; (8008d6c <tcp_recv+0x38>)
 8008d4e:	f240 72df 	movw	r2, #2015	; 0x7df
 8008d52:	4907      	ldr	r1, [pc, #28]	; (8008d70 <tcp_recv+0x3c>)
 8008d54:	4807      	ldr	r0, [pc, #28]	; (8008d74 <tcp_recv+0x40>)
 8008d56:	f009 fc07 	bl	8012568 <iprintf>
    pcb->recv = recv;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8008d62:	bf00      	nop
 8008d64:	3708      	adds	r7, #8
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	0801413c 	.word	0x0801413c
 8008d70:	080146d8 	.word	0x080146d8
 8008d74:	08014180 	.word	0x08014180

08008d78 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00e      	beq.n	8008da6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	7d1b      	ldrb	r3, [r3, #20]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d106      	bne.n	8008d9e <tcp_sent+0x26>
 8008d90:	4b07      	ldr	r3, [pc, #28]	; (8008db0 <tcp_sent+0x38>)
 8008d92:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008d96:	4907      	ldr	r1, [pc, #28]	; (8008db4 <tcp_sent+0x3c>)
 8008d98:	4807      	ldr	r0, [pc, #28]	; (8008db8 <tcp_sent+0x40>)
 8008d9a:	f009 fbe5 	bl	8012568 <iprintf>
    pcb->sent = sent;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	683a      	ldr	r2, [r7, #0]
 8008da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8008da6:	bf00      	nop
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	0801413c 	.word	0x0801413c
 8008db4:	08014700 	.word	0x08014700
 8008db8:	08014180 	.word	0x08014180

08008dbc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00e      	beq.n	8008dea <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	7d1b      	ldrb	r3, [r3, #20]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d106      	bne.n	8008de2 <tcp_err+0x26>
 8008dd4:	4b07      	ldr	r3, [pc, #28]	; (8008df4 <tcp_err+0x38>)
 8008dd6:	f640 020d 	movw	r2, #2061	; 0x80d
 8008dda:	4907      	ldr	r1, [pc, #28]	; (8008df8 <tcp_err+0x3c>)
 8008ddc:	4807      	ldr	r0, [pc, #28]	; (8008dfc <tcp_err+0x40>)
 8008dde:	f009 fbc3 	bl	8012568 <iprintf>
    pcb->errf = err;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8008dea:	bf00      	nop
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	0801413c 	.word	0x0801413c
 8008df8:	08014728 	.word	0x08014728
 8008dfc:	08014180 	.word	0x08014180

08008e00 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d008      	beq.n	8008e22 <tcp_accept+0x22>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	7d1b      	ldrb	r3, [r3, #20]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d104      	bne.n	8008e22 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	619a      	str	r2, [r3, #24]
  }
}
 8008e22:	bf00      	nop
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
	...

08008e30 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d107      	bne.n	8008e54 <tcp_poll+0x24>
 8008e44:	4b0e      	ldr	r3, [pc, #56]	; (8008e80 <tcp_poll+0x50>)
 8008e46:	f640 023d 	movw	r2, #2109	; 0x83d
 8008e4a:	490e      	ldr	r1, [pc, #56]	; (8008e84 <tcp_poll+0x54>)
 8008e4c:	480e      	ldr	r0, [pc, #56]	; (8008e88 <tcp_poll+0x58>)
 8008e4e:	f009 fb8b 	bl	8012568 <iprintf>
 8008e52:	e011      	b.n	8008e78 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	7d1b      	ldrb	r3, [r3, #20]
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d106      	bne.n	8008e6a <tcp_poll+0x3a>
 8008e5c:	4b08      	ldr	r3, [pc, #32]	; (8008e80 <tcp_poll+0x50>)
 8008e5e:	f640 023e 	movw	r2, #2110	; 0x83e
 8008e62:	490a      	ldr	r1, [pc, #40]	; (8008e8c <tcp_poll+0x5c>)
 8008e64:	4808      	ldr	r0, [pc, #32]	; (8008e88 <tcp_poll+0x58>)
 8008e66:	f009 fb7f 	bl	8012568 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	79fa      	ldrb	r2, [r7, #7]
 8008e76:	775a      	strb	r2, [r3, #29]
}
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	0801413c 	.word	0x0801413c
 8008e84:	08014750 	.word	0x08014750
 8008e88:	08014180 	.word	0x08014180
 8008e8c:	08014768 	.word	0x08014768

08008e90 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d107      	bne.n	8008eae <tcp_pcb_purge+0x1e>
 8008e9e:	4b21      	ldr	r3, [pc, #132]	; (8008f24 <tcp_pcb_purge+0x94>)
 8008ea0:	f640 0251 	movw	r2, #2129	; 0x851
 8008ea4:	4920      	ldr	r1, [pc, #128]	; (8008f28 <tcp_pcb_purge+0x98>)
 8008ea6:	4821      	ldr	r0, [pc, #132]	; (8008f2c <tcp_pcb_purge+0x9c>)
 8008ea8:	f009 fb5e 	bl	8012568 <iprintf>
 8008eac:	e037      	b.n	8008f1e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	7d1b      	ldrb	r3, [r3, #20]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d033      	beq.n	8008f1e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008eba:	2b0a      	cmp	r3, #10
 8008ebc:	d02f      	beq.n	8008f1e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d02b      	beq.n	8008f1e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d007      	beq.n	8008ede <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fe f8d2 	bl	800707c <pbuf_free>
      pcb->refused_data = NULL;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d002      	beq.n	8008eec <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f986 	bl	80091f8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ef2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7ff fcdd 	bl	80088b8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7ff fcd8 	bl	80088b8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	66da      	str	r2, [r3, #108]	; 0x6c
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008f1e:	3708      	adds	r7, #8
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	0801413c 	.word	0x0801413c
 8008f28:	08014788 	.word	0x08014788
 8008f2c:	08014180 	.word	0x08014180

08008f30 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d106      	bne.n	8008f4e <tcp_pcb_remove+0x1e>
 8008f40:	4b3e      	ldr	r3, [pc, #248]	; (800903c <tcp_pcb_remove+0x10c>)
 8008f42:	f640 0283 	movw	r2, #2179	; 0x883
 8008f46:	493e      	ldr	r1, [pc, #248]	; (8009040 <tcp_pcb_remove+0x110>)
 8008f48:	483e      	ldr	r0, [pc, #248]	; (8009044 <tcp_pcb_remove+0x114>)
 8008f4a:	f009 fb0d 	bl	8012568 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d106      	bne.n	8008f62 <tcp_pcb_remove+0x32>
 8008f54:	4b39      	ldr	r3, [pc, #228]	; (800903c <tcp_pcb_remove+0x10c>)
 8008f56:	f640 0284 	movw	r2, #2180	; 0x884
 8008f5a:	493b      	ldr	r1, [pc, #236]	; (8009048 <tcp_pcb_remove+0x118>)
 8008f5c:	4839      	ldr	r0, [pc, #228]	; (8009044 <tcp_pcb_remove+0x114>)
 8008f5e:	f009 fb03 	bl	8012568 <iprintf>

  TCP_RMV(pcblist, pcb);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	683a      	ldr	r2, [r7, #0]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d105      	bne.n	8008f78 <tcp_pcb_remove+0x48>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68da      	ldr	r2, [r3, #12]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	e013      	b.n	8008fa0 <tcp_pcb_remove+0x70>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	60fb      	str	r3, [r7, #12]
 8008f7e:	e00c      	b.n	8008f9a <tcp_pcb_remove+0x6a>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	683a      	ldr	r2, [r7, #0]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d104      	bne.n	8008f94 <tcp_pcb_remove+0x64>
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	60da      	str	r2, [r3, #12]
 8008f92:	e005      	b.n	8008fa0 <tcp_pcb_remove+0x70>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	60fb      	str	r3, [r7, #12]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1ef      	bne.n	8008f80 <tcp_pcb_remove+0x50>
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008fa6:	6838      	ldr	r0, [r7, #0]
 8008fa8:	f7ff ff72 	bl	8008e90 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	7d1b      	ldrb	r3, [r3, #20]
 8008fb0:	2b0a      	cmp	r3, #10
 8008fb2:	d013      	beq.n	8008fdc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d00f      	beq.n	8008fdc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	8b5b      	ldrh	r3, [r3, #26]
 8008fc0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d009      	beq.n	8008fdc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	8b5b      	ldrh	r3, [r3, #26]
 8008fcc:	f043 0302 	orr.w	r3, r3, #2
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008fd6:	6838      	ldr	r0, [r7, #0]
 8008fd8:	f003 fbc2 	bl	800c760 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	7d1b      	ldrb	r3, [r3, #20]
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d020      	beq.n	8009026 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d006      	beq.n	8008ffa <tcp_pcb_remove+0xca>
 8008fec:	4b13      	ldr	r3, [pc, #76]	; (800903c <tcp_pcb_remove+0x10c>)
 8008fee:	f640 0293 	movw	r2, #2195	; 0x893
 8008ff2:	4916      	ldr	r1, [pc, #88]	; (800904c <tcp_pcb_remove+0x11c>)
 8008ff4:	4813      	ldr	r0, [pc, #76]	; (8009044 <tcp_pcb_remove+0x114>)
 8008ff6:	f009 fab7 	bl	8012568 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d006      	beq.n	8009010 <tcp_pcb_remove+0xe0>
 8009002:	4b0e      	ldr	r3, [pc, #56]	; (800903c <tcp_pcb_remove+0x10c>)
 8009004:	f640 0294 	movw	r2, #2196	; 0x894
 8009008:	4911      	ldr	r1, [pc, #68]	; (8009050 <tcp_pcb_remove+0x120>)
 800900a:	480e      	ldr	r0, [pc, #56]	; (8009044 <tcp_pcb_remove+0x114>)
 800900c:	f009 faac 	bl	8012568 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009014:	2b00      	cmp	r3, #0
 8009016:	d006      	beq.n	8009026 <tcp_pcb_remove+0xf6>
 8009018:	4b08      	ldr	r3, [pc, #32]	; (800903c <tcp_pcb_remove+0x10c>)
 800901a:	f640 0296 	movw	r2, #2198	; 0x896
 800901e:	490d      	ldr	r1, [pc, #52]	; (8009054 <tcp_pcb_remove+0x124>)
 8009020:	4808      	ldr	r0, [pc, #32]	; (8009044 <tcp_pcb_remove+0x114>)
 8009022:	f009 faa1 	bl	8012568 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2200      	movs	r2, #0
 800902a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	2200      	movs	r2, #0
 8009030:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009032:	bf00      	nop
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	0801413c 	.word	0x0801413c
 8009040:	080147a4 	.word	0x080147a4
 8009044:	08014180 	.word	0x08014180
 8009048:	080147c0 	.word	0x080147c0
 800904c:	080147e0 	.word	0x080147e0
 8009050:	080147f8 	.word	0x080147f8
 8009054:	08014814 	.word	0x08014814

08009058 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d106      	bne.n	8009074 <tcp_next_iss+0x1c>
 8009066:	4b0a      	ldr	r3, [pc, #40]	; (8009090 <tcp_next_iss+0x38>)
 8009068:	f640 02af 	movw	r2, #2223	; 0x8af
 800906c:	4909      	ldr	r1, [pc, #36]	; (8009094 <tcp_next_iss+0x3c>)
 800906e:	480a      	ldr	r0, [pc, #40]	; (8009098 <tcp_next_iss+0x40>)
 8009070:	f009 fa7a 	bl	8012568 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009074:	4b09      	ldr	r3, [pc, #36]	; (800909c <tcp_next_iss+0x44>)
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	4b09      	ldr	r3, [pc, #36]	; (80090a0 <tcp_next_iss+0x48>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4413      	add	r3, r2
 800907e:	4a07      	ldr	r2, [pc, #28]	; (800909c <tcp_next_iss+0x44>)
 8009080:	6013      	str	r3, [r2, #0]
  return iss;
 8009082:	4b06      	ldr	r3, [pc, #24]	; (800909c <tcp_next_iss+0x44>)
 8009084:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009086:	4618      	mov	r0, r3
 8009088:	3708      	adds	r7, #8
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	0801413c 	.word	0x0801413c
 8009094:	0801482c 	.word	0x0801482c
 8009098:	08014180 	.word	0x08014180
 800909c:	2000000c 	.word	0x2000000c
 80090a0:	2000718c 	.word	0x2000718c

080090a4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	4603      	mov	r3, r0
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
 80090b0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d106      	bne.n	80090c6 <tcp_eff_send_mss_netif+0x22>
 80090b8:	4b14      	ldr	r3, [pc, #80]	; (800910c <tcp_eff_send_mss_netif+0x68>)
 80090ba:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80090be:	4914      	ldr	r1, [pc, #80]	; (8009110 <tcp_eff_send_mss_netif+0x6c>)
 80090c0:	4814      	ldr	r0, [pc, #80]	; (8009114 <tcp_eff_send_mss_netif+0x70>)
 80090c2:	f009 fa51 	bl	8012568 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80090cc:	89fb      	ldrh	r3, [r7, #14]
 80090ce:	e019      	b.n	8009104 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80090d4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80090d6:	8afb      	ldrh	r3, [r7, #22]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d012      	beq.n	8009102 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80090dc:	2328      	movs	r3, #40	; 0x28
 80090de:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80090e0:	8afa      	ldrh	r2, [r7, #22]
 80090e2:	8abb      	ldrh	r3, [r7, #20]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d904      	bls.n	80090f2 <tcp_eff_send_mss_netif+0x4e>
 80090e8:	8afa      	ldrh	r2, [r7, #22]
 80090ea:	8abb      	ldrh	r3, [r7, #20]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	e000      	b.n	80090f4 <tcp_eff_send_mss_netif+0x50>
 80090f2:	2300      	movs	r3, #0
 80090f4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80090f6:	8a7a      	ldrh	r2, [r7, #18]
 80090f8:	89fb      	ldrh	r3, [r7, #14]
 80090fa:	4293      	cmp	r3, r2
 80090fc:	bf28      	it	cs
 80090fe:	4613      	movcs	r3, r2
 8009100:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8009102:	89fb      	ldrh	r3, [r7, #14]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3718      	adds	r7, #24
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	0801413c 	.word	0x0801413c
 8009110:	08014848 	.word	0x08014848
 8009114:	08014180 	.word	0x08014180

08009118 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b084      	sub	sp, #16
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d119      	bne.n	8009160 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800912c:	4b10      	ldr	r3, [pc, #64]	; (8009170 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800912e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009132:	4910      	ldr	r1, [pc, #64]	; (8009174 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8009134:	4810      	ldr	r0, [pc, #64]	; (8009178 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8009136:	f009 fa17 	bl	8012568 <iprintf>

  while (pcb != NULL) {
 800913a:	e011      	b.n	8009160 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	429a      	cmp	r2, r3
 8009146:	d108      	bne.n	800915a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f7fe fd24 	bl	8007b9c <tcp_abort>
      pcb = next;
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	60fb      	str	r3, [r7, #12]
 8009158:	e002      	b.n	8009160 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1ea      	bne.n	800913c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8009166:	bf00      	nop
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	0801413c 	.word	0x0801413c
 8009174:	08014870 	.word	0x08014870
 8009178:	08014180 	.word	0x08014180

0800917c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d02a      	beq.n	80091e2 <tcp_netif_ip_addr_changed+0x66>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d026      	beq.n	80091e2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009194:	4b15      	ldr	r3, [pc, #84]	; (80091ec <tcp_netif_ip_addr_changed+0x70>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4619      	mov	r1, r3
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7ff ffbc 	bl	8009118 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80091a0:	4b13      	ldr	r3, [pc, #76]	; (80091f0 <tcp_netif_ip_addr_changed+0x74>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f7ff ffb6 	bl	8009118 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d017      	beq.n	80091e2 <tcp_netif_ip_addr_changed+0x66>
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d013      	beq.n	80091e2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80091ba:	4b0e      	ldr	r3, [pc, #56]	; (80091f4 <tcp_netif_ip_addr_changed+0x78>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	60fb      	str	r3, [r7, #12]
 80091c0:	e00c      	b.n	80091dc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d103      	bne.n	80091d6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	60fb      	str	r3, [r7, #12]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1ef      	bne.n	80091c2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80091e2:	bf00      	nop
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	20007188 	.word	0x20007188
 80091f0:	20007194 	.word	0x20007194
 80091f4:	20007190 	.word	0x20007190

080091f8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009204:	2b00      	cmp	r3, #0
 8009206:	d007      	beq.n	8009218 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800920c:	4618      	mov	r0, r3
 800920e:	f7ff fb53 	bl	80088b8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009218:	bf00      	nop
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009220:	b590      	push	{r4, r7, lr}
 8009222:	b08d      	sub	sp, #52	; 0x34
 8009224:	af04      	add	r7, sp, #16
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d105      	bne.n	800923c <tcp_input+0x1c>
 8009230:	4b9b      	ldr	r3, [pc, #620]	; (80094a0 <tcp_input+0x280>)
 8009232:	2283      	movs	r2, #131	; 0x83
 8009234:	499b      	ldr	r1, [pc, #620]	; (80094a4 <tcp_input+0x284>)
 8009236:	489c      	ldr	r0, [pc, #624]	; (80094a8 <tcp_input+0x288>)
 8009238:	f009 f996 	bl	8012568 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	4a9a      	ldr	r2, [pc, #616]	; (80094ac <tcp_input+0x28c>)
 8009242:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	895b      	ldrh	r3, [r3, #10]
 8009248:	2b13      	cmp	r3, #19
 800924a:	f240 83c4 	bls.w	80099d6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800924e:	4b98      	ldr	r3, [pc, #608]	; (80094b0 <tcp_input+0x290>)
 8009250:	695a      	ldr	r2, [r3, #20]
 8009252:	4b97      	ldr	r3, [pc, #604]	; (80094b0 <tcp_input+0x290>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4619      	mov	r1, r3
 8009258:	4610      	mov	r0, r2
 800925a:	f008 f9f3 	bl	8011644 <ip4_addr_isbroadcast_u32>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	f040 83ba 	bne.w	80099da <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8009266:	4b92      	ldr	r3, [pc, #584]	; (80094b0 <tcp_input+0x290>)
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800926e:	2be0      	cmp	r3, #224	; 0xe0
 8009270:	f000 83b3 	beq.w	80099da <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8009274:	4b8d      	ldr	r3, [pc, #564]	; (80094ac <tcp_input+0x28c>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	899b      	ldrh	r3, [r3, #12]
 800927a:	b29b      	uxth	r3, r3
 800927c:	4618      	mov	r0, r3
 800927e:	f7fc fc25 	bl	8005acc <lwip_htons>
 8009282:	4603      	mov	r3, r0
 8009284:	0b1b      	lsrs	r3, r3, #12
 8009286:	b29b      	uxth	r3, r3
 8009288:	b2db      	uxtb	r3, r3
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800928e:	7cbb      	ldrb	r3, [r7, #18]
 8009290:	2b13      	cmp	r3, #19
 8009292:	f240 83a2 	bls.w	80099da <tcp_input+0x7ba>
 8009296:	7cbb      	ldrb	r3, [r7, #18]
 8009298:	b29a      	uxth	r2, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	891b      	ldrh	r3, [r3, #8]
 800929e:	429a      	cmp	r2, r3
 80092a0:	f200 839b 	bhi.w	80099da <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80092a4:	7cbb      	ldrb	r3, [r7, #18]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	3b14      	subs	r3, #20
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	4b81      	ldr	r3, [pc, #516]	; (80094b4 <tcp_input+0x294>)
 80092ae:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80092b0:	4b81      	ldr	r3, [pc, #516]	; (80094b8 <tcp_input+0x298>)
 80092b2:	2200      	movs	r2, #0
 80092b4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	895a      	ldrh	r2, [r3, #10]
 80092ba:	7cbb      	ldrb	r3, [r7, #18]
 80092bc:	b29b      	uxth	r3, r3
 80092be:	429a      	cmp	r2, r3
 80092c0:	d309      	bcc.n	80092d6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80092c2:	4b7c      	ldr	r3, [pc, #496]	; (80094b4 <tcp_input+0x294>)
 80092c4:	881a      	ldrh	r2, [r3, #0]
 80092c6:	4b7d      	ldr	r3, [pc, #500]	; (80094bc <tcp_input+0x29c>)
 80092c8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80092ca:	7cbb      	ldrb	r3, [r7, #18]
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7fd fe4e 	bl	8006f70 <pbuf_remove_header>
 80092d4:	e04e      	b.n	8009374 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d105      	bne.n	80092ea <tcp_input+0xca>
 80092de:	4b70      	ldr	r3, [pc, #448]	; (80094a0 <tcp_input+0x280>)
 80092e0:	22c2      	movs	r2, #194	; 0xc2
 80092e2:	4977      	ldr	r1, [pc, #476]	; (80094c0 <tcp_input+0x2a0>)
 80092e4:	4870      	ldr	r0, [pc, #448]	; (80094a8 <tcp_input+0x288>)
 80092e6:	f009 f93f 	bl	8012568 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80092ea:	2114      	movs	r1, #20
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7fd fe3f 	bl	8006f70 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	895a      	ldrh	r2, [r3, #10]
 80092f6:	4b71      	ldr	r3, [pc, #452]	; (80094bc <tcp_input+0x29c>)
 80092f8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80092fa:	4b6e      	ldr	r3, [pc, #440]	; (80094b4 <tcp_input+0x294>)
 80092fc:	881a      	ldrh	r2, [r3, #0]
 80092fe:	4b6f      	ldr	r3, [pc, #444]	; (80094bc <tcp_input+0x29c>)
 8009300:	881b      	ldrh	r3, [r3, #0]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8009306:	4b6d      	ldr	r3, [pc, #436]	; (80094bc <tcp_input+0x29c>)
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7fd fe2f 	bl	8006f70 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	895b      	ldrh	r3, [r3, #10]
 8009318:	8a3a      	ldrh	r2, [r7, #16]
 800931a:	429a      	cmp	r2, r3
 800931c:	f200 835f 	bhi.w	80099de <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	4a64      	ldr	r2, [pc, #400]	; (80094b8 <tcp_input+0x298>)
 8009328:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	8a3a      	ldrh	r2, [r7, #16]
 8009330:	4611      	mov	r1, r2
 8009332:	4618      	mov	r0, r3
 8009334:	f7fd fe1c 	bl	8006f70 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	891a      	ldrh	r2, [r3, #8]
 800933c:	8a3b      	ldrh	r3, [r7, #16]
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	b29a      	uxth	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	895b      	ldrh	r3, [r3, #10]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d005      	beq.n	800935a <tcp_input+0x13a>
 800934e:	4b54      	ldr	r3, [pc, #336]	; (80094a0 <tcp_input+0x280>)
 8009350:	22df      	movs	r2, #223	; 0xdf
 8009352:	495c      	ldr	r1, [pc, #368]	; (80094c4 <tcp_input+0x2a4>)
 8009354:	4854      	ldr	r0, [pc, #336]	; (80094a8 <tcp_input+0x288>)
 8009356:	f009 f907 	bl	8012568 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	891a      	ldrh	r2, [r3, #8]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	891b      	ldrh	r3, [r3, #8]
 8009364:	429a      	cmp	r2, r3
 8009366:	d005      	beq.n	8009374 <tcp_input+0x154>
 8009368:	4b4d      	ldr	r3, [pc, #308]	; (80094a0 <tcp_input+0x280>)
 800936a:	22e0      	movs	r2, #224	; 0xe0
 800936c:	4956      	ldr	r1, [pc, #344]	; (80094c8 <tcp_input+0x2a8>)
 800936e:	484e      	ldr	r0, [pc, #312]	; (80094a8 <tcp_input+0x288>)
 8009370:	f009 f8fa 	bl	8012568 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8009374:	4b4d      	ldr	r3, [pc, #308]	; (80094ac <tcp_input+0x28c>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	b29a      	uxth	r2, r3
 800937c:	4b4b      	ldr	r3, [pc, #300]	; (80094ac <tcp_input+0x28c>)
 800937e:	681c      	ldr	r4, [r3, #0]
 8009380:	4610      	mov	r0, r2
 8009382:	f7fc fba3 	bl	8005acc <lwip_htons>
 8009386:	4603      	mov	r3, r0
 8009388:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800938a:	4b48      	ldr	r3, [pc, #288]	; (80094ac <tcp_input+0x28c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	885b      	ldrh	r3, [r3, #2]
 8009390:	b29a      	uxth	r2, r3
 8009392:	4b46      	ldr	r3, [pc, #280]	; (80094ac <tcp_input+0x28c>)
 8009394:	681c      	ldr	r4, [r3, #0]
 8009396:	4610      	mov	r0, r2
 8009398:	f7fc fb98 	bl	8005acc <lwip_htons>
 800939c:	4603      	mov	r3, r0
 800939e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80093a0:	4b42      	ldr	r3, [pc, #264]	; (80094ac <tcp_input+0x28c>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	4b41      	ldr	r3, [pc, #260]	; (80094ac <tcp_input+0x28c>)
 80093a8:	681c      	ldr	r4, [r3, #0]
 80093aa:	4610      	mov	r0, r2
 80093ac:	f7fc fba3 	bl	8005af6 <lwip_htonl>
 80093b0:	4603      	mov	r3, r0
 80093b2:	6063      	str	r3, [r4, #4]
 80093b4:	6863      	ldr	r3, [r4, #4]
 80093b6:	4a45      	ldr	r2, [pc, #276]	; (80094cc <tcp_input+0x2ac>)
 80093b8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80093ba:	4b3c      	ldr	r3, [pc, #240]	; (80094ac <tcp_input+0x28c>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689a      	ldr	r2, [r3, #8]
 80093c0:	4b3a      	ldr	r3, [pc, #232]	; (80094ac <tcp_input+0x28c>)
 80093c2:	681c      	ldr	r4, [r3, #0]
 80093c4:	4610      	mov	r0, r2
 80093c6:	f7fc fb96 	bl	8005af6 <lwip_htonl>
 80093ca:	4603      	mov	r3, r0
 80093cc:	60a3      	str	r3, [r4, #8]
 80093ce:	68a3      	ldr	r3, [r4, #8]
 80093d0:	4a3f      	ldr	r2, [pc, #252]	; (80094d0 <tcp_input+0x2b0>)
 80093d2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80093d4:	4b35      	ldr	r3, [pc, #212]	; (80094ac <tcp_input+0x28c>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	89db      	ldrh	r3, [r3, #14]
 80093da:	b29a      	uxth	r2, r3
 80093dc:	4b33      	ldr	r3, [pc, #204]	; (80094ac <tcp_input+0x28c>)
 80093de:	681c      	ldr	r4, [r3, #0]
 80093e0:	4610      	mov	r0, r2
 80093e2:	f7fc fb73 	bl	8005acc <lwip_htons>
 80093e6:	4603      	mov	r3, r0
 80093e8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80093ea:	4b30      	ldr	r3, [pc, #192]	; (80094ac <tcp_input+0x28c>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	899b      	ldrh	r3, [r3, #12]
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fc fb6a 	bl	8005acc <lwip_htons>
 80093f8:	4603      	mov	r3, r0
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009400:	b2da      	uxtb	r2, r3
 8009402:	4b34      	ldr	r3, [pc, #208]	; (80094d4 <tcp_input+0x2b4>)
 8009404:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	891a      	ldrh	r2, [r3, #8]
 800940a:	4b33      	ldr	r3, [pc, #204]	; (80094d8 <tcp_input+0x2b8>)
 800940c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800940e:	4b31      	ldr	r3, [pc, #196]	; (80094d4 <tcp_input+0x2b4>)
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	f003 0303 	and.w	r3, r3, #3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00c      	beq.n	8009434 <tcp_input+0x214>
    tcplen++;
 800941a:	4b2f      	ldr	r3, [pc, #188]	; (80094d8 <tcp_input+0x2b8>)
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	3301      	adds	r3, #1
 8009420:	b29a      	uxth	r2, r3
 8009422:	4b2d      	ldr	r3, [pc, #180]	; (80094d8 <tcp_input+0x2b8>)
 8009424:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	891a      	ldrh	r2, [r3, #8]
 800942a:	4b2b      	ldr	r3, [pc, #172]	; (80094d8 <tcp_input+0x2b8>)
 800942c:	881b      	ldrh	r3, [r3, #0]
 800942e:	429a      	cmp	r2, r3
 8009430:	f200 82d7 	bhi.w	80099e2 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009434:	2300      	movs	r3, #0
 8009436:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009438:	4b28      	ldr	r3, [pc, #160]	; (80094dc <tcp_input+0x2bc>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	61fb      	str	r3, [r7, #28]
 800943e:	e09d      	b.n	800957c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	7d1b      	ldrb	r3, [r3, #20]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d105      	bne.n	8009454 <tcp_input+0x234>
 8009448:	4b15      	ldr	r3, [pc, #84]	; (80094a0 <tcp_input+0x280>)
 800944a:	22fb      	movs	r2, #251	; 0xfb
 800944c:	4924      	ldr	r1, [pc, #144]	; (80094e0 <tcp_input+0x2c0>)
 800944e:	4816      	ldr	r0, [pc, #88]	; (80094a8 <tcp_input+0x288>)
 8009450:	f009 f88a 	bl	8012568 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	7d1b      	ldrb	r3, [r3, #20]
 8009458:	2b0a      	cmp	r3, #10
 800945a:	d105      	bne.n	8009468 <tcp_input+0x248>
 800945c:	4b10      	ldr	r3, [pc, #64]	; (80094a0 <tcp_input+0x280>)
 800945e:	22fc      	movs	r2, #252	; 0xfc
 8009460:	4920      	ldr	r1, [pc, #128]	; (80094e4 <tcp_input+0x2c4>)
 8009462:	4811      	ldr	r0, [pc, #68]	; (80094a8 <tcp_input+0x288>)
 8009464:	f009 f880 	bl	8012568 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	7d1b      	ldrb	r3, [r3, #20]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d105      	bne.n	800947c <tcp_input+0x25c>
 8009470:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <tcp_input+0x280>)
 8009472:	22fd      	movs	r2, #253	; 0xfd
 8009474:	491c      	ldr	r1, [pc, #112]	; (80094e8 <tcp_input+0x2c8>)
 8009476:	480c      	ldr	r0, [pc, #48]	; (80094a8 <tcp_input+0x288>)
 8009478:	f009 f876 	bl	8012568 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	7a1b      	ldrb	r3, [r3, #8]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d033      	beq.n	80094ec <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	7a1a      	ldrb	r2, [r3, #8]
 8009488:	4b09      	ldr	r3, [pc, #36]	; (80094b0 <tcp_input+0x290>)
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009490:	3301      	adds	r3, #1
 8009492:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009494:	429a      	cmp	r2, r3
 8009496:	d029      	beq.n	80094ec <tcp_input+0x2cc>
      prev = pcb;
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	61bb      	str	r3, [r7, #24]
      continue;
 800949c:	e06b      	b.n	8009576 <tcp_input+0x356>
 800949e:	bf00      	nop
 80094a0:	080148a4 	.word	0x080148a4
 80094a4:	080148d8 	.word	0x080148d8
 80094a8:	080148f0 	.word	0x080148f0
 80094ac:	2000052c 	.word	0x2000052c
 80094b0:	20003c24 	.word	0x20003c24
 80094b4:	20000530 	.word	0x20000530
 80094b8:	20000534 	.word	0x20000534
 80094bc:	20000532 	.word	0x20000532
 80094c0:	08014918 	.word	0x08014918
 80094c4:	08014928 	.word	0x08014928
 80094c8:	08014934 	.word	0x08014934
 80094cc:	2000053c 	.word	0x2000053c
 80094d0:	20000540 	.word	0x20000540
 80094d4:	20000548 	.word	0x20000548
 80094d8:	20000546 	.word	0x20000546
 80094dc:	20007188 	.word	0x20007188
 80094e0:	08014954 	.word	0x08014954
 80094e4:	0801497c 	.word	0x0801497c
 80094e8:	080149a8 	.word	0x080149a8
    }

    if (pcb->remote_port == tcphdr->src &&
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	8b1a      	ldrh	r2, [r3, #24]
 80094f0:	4b94      	ldr	r3, [pc, #592]	; (8009744 <tcp_input+0x524>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d13a      	bne.n	8009572 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	8ada      	ldrh	r2, [r3, #22]
 8009500:	4b90      	ldr	r3, [pc, #576]	; (8009744 <tcp_input+0x524>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	885b      	ldrh	r3, [r3, #2]
 8009506:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009508:	429a      	cmp	r2, r3
 800950a:	d132      	bne.n	8009572 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	685a      	ldr	r2, [r3, #4]
 8009510:	4b8d      	ldr	r3, [pc, #564]	; (8009748 <tcp_input+0x528>)
 8009512:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009514:	429a      	cmp	r2, r3
 8009516:	d12c      	bne.n	8009572 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	4b8a      	ldr	r3, [pc, #552]	; (8009748 <tcp_input+0x528>)
 800951e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009520:	429a      	cmp	r2, r3
 8009522:	d126      	bne.n	8009572 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	69fa      	ldr	r2, [r7, #28]
 800952a:	429a      	cmp	r2, r3
 800952c:	d106      	bne.n	800953c <tcp_input+0x31c>
 800952e:	4b87      	ldr	r3, [pc, #540]	; (800974c <tcp_input+0x52c>)
 8009530:	f240 120d 	movw	r2, #269	; 0x10d
 8009534:	4986      	ldr	r1, [pc, #536]	; (8009750 <tcp_input+0x530>)
 8009536:	4887      	ldr	r0, [pc, #540]	; (8009754 <tcp_input+0x534>)
 8009538:	f009 f816 	bl	8012568 <iprintf>
      if (prev != NULL) {
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00a      	beq.n	8009558 <tcp_input+0x338>
        prev->next = pcb->next;
 8009542:	69fb      	ldr	r3, [r7, #28]
 8009544:	68da      	ldr	r2, [r3, #12]
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800954a:	4b83      	ldr	r3, [pc, #524]	; (8009758 <tcp_input+0x538>)
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009552:	4a81      	ldr	r2, [pc, #516]	; (8009758 <tcp_input+0x538>)
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	69fa      	ldr	r2, [r7, #28]
 800955e:	429a      	cmp	r2, r3
 8009560:	d111      	bne.n	8009586 <tcp_input+0x366>
 8009562:	4b7a      	ldr	r3, [pc, #488]	; (800974c <tcp_input+0x52c>)
 8009564:	f240 1215 	movw	r2, #277	; 0x115
 8009568:	497c      	ldr	r1, [pc, #496]	; (800975c <tcp_input+0x53c>)
 800956a:	487a      	ldr	r0, [pc, #488]	; (8009754 <tcp_input+0x534>)
 800956c:	f008 fffc 	bl	8012568 <iprintf>
      break;
 8009570:	e009      	b.n	8009586 <tcp_input+0x366>
    }
    prev = pcb;
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	61fb      	str	r3, [r7, #28]
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	2b00      	cmp	r3, #0
 8009580:	f47f af5e 	bne.w	8009440 <tcp_input+0x220>
 8009584:	e000      	b.n	8009588 <tcp_input+0x368>
      break;
 8009586:	bf00      	nop
  }

  if (pcb == NULL) {
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	2b00      	cmp	r3, #0
 800958c:	f040 8095 	bne.w	80096ba <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009590:	4b73      	ldr	r3, [pc, #460]	; (8009760 <tcp_input+0x540>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	61fb      	str	r3, [r7, #28]
 8009596:	e03f      	b.n	8009618 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	7d1b      	ldrb	r3, [r3, #20]
 800959c:	2b0a      	cmp	r3, #10
 800959e:	d006      	beq.n	80095ae <tcp_input+0x38e>
 80095a0:	4b6a      	ldr	r3, [pc, #424]	; (800974c <tcp_input+0x52c>)
 80095a2:	f240 121f 	movw	r2, #287	; 0x11f
 80095a6:	496f      	ldr	r1, [pc, #444]	; (8009764 <tcp_input+0x544>)
 80095a8:	486a      	ldr	r0, [pc, #424]	; (8009754 <tcp_input+0x534>)
 80095aa:	f008 ffdd 	bl	8012568 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	7a1b      	ldrb	r3, [r3, #8]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d009      	beq.n	80095ca <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	7a1a      	ldrb	r2, [r3, #8]
 80095ba:	4b63      	ldr	r3, [pc, #396]	; (8009748 <tcp_input+0x528>)
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095c2:	3301      	adds	r3, #1
 80095c4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d122      	bne.n	8009610 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	8b1a      	ldrh	r2, [r3, #24]
 80095ce:	4b5d      	ldr	r3, [pc, #372]	; (8009744 <tcp_input+0x524>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	881b      	ldrh	r3, [r3, #0]
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d11b      	bne.n	8009612 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	8ada      	ldrh	r2, [r3, #22]
 80095de:	4b59      	ldr	r3, [pc, #356]	; (8009744 <tcp_input+0x524>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	885b      	ldrh	r3, [r3, #2]
 80095e4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d113      	bne.n	8009612 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	4b56      	ldr	r3, [pc, #344]	; (8009748 <tcp_input+0x528>)
 80095f0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d10d      	bne.n	8009612 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	4b53      	ldr	r3, [pc, #332]	; (8009748 <tcp_input+0x528>)
 80095fc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80095fe:	429a      	cmp	r2, r3
 8009600:	d107      	bne.n	8009612 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009602:	69f8      	ldr	r0, [r7, #28]
 8009604:	f000 fb52 	bl	8009cac <tcp_timewait_input>
        }
        pbuf_free(p);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7fd fd37 	bl	800707c <pbuf_free>
        return;
 800960e:	e1ee      	b.n	80099ee <tcp_input+0x7ce>
        continue;
 8009610:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	68db      	ldr	r3, [r3, #12]
 8009616:	61fb      	str	r3, [r7, #28]
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d1bc      	bne.n	8009598 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800961e:	2300      	movs	r3, #0
 8009620:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009622:	4b51      	ldr	r3, [pc, #324]	; (8009768 <tcp_input+0x548>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	617b      	str	r3, [r7, #20]
 8009628:	e02a      	b.n	8009680 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	7a1b      	ldrb	r3, [r3, #8]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00c      	beq.n	800964c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	7a1a      	ldrb	r2, [r3, #8]
 8009636:	4b44      	ldr	r3, [pc, #272]	; (8009748 <tcp_input+0x528>)
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800963e:	3301      	adds	r3, #1
 8009640:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009642:	429a      	cmp	r2, r3
 8009644:	d002      	beq.n	800964c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	61bb      	str	r3, [r7, #24]
        continue;
 800964a:	e016      	b.n	800967a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	8ada      	ldrh	r2, [r3, #22]
 8009650:	4b3c      	ldr	r3, [pc, #240]	; (8009744 <tcp_input+0x524>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	885b      	ldrh	r3, [r3, #2]
 8009656:	b29b      	uxth	r3, r3
 8009658:	429a      	cmp	r2, r3
 800965a:	d10c      	bne.n	8009676 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	4b39      	ldr	r3, [pc, #228]	; (8009748 <tcp_input+0x528>)
 8009662:	695b      	ldr	r3, [r3, #20]
 8009664:	429a      	cmp	r2, r3
 8009666:	d00f      	beq.n	8009688 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00d      	beq.n	800968a <tcp_input+0x46a>
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d009      	beq.n	800968a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	617b      	str	r3, [r7, #20]
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1d1      	bne.n	800962a <tcp_input+0x40a>
 8009686:	e000      	b.n	800968a <tcp_input+0x46a>
            break;
 8009688:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d014      	beq.n	80096ba <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00a      	beq.n	80096ac <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	68da      	ldr	r2, [r3, #12]
 800969a:	69bb      	ldr	r3, [r7, #24]
 800969c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800969e:	4b32      	ldr	r3, [pc, #200]	; (8009768 <tcp_input+0x548>)
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80096a6:	4a30      	ldr	r2, [pc, #192]	; (8009768 <tcp_input+0x548>)
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80096ac:	6978      	ldr	r0, [r7, #20]
 80096ae:	f000 f9ff 	bl	8009ab0 <tcp_listen_input>
      }
      pbuf_free(p);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7fd fce2 	bl	800707c <pbuf_free>
      return;
 80096b8:	e199      	b.n	80099ee <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 8160 	beq.w	8009982 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80096c2:	4b2a      	ldr	r3, [pc, #168]	; (800976c <tcp_input+0x54c>)
 80096c4:	2200      	movs	r2, #0
 80096c6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	891a      	ldrh	r2, [r3, #8]
 80096cc:	4b27      	ldr	r3, [pc, #156]	; (800976c <tcp_input+0x54c>)
 80096ce:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80096d0:	4a26      	ldr	r2, [pc, #152]	; (800976c <tcp_input+0x54c>)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80096d6:	4b1b      	ldr	r3, [pc, #108]	; (8009744 <tcp_input+0x524>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a24      	ldr	r2, [pc, #144]	; (800976c <tcp_input+0x54c>)
 80096dc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80096de:	4b24      	ldr	r3, [pc, #144]	; (8009770 <tcp_input+0x550>)
 80096e0:	2200      	movs	r2, #0
 80096e2:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80096e4:	4b23      	ldr	r3, [pc, #140]	; (8009774 <tcp_input+0x554>)
 80096e6:	2200      	movs	r2, #0
 80096e8:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80096ea:	4b23      	ldr	r3, [pc, #140]	; (8009778 <tcp_input+0x558>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80096f0:	4b22      	ldr	r3, [pc, #136]	; (800977c <tcp_input+0x55c>)
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	f003 0308 	and.w	r3, r3, #8
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d006      	beq.n	800970a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	7b5b      	ldrb	r3, [r3, #13]
 8009700:	f043 0301 	orr.w	r3, r3, #1
 8009704:	b2da      	uxtb	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800970e:	2b00      	cmp	r3, #0
 8009710:	d038      	beq.n	8009784 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009712:	69f8      	ldr	r0, [r7, #28]
 8009714:	f7ff f854 	bl	80087c0 <tcp_process_refused_data>
 8009718:	4603      	mov	r3, r0
 800971a:	f113 0f0d 	cmn.w	r3, #13
 800971e:	d007      	beq.n	8009730 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009724:	2b00      	cmp	r3, #0
 8009726:	d02d      	beq.n	8009784 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009728:	4b15      	ldr	r3, [pc, #84]	; (8009780 <tcp_input+0x560>)
 800972a:	881b      	ldrh	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d029      	beq.n	8009784 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009730:	69fb      	ldr	r3, [r7, #28]
 8009732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009734:	2b00      	cmp	r3, #0
 8009736:	f040 8104 	bne.w	8009942 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800973a:	69f8      	ldr	r0, [r7, #28]
 800973c:	f003 fe28 	bl	800d390 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009740:	e0ff      	b.n	8009942 <tcp_input+0x722>
 8009742:	bf00      	nop
 8009744:	2000052c 	.word	0x2000052c
 8009748:	20003c24 	.word	0x20003c24
 800974c:	080148a4 	.word	0x080148a4
 8009750:	080149d0 	.word	0x080149d0
 8009754:	080148f0 	.word	0x080148f0
 8009758:	20007188 	.word	0x20007188
 800975c:	080149fc 	.word	0x080149fc
 8009760:	20007198 	.word	0x20007198
 8009764:	08014a28 	.word	0x08014a28
 8009768:	20007190 	.word	0x20007190
 800976c:	2000051c 	.word	0x2000051c
 8009770:	2000054c 	.word	0x2000054c
 8009774:	20000549 	.word	0x20000549
 8009778:	20000544 	.word	0x20000544
 800977c:	20000548 	.word	0x20000548
 8009780:	20000546 	.word	0x20000546
      }
    }
    tcp_input_pcb = pcb;
 8009784:	4a9b      	ldr	r2, [pc, #620]	; (80099f4 <tcp_input+0x7d4>)
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800978a:	69f8      	ldr	r0, [r7, #28]
 800978c:	f000 fb0a 	bl	8009da4 <tcp_process>
 8009790:	4603      	mov	r3, r0
 8009792:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009794:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009798:	f113 0f0d 	cmn.w	r3, #13
 800979c:	f000 80d3 	beq.w	8009946 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80097a0:	4b95      	ldr	r3, [pc, #596]	; (80099f8 <tcp_input+0x7d8>)
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	f003 0308 	and.w	r3, r3, #8
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d015      	beq.n	80097d8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d008      	beq.n	80097c8 <tcp_input+0x5a8>
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097bc:	69fa      	ldr	r2, [r7, #28]
 80097be:	6912      	ldr	r2, [r2, #16]
 80097c0:	f06f 010d 	mvn.w	r1, #13
 80097c4:	4610      	mov	r0, r2
 80097c6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80097c8:	69f9      	ldr	r1, [r7, #28]
 80097ca:	488c      	ldr	r0, [pc, #560]	; (80099fc <tcp_input+0x7dc>)
 80097cc:	f7ff fbb0 	bl	8008f30 <tcp_pcb_remove>
        tcp_free(pcb);
 80097d0:	69f8      	ldr	r0, [r7, #28]
 80097d2:	f7fd ff03 	bl	80075dc <tcp_free>
 80097d6:	e0c1      	b.n	800995c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80097dc:	4b88      	ldr	r3, [pc, #544]	; (8009a00 <tcp_input+0x7e0>)
 80097de:	881b      	ldrh	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d01d      	beq.n	8009820 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80097e4:	4b86      	ldr	r3, [pc, #536]	; (8009a00 <tcp_input+0x7e0>)
 80097e6:	881b      	ldrh	r3, [r3, #0]
 80097e8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00a      	beq.n	800980a <tcp_input+0x5ea>
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097fa:	69fa      	ldr	r2, [r7, #28]
 80097fc:	6910      	ldr	r0, [r2, #16]
 80097fe:	89fa      	ldrh	r2, [r7, #14]
 8009800:	69f9      	ldr	r1, [r7, #28]
 8009802:	4798      	blx	r3
 8009804:	4603      	mov	r3, r0
 8009806:	74fb      	strb	r3, [r7, #19]
 8009808:	e001      	b.n	800980e <tcp_input+0x5ee>
 800980a:	2300      	movs	r3, #0
 800980c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800980e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009812:	f113 0f0d 	cmn.w	r3, #13
 8009816:	f000 8098 	beq.w	800994a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800981a:	4b79      	ldr	r3, [pc, #484]	; (8009a00 <tcp_input+0x7e0>)
 800981c:	2200      	movs	r2, #0
 800981e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009820:	69f8      	ldr	r0, [r7, #28]
 8009822:	f000 f905 	bl	8009a30 <tcp_input_delayed_close>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	f040 8090 	bne.w	800994e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800982e:	4b75      	ldr	r3, [pc, #468]	; (8009a04 <tcp_input+0x7e4>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d041      	beq.n	80098ba <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009836:	69fb      	ldr	r3, [r7, #28]
 8009838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800983a:	2b00      	cmp	r3, #0
 800983c:	d006      	beq.n	800984c <tcp_input+0x62c>
 800983e:	4b72      	ldr	r3, [pc, #456]	; (8009a08 <tcp_input+0x7e8>)
 8009840:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009844:	4971      	ldr	r1, [pc, #452]	; (8009a0c <tcp_input+0x7ec>)
 8009846:	4872      	ldr	r0, [pc, #456]	; (8009a10 <tcp_input+0x7f0>)
 8009848:	f008 fe8e 	bl	8012568 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	8b5b      	ldrh	r3, [r3, #26]
 8009850:	f003 0310 	and.w	r3, r3, #16
 8009854:	2b00      	cmp	r3, #0
 8009856:	d008      	beq.n	800986a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009858:	4b6a      	ldr	r3, [pc, #424]	; (8009a04 <tcp_input+0x7e4>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4618      	mov	r0, r3
 800985e:	f7fd fc0d 	bl	800707c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009862:	69f8      	ldr	r0, [r7, #28]
 8009864:	f7fe f99a 	bl	8007b9c <tcp_abort>
            goto aborted;
 8009868:	e078      	b.n	800995c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00c      	beq.n	800988e <tcp_input+0x66e>
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	6918      	ldr	r0, [r3, #16]
 800987e:	4b61      	ldr	r3, [pc, #388]	; (8009a04 <tcp_input+0x7e4>)
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	2300      	movs	r3, #0
 8009884:	69f9      	ldr	r1, [r7, #28]
 8009886:	47a0      	blx	r4
 8009888:	4603      	mov	r3, r0
 800988a:	74fb      	strb	r3, [r7, #19]
 800988c:	e008      	b.n	80098a0 <tcp_input+0x680>
 800988e:	4b5d      	ldr	r3, [pc, #372]	; (8009a04 <tcp_input+0x7e4>)
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	2300      	movs	r3, #0
 8009894:	69f9      	ldr	r1, [r7, #28]
 8009896:	2000      	movs	r0, #0
 8009898:	f7ff f884 	bl	80089a4 <tcp_recv_null>
 800989c:	4603      	mov	r3, r0
 800989e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80098a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80098a4:	f113 0f0d 	cmn.w	r3, #13
 80098a8:	d053      	beq.n	8009952 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80098aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d003      	beq.n	80098ba <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80098b2:	4b54      	ldr	r3, [pc, #336]	; (8009a04 <tcp_input+0x7e4>)
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80098ba:	4b4f      	ldr	r3, [pc, #316]	; (80099f8 <tcp_input+0x7d8>)
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	f003 0320 	and.w	r3, r3, #32
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d030      	beq.n	8009928 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d009      	beq.n	80098e2 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098d2:	7b5a      	ldrb	r2, [r3, #13]
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098d8:	f042 0220 	orr.w	r2, r2, #32
 80098dc:	b2d2      	uxtb	r2, r2
 80098de:	735a      	strb	r2, [r3, #13]
 80098e0:	e022      	b.n	8009928 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80098ea:	d005      	beq.n	80098f8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098f0:	3301      	adds	r3, #1
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00b      	beq.n	800991a <tcp_input+0x6fa>
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	6918      	ldr	r0, [r3, #16]
 800990c:	2300      	movs	r3, #0
 800990e:	2200      	movs	r2, #0
 8009910:	69f9      	ldr	r1, [r7, #28]
 8009912:	47a0      	blx	r4
 8009914:	4603      	mov	r3, r0
 8009916:	74fb      	strb	r3, [r7, #19]
 8009918:	e001      	b.n	800991e <tcp_input+0x6fe>
 800991a:	2300      	movs	r3, #0
 800991c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800991e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009922:	f113 0f0d 	cmn.w	r3, #13
 8009926:	d016      	beq.n	8009956 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009928:	4b32      	ldr	r3, [pc, #200]	; (80099f4 <tcp_input+0x7d4>)
 800992a:	2200      	movs	r2, #0
 800992c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800992e:	69f8      	ldr	r0, [r7, #28]
 8009930:	f000 f87e 	bl	8009a30 <tcp_input_delayed_close>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10f      	bne.n	800995a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800993a:	69f8      	ldr	r0, [r7, #28]
 800993c:	f002 ff10 	bl	800c760 <tcp_output>
 8009940:	e00c      	b.n	800995c <tcp_input+0x73c>
        goto aborted;
 8009942:	bf00      	nop
 8009944:	e00a      	b.n	800995c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009946:	bf00      	nop
 8009948:	e008      	b.n	800995c <tcp_input+0x73c>
              goto aborted;
 800994a:	bf00      	nop
 800994c:	e006      	b.n	800995c <tcp_input+0x73c>
          goto aborted;
 800994e:	bf00      	nop
 8009950:	e004      	b.n	800995c <tcp_input+0x73c>
            goto aborted;
 8009952:	bf00      	nop
 8009954:	e002      	b.n	800995c <tcp_input+0x73c>
              goto aborted;
 8009956:	bf00      	nop
 8009958:	e000      	b.n	800995c <tcp_input+0x73c>
          goto aborted;
 800995a:	bf00      	nop
    tcp_input_pcb = NULL;
 800995c:	4b25      	ldr	r3, [pc, #148]	; (80099f4 <tcp_input+0x7d4>)
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009962:	4b28      	ldr	r3, [pc, #160]	; (8009a04 <tcp_input+0x7e4>)
 8009964:	2200      	movs	r2, #0
 8009966:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009968:	4b2a      	ldr	r3, [pc, #168]	; (8009a14 <tcp_input+0x7f4>)
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d03d      	beq.n	80099ec <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8009970:	4b28      	ldr	r3, [pc, #160]	; (8009a14 <tcp_input+0x7f4>)
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	4618      	mov	r0, r3
 8009976:	f7fd fb81 	bl	800707c <pbuf_free>
      inseg.p = NULL;
 800997a:	4b26      	ldr	r3, [pc, #152]	; (8009a14 <tcp_input+0x7f4>)
 800997c:	2200      	movs	r2, #0
 800997e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009980:	e034      	b.n	80099ec <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009982:	4b25      	ldr	r3, [pc, #148]	; (8009a18 <tcp_input+0x7f8>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	899b      	ldrh	r3, [r3, #12]
 8009988:	b29b      	uxth	r3, r3
 800998a:	4618      	mov	r0, r3
 800998c:	f7fc f89e 	bl	8005acc <lwip_htons>
 8009990:	4603      	mov	r3, r0
 8009992:	b2db      	uxtb	r3, r3
 8009994:	f003 0304 	and.w	r3, r3, #4
 8009998:	2b00      	cmp	r3, #0
 800999a:	d118      	bne.n	80099ce <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800999c:	4b1f      	ldr	r3, [pc, #124]	; (8009a1c <tcp_input+0x7fc>)
 800999e:	6819      	ldr	r1, [r3, #0]
 80099a0:	4b1f      	ldr	r3, [pc, #124]	; (8009a20 <tcp_input+0x800>)
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	461a      	mov	r2, r3
 80099a6:	4b1f      	ldr	r3, [pc, #124]	; (8009a24 <tcp_input+0x804>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80099ac:	4b1a      	ldr	r3, [pc, #104]	; (8009a18 <tcp_input+0x7f8>)
 80099ae:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80099b0:	885b      	ldrh	r3, [r3, #2]
 80099b2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80099b4:	4a18      	ldr	r2, [pc, #96]	; (8009a18 <tcp_input+0x7f8>)
 80099b6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80099b8:	8812      	ldrh	r2, [r2, #0]
 80099ba:	b292      	uxth	r2, r2
 80099bc:	9202      	str	r2, [sp, #8]
 80099be:	9301      	str	r3, [sp, #4]
 80099c0:	4b19      	ldr	r3, [pc, #100]	; (8009a28 <tcp_input+0x808>)
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	4b19      	ldr	r3, [pc, #100]	; (8009a2c <tcp_input+0x80c>)
 80099c6:	4602      	mov	r2, r0
 80099c8:	2000      	movs	r0, #0
 80099ca:	f003 fc8f 	bl	800d2ec <tcp_rst>
    pbuf_free(p);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7fd fb54 	bl	800707c <pbuf_free>
  return;
 80099d4:	e00a      	b.n	80099ec <tcp_input+0x7cc>
    goto dropped;
 80099d6:	bf00      	nop
 80099d8:	e004      	b.n	80099e4 <tcp_input+0x7c4>
dropped:
 80099da:	bf00      	nop
 80099dc:	e002      	b.n	80099e4 <tcp_input+0x7c4>
      goto dropped;
 80099de:	bf00      	nop
 80099e0:	e000      	b.n	80099e4 <tcp_input+0x7c4>
      goto dropped;
 80099e2:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7fd fb49 	bl	800707c <pbuf_free>
 80099ea:	e000      	b.n	80099ee <tcp_input+0x7ce>
  return;
 80099ec:	bf00      	nop
}
 80099ee:	3724      	adds	r7, #36	; 0x24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd90      	pop	{r4, r7, pc}
 80099f4:	2000719c 	.word	0x2000719c
 80099f8:	20000549 	.word	0x20000549
 80099fc:	20007188 	.word	0x20007188
 8009a00:	20000544 	.word	0x20000544
 8009a04:	2000054c 	.word	0x2000054c
 8009a08:	080148a4 	.word	0x080148a4
 8009a0c:	08014a58 	.word	0x08014a58
 8009a10:	080148f0 	.word	0x080148f0
 8009a14:	2000051c 	.word	0x2000051c
 8009a18:	2000052c 	.word	0x2000052c
 8009a1c:	20000540 	.word	0x20000540
 8009a20:	20000546 	.word	0x20000546
 8009a24:	2000053c 	.word	0x2000053c
 8009a28:	20003c34 	.word	0x20003c34
 8009a2c:	20003c38 	.word	0x20003c38

08009a30 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b082      	sub	sp, #8
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d106      	bne.n	8009a4c <tcp_input_delayed_close+0x1c>
 8009a3e:	4b17      	ldr	r3, [pc, #92]	; (8009a9c <tcp_input_delayed_close+0x6c>)
 8009a40:	f240 225a 	movw	r2, #602	; 0x25a
 8009a44:	4916      	ldr	r1, [pc, #88]	; (8009aa0 <tcp_input_delayed_close+0x70>)
 8009a46:	4817      	ldr	r0, [pc, #92]	; (8009aa4 <tcp_input_delayed_close+0x74>)
 8009a48:	f008 fd8e 	bl	8012568 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8009a4c:	4b16      	ldr	r3, [pc, #88]	; (8009aa8 <tcp_input_delayed_close+0x78>)
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	f003 0310 	and.w	r3, r3, #16
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d01c      	beq.n	8009a92 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	8b5b      	ldrh	r3, [r3, #26]
 8009a5c:	f003 0310 	and.w	r3, r3, #16
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10d      	bne.n	8009a80 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d008      	beq.n	8009a80 <tcp_input_delayed_close+0x50>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	6912      	ldr	r2, [r2, #16]
 8009a78:	f06f 010e 	mvn.w	r1, #14
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009a80:	6879      	ldr	r1, [r7, #4]
 8009a82:	480a      	ldr	r0, [pc, #40]	; (8009aac <tcp_input_delayed_close+0x7c>)
 8009a84:	f7ff fa54 	bl	8008f30 <tcp_pcb_remove>
    tcp_free(pcb);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f7fd fda7 	bl	80075dc <tcp_free>
    return 1;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e000      	b.n	8009a94 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	080148a4 	.word	0x080148a4
 8009aa0:	08014a74 	.word	0x08014a74
 8009aa4:	080148f0 	.word	0x080148f0
 8009aa8:	20000549 	.word	0x20000549
 8009aac:	20007188 	.word	0x20007188

08009ab0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009ab0:	b590      	push	{r4, r7, lr}
 8009ab2:	b08b      	sub	sp, #44	; 0x2c
 8009ab4:	af04      	add	r7, sp, #16
 8009ab6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009ab8:	4b6f      	ldr	r3, [pc, #444]	; (8009c78 <tcp_listen_input+0x1c8>)
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	f003 0304 	and.w	r3, r3, #4
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f040 80d3 	bne.w	8009c6c <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d106      	bne.n	8009ada <tcp_listen_input+0x2a>
 8009acc:	4b6b      	ldr	r3, [pc, #428]	; (8009c7c <tcp_listen_input+0x1cc>)
 8009ace:	f240 2281 	movw	r2, #641	; 0x281
 8009ad2:	496b      	ldr	r1, [pc, #428]	; (8009c80 <tcp_listen_input+0x1d0>)
 8009ad4:	486b      	ldr	r0, [pc, #428]	; (8009c84 <tcp_listen_input+0x1d4>)
 8009ad6:	f008 fd47 	bl	8012568 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8009ada:	4b67      	ldr	r3, [pc, #412]	; (8009c78 <tcp_listen_input+0x1c8>)
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	f003 0310 	and.w	r3, r3, #16
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d019      	beq.n	8009b1a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ae6:	4b68      	ldr	r3, [pc, #416]	; (8009c88 <tcp_listen_input+0x1d8>)
 8009ae8:	6819      	ldr	r1, [r3, #0]
 8009aea:	4b68      	ldr	r3, [pc, #416]	; (8009c8c <tcp_listen_input+0x1dc>)
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	4b67      	ldr	r3, [pc, #412]	; (8009c90 <tcp_listen_input+0x1e0>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009af6:	4b67      	ldr	r3, [pc, #412]	; (8009c94 <tcp_listen_input+0x1e4>)
 8009af8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009afa:	885b      	ldrh	r3, [r3, #2]
 8009afc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009afe:	4a65      	ldr	r2, [pc, #404]	; (8009c94 <tcp_listen_input+0x1e4>)
 8009b00:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b02:	8812      	ldrh	r2, [r2, #0]
 8009b04:	b292      	uxth	r2, r2
 8009b06:	9202      	str	r2, [sp, #8]
 8009b08:	9301      	str	r3, [sp, #4]
 8009b0a:	4b63      	ldr	r3, [pc, #396]	; (8009c98 <tcp_listen_input+0x1e8>)
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	4b63      	ldr	r3, [pc, #396]	; (8009c9c <tcp_listen_input+0x1ec>)
 8009b10:	4602      	mov	r2, r0
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f003 fbea 	bl	800d2ec <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009b18:	e0aa      	b.n	8009c70 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8009b1a:	4b57      	ldr	r3, [pc, #348]	; (8009c78 <tcp_listen_input+0x1c8>)
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	f003 0302 	and.w	r3, r3, #2
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f000 80a4 	beq.w	8009c70 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	7d5b      	ldrb	r3, [r3, #21]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7ff f85d 	bl	8008bec <tcp_alloc>
 8009b32:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d111      	bne.n	8009b5e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00a      	beq.n	8009b58 <tcp_listen_input+0xa8>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	6910      	ldr	r0, [r2, #16]
 8009b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b4e:	2100      	movs	r1, #0
 8009b50:	4798      	blx	r3
 8009b52:	4603      	mov	r3, r0
 8009b54:	73bb      	strb	r3, [r7, #14]
      return;
 8009b56:	e08c      	b.n	8009c72 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009b58:	23f0      	movs	r3, #240	; 0xf0
 8009b5a:	73bb      	strb	r3, [r7, #14]
      return;
 8009b5c:	e089      	b.n	8009c72 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009b5e:	4b50      	ldr	r3, [pc, #320]	; (8009ca0 <tcp_listen_input+0x1f0>)
 8009b60:	695a      	ldr	r2, [r3, #20]
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009b66:	4b4e      	ldr	r3, [pc, #312]	; (8009ca0 <tcp_listen_input+0x1f0>)
 8009b68:	691a      	ldr	r2, [r3, #16]
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	8ada      	ldrh	r2, [r3, #22]
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009b76:	4b47      	ldr	r3, [pc, #284]	; (8009c94 <tcp_listen_input+0x1e4>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	881b      	ldrh	r3, [r3, #0]
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	2203      	movs	r2, #3
 8009b86:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009b88:	4b41      	ldr	r3, [pc, #260]	; (8009c90 <tcp_listen_input+0x1e0>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	1c5a      	adds	r2, r3, #1
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8009b9a:	6978      	ldr	r0, [r7, #20]
 8009b9c:	f7ff fa5c 	bl	8009058 <tcp_next_iss>
 8009ba0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	693a      	ldr	r2, [r7, #16]
 8009bb2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8009bba:	4b35      	ldr	r3, [pc, #212]	; (8009c90 <tcp_listen_input+0x1e0>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	1e5a      	subs	r2, r3, #1
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	691a      	ldr	r2, [r3, #16]
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	7a5b      	ldrb	r3, [r3, #9]
 8009bd6:	f003 030c 	and.w	r3, r3, #12
 8009bda:	b2da      	uxtb	r2, r3
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	7a1a      	ldrb	r2, [r3, #8]
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009be8:	4b2e      	ldr	r3, [pc, #184]	; (8009ca4 <tcp_listen_input+0x1f4>)
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	60da      	str	r2, [r3, #12]
 8009bf0:	4a2c      	ldr	r2, [pc, #176]	; (8009ca4 <tcp_listen_input+0x1f4>)
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	6013      	str	r3, [r2, #0]
 8009bf6:	f003 fd3b 	bl	800d670 <tcp_timer_needed>
 8009bfa:	4b2b      	ldr	r3, [pc, #172]	; (8009ca8 <tcp_listen_input+0x1f8>)
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009c00:	6978      	ldr	r0, [r7, #20]
 8009c02:	f001 fd8f 	bl	800b724 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009c06:	4b23      	ldr	r3, [pc, #140]	; (8009c94 <tcp_listen_input+0x1e4>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	89db      	ldrh	r3, [r3, #14]
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	3304      	adds	r3, #4
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f007 fa59 	bl	80110e0 <ip4_route>
 8009c2e:	4601      	mov	r1, r0
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	3304      	adds	r3, #4
 8009c34:	461a      	mov	r2, r3
 8009c36:	4620      	mov	r0, r4
 8009c38:	f7ff fa34 	bl	80090a4 <tcp_eff_send_mss_netif>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	461a      	mov	r2, r3
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009c44:	2112      	movs	r1, #18
 8009c46:	6978      	ldr	r0, [r7, #20]
 8009c48:	f002 fc9c 	bl	800c584 <tcp_enqueue_flags>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d004      	beq.n	8009c62 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009c58:	2100      	movs	r1, #0
 8009c5a:	6978      	ldr	r0, [r7, #20]
 8009c5c:	f7fd fee0 	bl	8007a20 <tcp_abandon>
      return;
 8009c60:	e007      	b.n	8009c72 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8009c62:	6978      	ldr	r0, [r7, #20]
 8009c64:	f002 fd7c 	bl	800c760 <tcp_output>
  return;
 8009c68:	bf00      	nop
 8009c6a:	e001      	b.n	8009c70 <tcp_listen_input+0x1c0>
    return;
 8009c6c:	bf00      	nop
 8009c6e:	e000      	b.n	8009c72 <tcp_listen_input+0x1c2>
  return;
 8009c70:	bf00      	nop
}
 8009c72:	371c      	adds	r7, #28
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd90      	pop	{r4, r7, pc}
 8009c78:	20000548 	.word	0x20000548
 8009c7c:	080148a4 	.word	0x080148a4
 8009c80:	08014a9c 	.word	0x08014a9c
 8009c84:	080148f0 	.word	0x080148f0
 8009c88:	20000540 	.word	0x20000540
 8009c8c:	20000546 	.word	0x20000546
 8009c90:	2000053c 	.word	0x2000053c
 8009c94:	2000052c 	.word	0x2000052c
 8009c98:	20003c34 	.word	0x20003c34
 8009c9c:	20003c38 	.word	0x20003c38
 8009ca0:	20003c24 	.word	0x20003c24
 8009ca4:	20007188 	.word	0x20007188
 8009ca8:	20007184 	.word	0x20007184

08009cac <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af04      	add	r7, sp, #16
 8009cb2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009cb4:	4b30      	ldr	r3, [pc, #192]	; (8009d78 <tcp_timewait_input+0xcc>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	f003 0304 	and.w	r3, r3, #4
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d154      	bne.n	8009d6a <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d106      	bne.n	8009cd4 <tcp_timewait_input+0x28>
 8009cc6:	4b2d      	ldr	r3, [pc, #180]	; (8009d7c <tcp_timewait_input+0xd0>)
 8009cc8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009ccc:	492c      	ldr	r1, [pc, #176]	; (8009d80 <tcp_timewait_input+0xd4>)
 8009cce:	482d      	ldr	r0, [pc, #180]	; (8009d84 <tcp_timewait_input+0xd8>)
 8009cd0:	f008 fc4a 	bl	8012568 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009cd4:	4b28      	ldr	r3, [pc, #160]	; (8009d78 <tcp_timewait_input+0xcc>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	f003 0302 	and.w	r3, r3, #2
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d02a      	beq.n	8009d36 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009ce0:	4b29      	ldr	r3, [pc, #164]	; (8009d88 <tcp_timewait_input+0xdc>)
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	db2d      	blt.n	8009d4a <tcp_timewait_input+0x9e>
 8009cee:	4b26      	ldr	r3, [pc, #152]	; (8009d88 <tcp_timewait_input+0xdc>)
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf6:	6879      	ldr	r1, [r7, #4]
 8009cf8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009cfa:	440b      	add	r3, r1
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	dc23      	bgt.n	8009d4a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d02:	4b22      	ldr	r3, [pc, #136]	; (8009d8c <tcp_timewait_input+0xe0>)
 8009d04:	6819      	ldr	r1, [r3, #0]
 8009d06:	4b22      	ldr	r3, [pc, #136]	; (8009d90 <tcp_timewait_input+0xe4>)
 8009d08:	881b      	ldrh	r3, [r3, #0]
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	4b1e      	ldr	r3, [pc, #120]	; (8009d88 <tcp_timewait_input+0xdc>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d12:	4b20      	ldr	r3, [pc, #128]	; (8009d94 <tcp_timewait_input+0xe8>)
 8009d14:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d16:	885b      	ldrh	r3, [r3, #2]
 8009d18:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009d1a:	4a1e      	ldr	r2, [pc, #120]	; (8009d94 <tcp_timewait_input+0xe8>)
 8009d1c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009d1e:	8812      	ldrh	r2, [r2, #0]
 8009d20:	b292      	uxth	r2, r2
 8009d22:	9202      	str	r2, [sp, #8]
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	4b1c      	ldr	r3, [pc, #112]	; (8009d98 <tcp_timewait_input+0xec>)
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	4b1c      	ldr	r3, [pc, #112]	; (8009d9c <tcp_timewait_input+0xf0>)
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f003 fadc 	bl	800d2ec <tcp_rst>
      return;
 8009d34:	e01c      	b.n	8009d70 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8009d36:	4b10      	ldr	r3, [pc, #64]	; (8009d78 <tcp_timewait_input+0xcc>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	f003 0301 	and.w	r3, r3, #1
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d003      	beq.n	8009d4a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009d42:	4b17      	ldr	r3, [pc, #92]	; (8009da0 <tcp_timewait_input+0xf4>)
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8009d4a:	4b11      	ldr	r3, [pc, #68]	; (8009d90 <tcp_timewait_input+0xe4>)
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00d      	beq.n	8009d6e <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	8b5b      	ldrh	r3, [r3, #26]
 8009d56:	f043 0302 	orr.w	r3, r3, #2
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f002 fcfd 	bl	800c760 <tcp_output>
  }
  return;
 8009d66:	bf00      	nop
 8009d68:	e001      	b.n	8009d6e <tcp_timewait_input+0xc2>
    return;
 8009d6a:	bf00      	nop
 8009d6c:	e000      	b.n	8009d70 <tcp_timewait_input+0xc4>
  return;
 8009d6e:	bf00      	nop
}
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	20000548 	.word	0x20000548
 8009d7c:	080148a4 	.word	0x080148a4
 8009d80:	08014abc 	.word	0x08014abc
 8009d84:	080148f0 	.word	0x080148f0
 8009d88:	2000053c 	.word	0x2000053c
 8009d8c:	20000540 	.word	0x20000540
 8009d90:	20000546 	.word	0x20000546
 8009d94:	2000052c 	.word	0x2000052c
 8009d98:	20003c34 	.word	0x20003c34
 8009d9c:	20003c38 	.word	0x20003c38
 8009da0:	2000718c 	.word	0x2000718c

08009da4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009da4:	b590      	push	{r4, r7, lr}
 8009da6:	b08d      	sub	sp, #52	; 0x34
 8009da8:	af04      	add	r7, sp, #16
 8009daa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009dac:	2300      	movs	r3, #0
 8009dae:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d106      	bne.n	8009dc8 <tcp_process+0x24>
 8009dba:	4ba5      	ldr	r3, [pc, #660]	; (800a050 <tcp_process+0x2ac>)
 8009dbc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009dc0:	49a4      	ldr	r1, [pc, #656]	; (800a054 <tcp_process+0x2b0>)
 8009dc2:	48a5      	ldr	r0, [pc, #660]	; (800a058 <tcp_process+0x2b4>)
 8009dc4:	f008 fbd0 	bl	8012568 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009dc8:	4ba4      	ldr	r3, [pc, #656]	; (800a05c <tcp_process+0x2b8>)
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	f003 0304 	and.w	r3, r3, #4
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d04e      	beq.n	8009e72 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	7d1b      	ldrb	r3, [r3, #20]
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	d108      	bne.n	8009dee <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009de0:	4b9f      	ldr	r3, [pc, #636]	; (800a060 <tcp_process+0x2bc>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d123      	bne.n	8009e30 <tcp_process+0x8c>
        acceptable = 1;
 8009de8:	2301      	movs	r3, #1
 8009dea:	76fb      	strb	r3, [r7, #27]
 8009dec:	e020      	b.n	8009e30 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009df2:	4b9c      	ldr	r3, [pc, #624]	; (800a064 <tcp_process+0x2c0>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	d102      	bne.n	8009e00 <tcp_process+0x5c>
        acceptable = 1;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	76fb      	strb	r3, [r7, #27]
 8009dfe:	e017      	b.n	8009e30 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009e00:	4b98      	ldr	r3, [pc, #608]	; (800a064 <tcp_process+0x2c0>)
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	db10      	blt.n	8009e30 <tcp_process+0x8c>
 8009e0e:	4b95      	ldr	r3, [pc, #596]	; (800a064 <tcp_process+0x2c0>)
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e16:	6879      	ldr	r1, [r7, #4]
 8009e18:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009e1a:	440b      	add	r3, r1
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	dc06      	bgt.n	8009e30 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	8b5b      	ldrh	r3, [r3, #26]
 8009e26:	f043 0302 	orr.w	r3, r3, #2
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8009e30:	7efb      	ldrb	r3, [r7, #27]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d01b      	beq.n	8009e6e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	7d1b      	ldrb	r3, [r3, #20]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d106      	bne.n	8009e4c <tcp_process+0xa8>
 8009e3e:	4b84      	ldr	r3, [pc, #528]	; (800a050 <tcp_process+0x2ac>)
 8009e40:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009e44:	4988      	ldr	r1, [pc, #544]	; (800a068 <tcp_process+0x2c4>)
 8009e46:	4884      	ldr	r0, [pc, #528]	; (800a058 <tcp_process+0x2b4>)
 8009e48:	f008 fb8e 	bl	8012568 <iprintf>
      recv_flags |= TF_RESET;
 8009e4c:	4b87      	ldr	r3, [pc, #540]	; (800a06c <tcp_process+0x2c8>)
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	f043 0308 	orr.w	r3, r3, #8
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	4b85      	ldr	r3, [pc, #532]	; (800a06c <tcp_process+0x2c8>)
 8009e58:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	8b5b      	ldrh	r3, [r3, #26]
 8009e5e:	f023 0301 	bic.w	r3, r3, #1
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009e68:	f06f 030d 	mvn.w	r3, #13
 8009e6c:	e37a      	b.n	800a564 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	e378      	b.n	800a564 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009e72:	4b7a      	ldr	r3, [pc, #488]	; (800a05c <tcp_process+0x2b8>)
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	f003 0302 	and.w	r3, r3, #2
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d010      	beq.n	8009ea0 <tcp_process+0xfc>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	7d1b      	ldrb	r3, [r3, #20]
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d00c      	beq.n	8009ea0 <tcp_process+0xfc>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	7d1b      	ldrb	r3, [r3, #20]
 8009e8a:	2b03      	cmp	r3, #3
 8009e8c:	d008      	beq.n	8009ea0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	8b5b      	ldrh	r3, [r3, #26]
 8009e92:	f043 0302 	orr.w	r3, r3, #2
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	e361      	b.n	800a564 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	8b5b      	ldrh	r3, [r3, #26]
 8009ea4:	f003 0310 	and.w	r3, r3, #16
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d103      	bne.n	8009eb4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009eac:	4b70      	ldr	r3, [pc, #448]	; (800a070 <tcp_process+0x2cc>)
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f001 fc2d 	bl	800b724 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	7d1b      	ldrb	r3, [r3, #20]
 8009ece:	3b02      	subs	r3, #2
 8009ed0:	2b07      	cmp	r3, #7
 8009ed2:	f200 8337 	bhi.w	800a544 <tcp_process+0x7a0>
 8009ed6:	a201      	add	r2, pc, #4	; (adr r2, 8009edc <tcp_process+0x138>)
 8009ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009edc:	08009efd 	.word	0x08009efd
 8009ee0:	0800a12d 	.word	0x0800a12d
 8009ee4:	0800a2a5 	.word	0x0800a2a5
 8009ee8:	0800a2cf 	.word	0x0800a2cf
 8009eec:	0800a3f3 	.word	0x0800a3f3
 8009ef0:	0800a2a5 	.word	0x0800a2a5
 8009ef4:	0800a47f 	.word	0x0800a47f
 8009ef8:	0800a50f 	.word	0x0800a50f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009efc:	4b57      	ldr	r3, [pc, #348]	; (800a05c <tcp_process+0x2b8>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	f003 0310 	and.w	r3, r3, #16
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 80e4 	beq.w	800a0d2 <tcp_process+0x32e>
 8009f0a:	4b54      	ldr	r3, [pc, #336]	; (800a05c <tcp_process+0x2b8>)
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	f003 0302 	and.w	r3, r3, #2
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	f000 80dd 	beq.w	800a0d2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f1c:	1c5a      	adds	r2, r3, #1
 8009f1e:	4b50      	ldr	r3, [pc, #320]	; (800a060 <tcp_process+0x2bc>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	f040 80d5 	bne.w	800a0d2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009f28:	4b4e      	ldr	r3, [pc, #312]	; (800a064 <tcp_process+0x2c0>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	1c5a      	adds	r2, r3, #1
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009f3a:	4b49      	ldr	r3, [pc, #292]	; (800a060 <tcp_process+0x2bc>)
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8009f42:	4b4c      	ldr	r3, [pc, #304]	; (800a074 <tcp_process+0x2d0>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	89db      	ldrh	r3, [r3, #14]
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009f5c:	4b41      	ldr	r3, [pc, #260]	; (800a064 <tcp_process+0x2c0>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	1e5a      	subs	r2, r3, #1
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2204      	movs	r2, #4
 8009f6a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	3304      	adds	r3, #4
 8009f74:	4618      	mov	r0, r3
 8009f76:	f007 f8b3 	bl	80110e0 <ip4_route>
 8009f7a:	4601      	mov	r1, r0
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	3304      	adds	r3, #4
 8009f80:	461a      	mov	r2, r3
 8009f82:	4620      	mov	r0, r4
 8009f84:	f7ff f88e 	bl	80090a4 <tcp_eff_send_mss_netif>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f94:	009a      	lsls	r2, r3, #2
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009f9a:	005b      	lsls	r3, r3, #1
 8009f9c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009fa0:	428b      	cmp	r3, r1
 8009fa2:	bf38      	it	cc
 8009fa4:	460b      	movcc	r3, r1
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d204      	bcs.n	8009fb4 <tcp_process+0x210>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	e00d      	b.n	8009fd0 <tcp_process+0x22c>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009fb8:	005b      	lsls	r3, r3, #1
 8009fba:	f241 121c 	movw	r2, #4380	; 0x111c
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d904      	bls.n	8009fcc <tcp_process+0x228>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009fc6:	005b      	lsls	r3, r3, #1
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	e001      	b.n	8009fd0 <tcp_process+0x22c>
 8009fcc:	f241 131c 	movw	r3, #4380	; 0x111c
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d106      	bne.n	8009fee <tcp_process+0x24a>
 8009fe0:	4b1b      	ldr	r3, [pc, #108]	; (800a050 <tcp_process+0x2ac>)
 8009fe2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009fe6:	4924      	ldr	r1, [pc, #144]	; (800a078 <tcp_process+0x2d4>)
 8009fe8:	481b      	ldr	r0, [pc, #108]	; (800a058 <tcp_process+0x2b4>)
 8009fea:	f008 fabd 	bl	8012568 <iprintf>
        --pcb->snd_queuelen;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a002:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d111      	bne.n	800a02e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a00e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d106      	bne.n	800a024 <tcp_process+0x280>
 800a016:	4b0e      	ldr	r3, [pc, #56]	; (800a050 <tcp_process+0x2ac>)
 800a018:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a01c:	4917      	ldr	r1, [pc, #92]	; (800a07c <tcp_process+0x2d8>)
 800a01e:	480e      	ldr	r0, [pc, #56]	; (800a058 <tcp_process+0x2b4>)
 800a020:	f008 faa2 	bl	8012568 <iprintf>
          pcb->unsent = rseg->next;
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	66da      	str	r2, [r3, #108]	; 0x6c
 800a02c:	e003      	b.n	800a036 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800a036:	69f8      	ldr	r0, [r7, #28]
 800a038:	f7fe fc52 	bl	80088e0 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a040:	2b00      	cmp	r3, #0
 800a042:	d11d      	bne.n	800a080 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a04a:	861a      	strh	r2, [r3, #48]	; 0x30
 800a04c:	e01f      	b.n	800a08e <tcp_process+0x2ea>
 800a04e:	bf00      	nop
 800a050:	080148a4 	.word	0x080148a4
 800a054:	08014adc 	.word	0x08014adc
 800a058:	080148f0 	.word	0x080148f0
 800a05c:	20000548 	.word	0x20000548
 800a060:	20000540 	.word	0x20000540
 800a064:	2000053c 	.word	0x2000053c
 800a068:	08014af8 	.word	0x08014af8
 800a06c:	20000549 	.word	0x20000549
 800a070:	2000718c 	.word	0x2000718c
 800a074:	2000052c 	.word	0x2000052c
 800a078:	08014b18 	.word	0x08014b18
 800a07c:	08014b30 	.word	0x08014b30
        } else {
          pcb->rtime = 0;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00a      	beq.n	800a0ae <tcp_process+0x30a>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a09e:	687a      	ldr	r2, [r7, #4]
 800a0a0:	6910      	ldr	r0, [r2, #16]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	6879      	ldr	r1, [r7, #4]
 800a0a6:	4798      	blx	r3
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	76bb      	strb	r3, [r7, #26]
 800a0ac:	e001      	b.n	800a0b2 <tcp_process+0x30e>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a0b2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a0b6:	f113 0f0d 	cmn.w	r3, #13
 800a0ba:	d102      	bne.n	800a0c2 <tcp_process+0x31e>
          return ERR_ABRT;
 800a0bc:	f06f 030c 	mvn.w	r3, #12
 800a0c0:	e250      	b.n	800a564 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	8b5b      	ldrh	r3, [r3, #26]
 800a0c6:	f043 0302 	orr.w	r3, r3, #2
 800a0ca:	b29a      	uxth	r2, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a0d0:	e23a      	b.n	800a548 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a0d2:	4b9d      	ldr	r3, [pc, #628]	; (800a348 <tcp_process+0x5a4>)
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	f003 0310 	and.w	r3, r3, #16
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f000 8234 	beq.w	800a548 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0e0:	4b9a      	ldr	r3, [pc, #616]	; (800a34c <tcp_process+0x5a8>)
 800a0e2:	6819      	ldr	r1, [r3, #0]
 800a0e4:	4b9a      	ldr	r3, [pc, #616]	; (800a350 <tcp_process+0x5ac>)
 800a0e6:	881b      	ldrh	r3, [r3, #0]
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	4b9a      	ldr	r3, [pc, #616]	; (800a354 <tcp_process+0x5b0>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0f0:	4b99      	ldr	r3, [pc, #612]	; (800a358 <tcp_process+0x5b4>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0f4:	885b      	ldrh	r3, [r3, #2]
 800a0f6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0f8:	4a97      	ldr	r2, [pc, #604]	; (800a358 <tcp_process+0x5b4>)
 800a0fa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0fc:	8812      	ldrh	r2, [r2, #0]
 800a0fe:	b292      	uxth	r2, r2
 800a100:	9202      	str	r2, [sp, #8]
 800a102:	9301      	str	r3, [sp, #4]
 800a104:	4b95      	ldr	r3, [pc, #596]	; (800a35c <tcp_process+0x5b8>)
 800a106:	9300      	str	r3, [sp, #0]
 800a108:	4b95      	ldr	r3, [pc, #596]	; (800a360 <tcp_process+0x5bc>)
 800a10a:	4602      	mov	r2, r0
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f003 f8ed 	bl	800d2ec <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a118:	2b05      	cmp	r3, #5
 800a11a:	f200 8215 	bhi.w	800a548 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f002 feab 	bl	800ce80 <tcp_rexmit_rto>
      break;
 800a12a:	e20d      	b.n	800a548 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a12c:	4b86      	ldr	r3, [pc, #536]	; (800a348 <tcp_process+0x5a4>)
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	f003 0310 	and.w	r3, r3, #16
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 80a1 	beq.w	800a27c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a13a:	4b84      	ldr	r3, [pc, #528]	; (800a34c <tcp_process+0x5a8>)
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	3b01      	subs	r3, #1
 800a146:	2b00      	cmp	r3, #0
 800a148:	db7e      	blt.n	800a248 <tcp_process+0x4a4>
 800a14a:	4b80      	ldr	r3, [pc, #512]	; (800a34c <tcp_process+0x5a8>)
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	2b00      	cmp	r3, #0
 800a156:	dc77      	bgt.n	800a248 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2204      	movs	r2, #4
 800a15c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a162:	2b00      	cmp	r3, #0
 800a164:	d102      	bne.n	800a16c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a166:	23fa      	movs	r3, #250	; 0xfa
 800a168:	76bb      	strb	r3, [r7, #26]
 800a16a:	e01d      	b.n	800a1a8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d106      	bne.n	800a184 <tcp_process+0x3e0>
 800a176:	4b7b      	ldr	r3, [pc, #492]	; (800a364 <tcp_process+0x5c0>)
 800a178:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a17c:	497a      	ldr	r1, [pc, #488]	; (800a368 <tcp_process+0x5c4>)
 800a17e:	487b      	ldr	r0, [pc, #492]	; (800a36c <tcp_process+0x5c8>)
 800a180:	f008 f9f2 	bl	8012568 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a188:	699b      	ldr	r3, [r3, #24]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00a      	beq.n	800a1a4 <tcp_process+0x400>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a192:	699b      	ldr	r3, [r3, #24]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	6910      	ldr	r0, [r2, #16]
 800a198:	2200      	movs	r2, #0
 800a19a:	6879      	ldr	r1, [r7, #4]
 800a19c:	4798      	blx	r3
 800a19e:	4603      	mov	r3, r0
 800a1a0:	76bb      	strb	r3, [r7, #26]
 800a1a2:	e001      	b.n	800a1a8 <tcp_process+0x404>
 800a1a4:	23f0      	movs	r3, #240	; 0xf0
 800a1a6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a1a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00a      	beq.n	800a1c6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a1b0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a1b4:	f113 0f0d 	cmn.w	r3, #13
 800a1b8:	d002      	beq.n	800a1c0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7fd fcee 	bl	8007b9c <tcp_abort>
            }
            return ERR_ABRT;
 800a1c0:	f06f 030c 	mvn.w	r3, #12
 800a1c4:	e1ce      	b.n	800a564 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 fae0 	bl	800a78c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a1cc:	4b68      	ldr	r3, [pc, #416]	; (800a370 <tcp_process+0x5cc>)
 800a1ce:	881b      	ldrh	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d005      	beq.n	800a1e0 <tcp_process+0x43c>
            recv_acked--;
 800a1d4:	4b66      	ldr	r3, [pc, #408]	; (800a370 <tcp_process+0x5cc>)
 800a1d6:	881b      	ldrh	r3, [r3, #0]
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	4b64      	ldr	r3, [pc, #400]	; (800a370 <tcp_process+0x5cc>)
 800a1de:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1e4:	009a      	lsls	r2, r3, #2
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1ea:	005b      	lsls	r3, r3, #1
 800a1ec:	f241 111c 	movw	r1, #4380	; 0x111c
 800a1f0:	428b      	cmp	r3, r1
 800a1f2:	bf38      	it	cc
 800a1f4:	460b      	movcc	r3, r1
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d204      	bcs.n	800a204 <tcp_process+0x460>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	b29b      	uxth	r3, r3
 800a202:	e00d      	b.n	800a220 <tcp_process+0x47c>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	f241 121c 	movw	r2, #4380	; 0x111c
 800a20e:	4293      	cmp	r3, r2
 800a210:	d904      	bls.n	800a21c <tcp_process+0x478>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	b29b      	uxth	r3, r3
 800a21a:	e001      	b.n	800a220 <tcp_process+0x47c>
 800a21c:	f241 131c 	movw	r3, #4380	; 0x111c
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a226:	4b53      	ldr	r3, [pc, #332]	; (800a374 <tcp_process+0x5d0>)
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	f003 0320 	and.w	r3, r3, #32
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d037      	beq.n	800a2a2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	8b5b      	ldrh	r3, [r3, #26]
 800a236:	f043 0302 	orr.w	r3, r3, #2
 800a23a:	b29a      	uxth	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2207      	movs	r2, #7
 800a244:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a246:	e02c      	b.n	800a2a2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a248:	4b40      	ldr	r3, [pc, #256]	; (800a34c <tcp_process+0x5a8>)
 800a24a:	6819      	ldr	r1, [r3, #0]
 800a24c:	4b40      	ldr	r3, [pc, #256]	; (800a350 <tcp_process+0x5ac>)
 800a24e:	881b      	ldrh	r3, [r3, #0]
 800a250:	461a      	mov	r2, r3
 800a252:	4b40      	ldr	r3, [pc, #256]	; (800a354 <tcp_process+0x5b0>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a258:	4b3f      	ldr	r3, [pc, #252]	; (800a358 <tcp_process+0x5b4>)
 800a25a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a25c:	885b      	ldrh	r3, [r3, #2]
 800a25e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a260:	4a3d      	ldr	r2, [pc, #244]	; (800a358 <tcp_process+0x5b4>)
 800a262:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a264:	8812      	ldrh	r2, [r2, #0]
 800a266:	b292      	uxth	r2, r2
 800a268:	9202      	str	r2, [sp, #8]
 800a26a:	9301      	str	r3, [sp, #4]
 800a26c:	4b3b      	ldr	r3, [pc, #236]	; (800a35c <tcp_process+0x5b8>)
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	4b3b      	ldr	r3, [pc, #236]	; (800a360 <tcp_process+0x5bc>)
 800a272:	4602      	mov	r2, r0
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f003 f839 	bl	800d2ec <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a27a:	e167      	b.n	800a54c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a27c:	4b32      	ldr	r3, [pc, #200]	; (800a348 <tcp_process+0x5a4>)
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	f003 0302 	and.w	r3, r3, #2
 800a284:	2b00      	cmp	r3, #0
 800a286:	f000 8161 	beq.w	800a54c <tcp_process+0x7a8>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28e:	1e5a      	subs	r2, r3, #1
 800a290:	4b30      	ldr	r3, [pc, #192]	; (800a354 <tcp_process+0x5b0>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	429a      	cmp	r2, r3
 800a296:	f040 8159 	bne.w	800a54c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f002 fe12 	bl	800cec4 <tcp_rexmit>
      break;
 800a2a0:	e154      	b.n	800a54c <tcp_process+0x7a8>
 800a2a2:	e153      	b.n	800a54c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 fa71 	bl	800a78c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a2aa:	4b32      	ldr	r3, [pc, #200]	; (800a374 <tcp_process+0x5d0>)
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	f003 0320 	and.w	r3, r3, #32
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f000 814c 	beq.w	800a550 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	8b5b      	ldrh	r3, [r3, #26]
 800a2bc:	f043 0302 	orr.w	r3, r3, #2
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2207      	movs	r2, #7
 800a2ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a2cc:	e140      	b.n	800a550 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fa5c 	bl	800a78c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a2d4:	4b27      	ldr	r3, [pc, #156]	; (800a374 <tcp_process+0x5d0>)
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	f003 0320 	and.w	r3, r3, #32
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d071      	beq.n	800a3c4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a2e0:	4b19      	ldr	r3, [pc, #100]	; (800a348 <tcp_process+0x5a4>)
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	f003 0310 	and.w	r3, r3, #16
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d060      	beq.n	800a3ae <tcp_process+0x60a>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a2f0:	4b16      	ldr	r3, [pc, #88]	; (800a34c <tcp_process+0x5a8>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d15a      	bne.n	800a3ae <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d156      	bne.n	800a3ae <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	8b5b      	ldrh	r3, [r3, #26]
 800a304:	f043 0302 	orr.w	r3, r3, #2
 800a308:	b29a      	uxth	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7fe fdbe 	bl	8008e90 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a314:	4b18      	ldr	r3, [pc, #96]	; (800a378 <tcp_process+0x5d4>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d105      	bne.n	800a32a <tcp_process+0x586>
 800a31e:	4b16      	ldr	r3, [pc, #88]	; (800a378 <tcp_process+0x5d4>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	4a14      	ldr	r2, [pc, #80]	; (800a378 <tcp_process+0x5d4>)
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	e02e      	b.n	800a388 <tcp_process+0x5e4>
 800a32a:	4b13      	ldr	r3, [pc, #76]	; (800a378 <tcp_process+0x5d4>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	617b      	str	r3, [r7, #20]
 800a330:	e027      	b.n	800a382 <tcp_process+0x5de>
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d11f      	bne.n	800a37c <tcp_process+0x5d8>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	68da      	ldr	r2, [r3, #12]
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	60da      	str	r2, [r3, #12]
 800a344:	e020      	b.n	800a388 <tcp_process+0x5e4>
 800a346:	bf00      	nop
 800a348:	20000548 	.word	0x20000548
 800a34c:	20000540 	.word	0x20000540
 800a350:	20000546 	.word	0x20000546
 800a354:	2000053c 	.word	0x2000053c
 800a358:	2000052c 	.word	0x2000052c
 800a35c:	20003c34 	.word	0x20003c34
 800a360:	20003c38 	.word	0x20003c38
 800a364:	080148a4 	.word	0x080148a4
 800a368:	08014b44 	.word	0x08014b44
 800a36c:	080148f0 	.word	0x080148f0
 800a370:	20000544 	.word	0x20000544
 800a374:	20000549 	.word	0x20000549
 800a378:	20007188 	.word	0x20007188
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	617b      	str	r3, [r7, #20]
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1d4      	bne.n	800a332 <tcp_process+0x58e>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	60da      	str	r2, [r3, #12]
 800a38e:	4b77      	ldr	r3, [pc, #476]	; (800a56c <tcp_process+0x7c8>)
 800a390:	2201      	movs	r2, #1
 800a392:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	220a      	movs	r2, #10
 800a398:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a39a:	4b75      	ldr	r3, [pc, #468]	; (800a570 <tcp_process+0x7cc>)
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	60da      	str	r2, [r3, #12]
 800a3a2:	4a73      	ldr	r2, [pc, #460]	; (800a570 <tcp_process+0x7cc>)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6013      	str	r3, [r2, #0]
 800a3a8:	f003 f962 	bl	800d670 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a3ac:	e0d2      	b.n	800a554 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	8b5b      	ldrh	r3, [r3, #26]
 800a3b2:	f043 0302 	orr.w	r3, r3, #2
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2208      	movs	r2, #8
 800a3c0:	751a      	strb	r2, [r3, #20]
      break;
 800a3c2:	e0c7      	b.n	800a554 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a3c4:	4b6b      	ldr	r3, [pc, #428]	; (800a574 <tcp_process+0x7d0>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	f003 0310 	and.w	r3, r3, #16
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f000 80c1 	beq.w	800a554 <tcp_process+0x7b0>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a3d6:	4b68      	ldr	r3, [pc, #416]	; (800a578 <tcp_process+0x7d4>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	f040 80ba 	bne.w	800a554 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f040 80b5 	bne.w	800a554 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2206      	movs	r2, #6
 800a3ee:	751a      	strb	r2, [r3, #20]
      break;
 800a3f0:	e0b0      	b.n	800a554 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f9ca 	bl	800a78c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a3f8:	4b60      	ldr	r3, [pc, #384]	; (800a57c <tcp_process+0x7d8>)
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	f003 0320 	and.w	r3, r3, #32
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 80a9 	beq.w	800a558 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	8b5b      	ldrh	r3, [r3, #26]
 800a40a:	f043 0302 	orr.w	r3, r3, #2
 800a40e:	b29a      	uxth	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7fe fd3b 	bl	8008e90 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a41a:	4b59      	ldr	r3, [pc, #356]	; (800a580 <tcp_process+0x7dc>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	429a      	cmp	r2, r3
 800a422:	d105      	bne.n	800a430 <tcp_process+0x68c>
 800a424:	4b56      	ldr	r3, [pc, #344]	; (800a580 <tcp_process+0x7dc>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	4a55      	ldr	r2, [pc, #340]	; (800a580 <tcp_process+0x7dc>)
 800a42c:	6013      	str	r3, [r2, #0]
 800a42e:	e013      	b.n	800a458 <tcp_process+0x6b4>
 800a430:	4b53      	ldr	r3, [pc, #332]	; (800a580 <tcp_process+0x7dc>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	613b      	str	r3, [r7, #16]
 800a436:	e00c      	b.n	800a452 <tcp_process+0x6ae>
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d104      	bne.n	800a44c <tcp_process+0x6a8>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68da      	ldr	r2, [r3, #12]
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	60da      	str	r2, [r3, #12]
 800a44a:	e005      	b.n	800a458 <tcp_process+0x6b4>
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	613b      	str	r3, [r7, #16]
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1ef      	bne.n	800a438 <tcp_process+0x694>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	60da      	str	r2, [r3, #12]
 800a45e:	4b43      	ldr	r3, [pc, #268]	; (800a56c <tcp_process+0x7c8>)
 800a460:	2201      	movs	r2, #1
 800a462:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	220a      	movs	r2, #10
 800a468:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a46a:	4b41      	ldr	r3, [pc, #260]	; (800a570 <tcp_process+0x7cc>)
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	60da      	str	r2, [r3, #12]
 800a472:	4a3f      	ldr	r2, [pc, #252]	; (800a570 <tcp_process+0x7cc>)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	f003 f8fa 	bl	800d670 <tcp_timer_needed>
      }
      break;
 800a47c:	e06c      	b.n	800a558 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 f984 	bl	800a78c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a484:	4b3b      	ldr	r3, [pc, #236]	; (800a574 <tcp_process+0x7d0>)
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	f003 0310 	and.w	r3, r3, #16
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d065      	beq.n	800a55c <tcp_process+0x7b8>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a494:	4b38      	ldr	r3, [pc, #224]	; (800a578 <tcp_process+0x7d4>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d15f      	bne.n	800a55c <tcp_process+0x7b8>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d15b      	bne.n	800a55c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f7fe fcf3 	bl	8008e90 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a4aa:	4b35      	ldr	r3, [pc, #212]	; (800a580 <tcp_process+0x7dc>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d105      	bne.n	800a4c0 <tcp_process+0x71c>
 800a4b4:	4b32      	ldr	r3, [pc, #200]	; (800a580 <tcp_process+0x7dc>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	4a31      	ldr	r2, [pc, #196]	; (800a580 <tcp_process+0x7dc>)
 800a4bc:	6013      	str	r3, [r2, #0]
 800a4be:	e013      	b.n	800a4e8 <tcp_process+0x744>
 800a4c0:	4b2f      	ldr	r3, [pc, #188]	; (800a580 <tcp_process+0x7dc>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	60fb      	str	r3, [r7, #12]
 800a4c6:	e00c      	b.n	800a4e2 <tcp_process+0x73e>
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d104      	bne.n	800a4dc <tcp_process+0x738>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	68da      	ldr	r2, [r3, #12]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	60da      	str	r2, [r3, #12]
 800a4da:	e005      	b.n	800a4e8 <tcp_process+0x744>
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	60fb      	str	r3, [r7, #12]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1ef      	bne.n	800a4c8 <tcp_process+0x724>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	60da      	str	r2, [r3, #12]
 800a4ee:	4b1f      	ldr	r3, [pc, #124]	; (800a56c <tcp_process+0x7c8>)
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	220a      	movs	r2, #10
 800a4f8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a4fa:	4b1d      	ldr	r3, [pc, #116]	; (800a570 <tcp_process+0x7cc>)
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	60da      	str	r2, [r3, #12]
 800a502:	4a1b      	ldr	r2, [pc, #108]	; (800a570 <tcp_process+0x7cc>)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6013      	str	r3, [r2, #0]
 800a508:	f003 f8b2 	bl	800d670 <tcp_timer_needed>
      }
      break;
 800a50c:	e026      	b.n	800a55c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f93c 	bl	800a78c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a514:	4b17      	ldr	r3, [pc, #92]	; (800a574 <tcp_process+0x7d0>)
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	f003 0310 	and.w	r3, r3, #16
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d01f      	beq.n	800a560 <tcp_process+0x7bc>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a524:	4b14      	ldr	r3, [pc, #80]	; (800a578 <tcp_process+0x7d4>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d119      	bne.n	800a560 <tcp_process+0x7bc>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a530:	2b00      	cmp	r3, #0
 800a532:	d115      	bne.n	800a560 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800a534:	4b11      	ldr	r3, [pc, #68]	; (800a57c <tcp_process+0x7d8>)
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	f043 0310 	orr.w	r3, r3, #16
 800a53c:	b2da      	uxtb	r2, r3
 800a53e:	4b0f      	ldr	r3, [pc, #60]	; (800a57c <tcp_process+0x7d8>)
 800a540:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a542:	e00d      	b.n	800a560 <tcp_process+0x7bc>
    default:
      break;
 800a544:	bf00      	nop
 800a546:	e00c      	b.n	800a562 <tcp_process+0x7be>
      break;
 800a548:	bf00      	nop
 800a54a:	e00a      	b.n	800a562 <tcp_process+0x7be>
      break;
 800a54c:	bf00      	nop
 800a54e:	e008      	b.n	800a562 <tcp_process+0x7be>
      break;
 800a550:	bf00      	nop
 800a552:	e006      	b.n	800a562 <tcp_process+0x7be>
      break;
 800a554:	bf00      	nop
 800a556:	e004      	b.n	800a562 <tcp_process+0x7be>
      break;
 800a558:	bf00      	nop
 800a55a:	e002      	b.n	800a562 <tcp_process+0x7be>
      break;
 800a55c:	bf00      	nop
 800a55e:	e000      	b.n	800a562 <tcp_process+0x7be>
      break;
 800a560:	bf00      	nop
  }
  return ERR_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3724      	adds	r7, #36	; 0x24
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd90      	pop	{r4, r7, pc}
 800a56c:	20007184 	.word	0x20007184
 800a570:	20007198 	.word	0x20007198
 800a574:	20000548 	.word	0x20000548
 800a578:	20000540 	.word	0x20000540
 800a57c:	20000549 	.word	0x20000549
 800a580:	20007188 	.word	0x20007188

0800a584 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800a584:	b590      	push	{r4, r7, lr}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d106      	bne.n	800a5a2 <tcp_oos_insert_segment+0x1e>
 800a594:	4b3b      	ldr	r3, [pc, #236]	; (800a684 <tcp_oos_insert_segment+0x100>)
 800a596:	f240 421f 	movw	r2, #1055	; 0x41f
 800a59a:	493b      	ldr	r1, [pc, #236]	; (800a688 <tcp_oos_insert_segment+0x104>)
 800a59c:	483b      	ldr	r0, [pc, #236]	; (800a68c <tcp_oos_insert_segment+0x108>)
 800a59e:	f007 ffe3 	bl	8012568 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	68db      	ldr	r3, [r3, #12]
 800a5a6:	899b      	ldrh	r3, [r3, #12]
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7fb fa8e 	bl	8005acc <lwip_htons>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	f003 0301 	and.w	r3, r3, #1
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d028      	beq.n	800a60e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800a5bc:	6838      	ldr	r0, [r7, #0]
 800a5be:	f7fe f97b 	bl	80088b8 <tcp_segs_free>
    next = NULL;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	603b      	str	r3, [r7, #0]
 800a5c6:	e056      	b.n	800a676 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	899b      	ldrh	r3, [r3, #12]
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7fb fa7b 	bl	8005acc <lwip_htons>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	b2db      	uxtb	r3, r3
 800a5da:	f003 0301 	and.w	r3, r3, #1
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00d      	beq.n	800a5fe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	899b      	ldrh	r3, [r3, #12]
 800a5e8:	b29c      	uxth	r4, r3
 800a5ea:	2001      	movs	r0, #1
 800a5ec:	f7fb fa6e 	bl	8005acc <lwip_htons>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	4322      	orrs	r2, r4
 800a5fa:	b292      	uxth	r2, r2
 800a5fc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f7fe f969 	bl	80088e0 <tcp_seg_free>
    while (next &&
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00e      	beq.n	800a632 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	891b      	ldrh	r3, [r3, #8]
 800a618:	461a      	mov	r2, r3
 800a61a:	4b1d      	ldr	r3, [pc, #116]	; (800a690 <tcp_oos_insert_segment+0x10c>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	441a      	add	r2, r3
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	6839      	ldr	r1, [r7, #0]
 800a628:	8909      	ldrh	r1, [r1, #8]
 800a62a:	440b      	add	r3, r1
 800a62c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800a62e:	2b00      	cmp	r3, #0
 800a630:	daca      	bge.n	800a5c8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d01e      	beq.n	800a676 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	891b      	ldrh	r3, [r3, #8]
 800a63c:	461a      	mov	r2, r3
 800a63e:	4b14      	ldr	r3, [pc, #80]	; (800a690 <tcp_oos_insert_segment+0x10c>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	441a      	add	r2, r3
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	68db      	ldr	r3, [r3, #12]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	dd12      	ble.n	800a676 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	b29a      	uxth	r2, r3
 800a658:	4b0d      	ldr	r3, [pc, #52]	; (800a690 <tcp_oos_insert_segment+0x10c>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	1ad3      	subs	r3, r2, r3
 800a660:	b29a      	uxth	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	891b      	ldrh	r3, [r3, #8]
 800a66e:	4619      	mov	r1, r3
 800a670:	4610      	mov	r0, r2
 800a672:	f7fc fb7d 	bl	8006d70 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	601a      	str	r2, [r3, #0]
}
 800a67c:	bf00      	nop
 800a67e:	3714      	adds	r7, #20
 800a680:	46bd      	mov	sp, r7
 800a682:	bd90      	pop	{r4, r7, pc}
 800a684:	080148a4 	.word	0x080148a4
 800a688:	08014b64 	.word	0x08014b64
 800a68c:	080148f0 	.word	0x080148f0
 800a690:	2000053c 	.word	0x2000053c

0800a694 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800a694:	b5b0      	push	{r4, r5, r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
 800a6a0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800a6a2:	e03e      	b.n	800a722 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fc fd6a 	bl	800718c <pbuf_clen>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a6c2:	8a7a      	ldrh	r2, [r7, #18]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d906      	bls.n	800a6d6 <tcp_free_acked_segments+0x42>
 800a6c8:	4b2a      	ldr	r3, [pc, #168]	; (800a774 <tcp_free_acked_segments+0xe0>)
 800a6ca:	f240 4257 	movw	r2, #1111	; 0x457
 800a6ce:	492a      	ldr	r1, [pc, #168]	; (800a778 <tcp_free_acked_segments+0xe4>)
 800a6d0:	482a      	ldr	r0, [pc, #168]	; (800a77c <tcp_free_acked_segments+0xe8>)
 800a6d2:	f007 ff49 	bl	8012568 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a6dc:	8a7b      	ldrh	r3, [r7, #18]
 800a6de:	1ad3      	subs	r3, r2, r3
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	891a      	ldrh	r2, [r3, #8]
 800a6ec:	4b24      	ldr	r3, [pc, #144]	; (800a780 <tcp_free_acked_segments+0xec>)
 800a6ee:	881b      	ldrh	r3, [r3, #0]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	4b22      	ldr	r3, [pc, #136]	; (800a780 <tcp_free_acked_segments+0xec>)
 800a6f6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a6f8:	6978      	ldr	r0, [r7, #20]
 800a6fa:	f7fe f8f1 	bl	80088e0 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00c      	beq.n	800a722 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d109      	bne.n	800a722 <tcp_free_acked_segments+0x8e>
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d106      	bne.n	800a722 <tcp_free_acked_segments+0x8e>
 800a714:	4b17      	ldr	r3, [pc, #92]	; (800a774 <tcp_free_acked_segments+0xe0>)
 800a716:	f240 4262 	movw	r2, #1122	; 0x462
 800a71a:	491a      	ldr	r1, [pc, #104]	; (800a784 <tcp_free_acked_segments+0xf0>)
 800a71c:	4817      	ldr	r0, [pc, #92]	; (800a77c <tcp_free_acked_segments+0xe8>)
 800a71e:	f007 ff23 	bl	8012568 <iprintf>
  while (seg_list != NULL &&
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d020      	beq.n	800a76a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	4618      	mov	r0, r3
 800a730:	f7fb f9e1 	bl	8005af6 <lwip_htonl>
 800a734:	4604      	mov	r4, r0
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	891b      	ldrh	r3, [r3, #8]
 800a73a:	461d      	mov	r5, r3
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	68db      	ldr	r3, [r3, #12]
 800a740:	899b      	ldrh	r3, [r3, #12]
 800a742:	b29b      	uxth	r3, r3
 800a744:	4618      	mov	r0, r3
 800a746:	f7fb f9c1 	bl	8005acc <lwip_htons>
 800a74a:	4603      	mov	r3, r0
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	f003 0303 	and.w	r3, r3, #3
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <tcp_free_acked_segments+0xc6>
 800a756:	2301      	movs	r3, #1
 800a758:	e000      	b.n	800a75c <tcp_free_acked_segments+0xc8>
 800a75a:	2300      	movs	r3, #0
 800a75c:	442b      	add	r3, r5
 800a75e:	18e2      	adds	r2, r4, r3
 800a760:	4b09      	ldr	r3, [pc, #36]	; (800a788 <tcp_free_acked_segments+0xf4>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a766:	2b00      	cmp	r3, #0
 800a768:	dd9c      	ble.n	800a6a4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a76a:	68bb      	ldr	r3, [r7, #8]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3718      	adds	r7, #24
 800a770:	46bd      	mov	sp, r7
 800a772:	bdb0      	pop	{r4, r5, r7, pc}
 800a774:	080148a4 	.word	0x080148a4
 800a778:	08014b8c 	.word	0x08014b8c
 800a77c:	080148f0 	.word	0x080148f0
 800a780:	20000544 	.word	0x20000544
 800a784:	08014bb4 	.word	0x08014bb4
 800a788:	20000540 	.word	0x20000540

0800a78c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a78c:	b5b0      	push	{r4, r5, r7, lr}
 800a78e:	b094      	sub	sp, #80	; 0x50
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a794:	2300      	movs	r3, #0
 800a796:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d106      	bne.n	800a7ac <tcp_receive+0x20>
 800a79e:	4ba6      	ldr	r3, [pc, #664]	; (800aa38 <tcp_receive+0x2ac>)
 800a7a0:	f240 427b 	movw	r2, #1147	; 0x47b
 800a7a4:	49a5      	ldr	r1, [pc, #660]	; (800aa3c <tcp_receive+0x2b0>)
 800a7a6:	48a6      	ldr	r0, [pc, #664]	; (800aa40 <tcp_receive+0x2b4>)
 800a7a8:	f007 fede 	bl	8012568 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	7d1b      	ldrb	r3, [r3, #20]
 800a7b0:	2b03      	cmp	r3, #3
 800a7b2:	d806      	bhi.n	800a7c2 <tcp_receive+0x36>
 800a7b4:	4ba0      	ldr	r3, [pc, #640]	; (800aa38 <tcp_receive+0x2ac>)
 800a7b6:	f240 427c 	movw	r2, #1148	; 0x47c
 800a7ba:	49a2      	ldr	r1, [pc, #648]	; (800aa44 <tcp_receive+0x2b8>)
 800a7bc:	48a0      	ldr	r0, [pc, #640]	; (800aa40 <tcp_receive+0x2b4>)
 800a7be:	f007 fed3 	bl	8012568 <iprintf>

  if (flags & TCP_ACK) {
 800a7c2:	4ba1      	ldr	r3, [pc, #644]	; (800aa48 <tcp_receive+0x2bc>)
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	f003 0310 	and.w	r3, r3, #16
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f000 8263 	beq.w	800ac96 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7dc:	4413      	add	r3, r2
 800a7de:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7e4:	4b99      	ldr	r3, [pc, #612]	; (800aa4c <tcp_receive+0x2c0>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	db1b      	blt.n	800a826 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7f2:	4b96      	ldr	r3, [pc, #600]	; (800aa4c <tcp_receive+0x2c0>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d106      	bne.n	800a808 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a7fe:	4b94      	ldr	r3, [pc, #592]	; (800aa50 <tcp_receive+0x2c4>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	1ad3      	subs	r3, r2, r3
 800a804:	2b00      	cmp	r3, #0
 800a806:	db0e      	blt.n	800a826 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a80c:	4b90      	ldr	r3, [pc, #576]	; (800aa50 <tcp_receive+0x2c4>)
 800a80e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a810:	429a      	cmp	r2, r3
 800a812:	d125      	bne.n	800a860 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a814:	4b8f      	ldr	r3, [pc, #572]	; (800aa54 <tcp_receive+0x2c8>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	89db      	ldrh	r3, [r3, #14]
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a822:	429a      	cmp	r2, r3
 800a824:	d91c      	bls.n	800a860 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a826:	4b8b      	ldr	r3, [pc, #556]	; (800aa54 <tcp_receive+0x2c8>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	89db      	ldrh	r3, [r3, #14]
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a840:	429a      	cmp	r2, r3
 800a842:	d205      	bcs.n	800a850 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a850:	4b7e      	ldr	r3, [pc, #504]	; (800aa4c <tcp_receive+0x2c0>)
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a858:	4b7d      	ldr	r3, [pc, #500]	; (800aa50 <tcp_receive+0x2c4>)
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a860:	4b7b      	ldr	r3, [pc, #492]	; (800aa50 <tcp_receive+0x2c4>)
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a868:	1ad3      	subs	r3, r2, r3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	dc58      	bgt.n	800a920 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a86e:	4b7a      	ldr	r3, [pc, #488]	; (800aa58 <tcp_receive+0x2cc>)
 800a870:	881b      	ldrh	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d14b      	bne.n	800a90e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a880:	4413      	add	r3, r2
 800a882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a884:	429a      	cmp	r2, r3
 800a886:	d142      	bne.n	800a90e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a88e:	2b00      	cmp	r3, #0
 800a890:	db3d      	blt.n	800a90e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a896:	4b6e      	ldr	r3, [pc, #440]	; (800aa50 <tcp_receive+0x2c4>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d137      	bne.n	800a90e <tcp_receive+0x182>
              found_dupack = 1;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a8a8:	2bff      	cmp	r3, #255	; 0xff
 800a8aa:	d007      	beq.n	800a8bc <tcp_receive+0x130>
                ++pcb->dupacks;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	b2da      	uxtb	r2, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a8c2:	2b03      	cmp	r3, #3
 800a8c4:	d91b      	bls.n	800a8fe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8d0:	4413      	add	r3, r2
 800a8d2:	b29a      	uxth	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d30a      	bcc.n	800a8f4 <tcp_receive+0x168>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8e8:	4413      	add	r3, r2
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a8f2:	e004      	b.n	800a8fe <tcp_receive+0x172>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a904:	2b02      	cmp	r3, #2
 800a906:	d902      	bls.n	800a90e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f002 fb47 	bl	800cf9c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a90e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a910:	2b00      	cmp	r3, #0
 800a912:	f040 8160 	bne.w	800abd6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2200      	movs	r2, #0
 800a91a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a91e:	e15a      	b.n	800abd6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a920:	4b4b      	ldr	r3, [pc, #300]	; (800aa50 <tcp_receive+0x2c4>)
 800a922:	681a      	ldr	r2, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	3b01      	subs	r3, #1
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f2c0 814d 	blt.w	800abcc <tcp_receive+0x440>
 800a932:	4b47      	ldr	r3, [pc, #284]	; (800aa50 <tcp_receive+0x2c4>)
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f300 8145 	bgt.w	800abcc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	8b5b      	ldrh	r3, [r3, #26]
 800a946:	f003 0304 	and.w	r3, r3, #4
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d010      	beq.n	800a970 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	8b5b      	ldrh	r3, [r3, #26]
 800a952:	f023 0304 	bic.w	r3, r3, #4
 800a956:	b29a      	uxth	r2, r3
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a97e:	10db      	asrs	r3, r3, #3
 800a980:	b21b      	sxth	r3, r3
 800a982:	b29a      	uxth	r2, r3
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	4413      	add	r3, r2
 800a98e:	b29b      	uxth	r3, r3
 800a990:	b21a      	sxth	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a998:	4b2d      	ldr	r3, [pc, #180]	; (800aa50 <tcp_receive+0x2c4>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	1ad3      	subs	r3, r2, r3
 800a9a6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a9b0:	4b27      	ldr	r3, [pc, #156]	; (800aa50 <tcp_receive+0x2c4>)
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	7d1b      	ldrb	r3, [r3, #20]
 800a9bc:	2b03      	cmp	r3, #3
 800a9be:	f240 8096 	bls.w	800aaee <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d244      	bcs.n	800aa5c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	8b5b      	ldrh	r3, [r3, #26]
 800a9d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d001      	beq.n	800a9e2 <tcp_receive+0x256>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e000      	b.n	800a9e4 <tcp_receive+0x258>
 800a9e2:	2302      	movs	r3, #2
 800a9e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a9e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9f2:	fb12 f303 	smulbb	r3, r2, r3
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	bf28      	it	cs
 800a9fe:	4613      	movcs	r3, r2
 800aa00:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aa08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aa0a:	4413      	add	r3, r2
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d309      	bcc.n	800aa2c <tcp_receive+0x2a0>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aa1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800aa20:	4413      	add	r3, r2
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800aa2a:	e060      	b.n	800aaee <tcp_receive+0x362>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800aa36:	e05a      	b.n	800aaee <tcp_receive+0x362>
 800aa38:	080148a4 	.word	0x080148a4
 800aa3c:	08014bd4 	.word	0x08014bd4
 800aa40:	080148f0 	.word	0x080148f0
 800aa44:	08014bf0 	.word	0x08014bf0
 800aa48:	20000548 	.word	0x20000548
 800aa4c:	2000053c 	.word	0x2000053c
 800aa50:	20000540 	.word	0x20000540
 800aa54:	2000052c 	.word	0x2000052c
 800aa58:	20000546 	.word	0x20000546
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800aa62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aa64:	4413      	add	r3, r2
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d309      	bcc.n	800aa86 <tcp_receive+0x2fa>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800aa78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aa7a:	4413      	add	r3, r2
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800aa84:	e004      	b.n	800aa90 <tcp_receive+0x304>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d326      	bcc.n	800aaee <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aac0:	4413      	add	r3, r2
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d30a      	bcc.n	800aae4 <tcp_receive+0x358>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aad8:	4413      	add	r3, r2
 800aada:	b29a      	uxth	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800aae2:	e004      	b.n	800aaee <tcp_receive+0x362>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aaea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaf6:	4a98      	ldr	r2, [pc, #608]	; (800ad58 <tcp_receive+0x5cc>)
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f7ff fdcb 	bl	800a694 <tcp_free_acked_segments>
 800aafe:	4602      	mov	r2, r0
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab0c:	4a93      	ldr	r2, [pc, #588]	; (800ad5c <tcp_receive+0x5d0>)
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f7ff fdc0 	bl	800a694 <tcp_free_acked_segments>
 800ab14:	4602      	mov	r2, r0
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d104      	bne.n	800ab2c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab28:	861a      	strh	r2, [r3, #48]	; 0x30
 800ab2a:	e002      	b.n	800ab32 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d103      	bne.n	800ab48 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ab4e:	4b84      	ldr	r3, [pc, #528]	; (800ad60 <tcp_receive+0x5d4>)
 800ab50:	881b      	ldrh	r3, [r3, #0]
 800ab52:	4413      	add	r3, r2
 800ab54:	b29a      	uxth	r2, r3
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	8b5b      	ldrh	r3, [r3, #26]
 800ab60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d035      	beq.n	800abd4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d118      	bne.n	800aba2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00c      	beq.n	800ab92 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7fa ffb6 	bl	8005af6 <lwip_htonl>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	dc20      	bgt.n	800abd4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	8b5b      	ldrh	r3, [r3, #26]
 800ab96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab9a:	b29a      	uxth	r2, r3
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800aba0:	e018      	b.n	800abd4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	4618      	mov	r0, r3
 800abb0:	f7fa ffa1 	bl	8005af6 <lwip_htonl>
 800abb4:	4603      	mov	r3, r0
 800abb6:	1ae3      	subs	r3, r4, r3
 800abb8:	2b00      	cmp	r3, #0
 800abba:	dc0b      	bgt.n	800abd4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	8b5b      	ldrh	r3, [r3, #26]
 800abc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800abca:	e003      	b.n	800abd4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f002 fbdf 	bl	800d390 <tcp_send_empty_ack>
 800abd2:	e000      	b.n	800abd6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800abd4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d05b      	beq.n	800ac96 <tcp_receive+0x50a>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abe2:	4b60      	ldr	r3, [pc, #384]	; (800ad64 <tcp_receive+0x5d8>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	2b00      	cmp	r3, #0
 800abea:	da54      	bge.n	800ac96 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800abec:	4b5e      	ldr	r3, [pc, #376]	; (800ad68 <tcp_receive+0x5dc>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	b29a      	uxth	r2, r3
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	1ad3      	subs	r3, r2, r3
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ac00:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ac0a:	10db      	asrs	r3, r3, #3
 800ac0c:	b21b      	sxth	r3, r3
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac24:	4413      	add	r3, r2
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	b21a      	sxth	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ac2e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	da05      	bge.n	800ac42 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800ac36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac3a:	425b      	negs	r3, r3
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ac42:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ac4c:	109b      	asrs	r3, r3, #2
 800ac4e:	b21b      	sxth	r3, r3
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	1ad3      	subs	r3, r2, r3
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ac66:	4413      	add	r3, r2
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	b21a      	sxth	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ac76:	10db      	asrs	r3, r3, #3
 800ac78:	b21b      	sxth	r3, r3
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	4413      	add	r3, r2
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	b21a      	sxth	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ac96:	4b35      	ldr	r3, [pc, #212]	; (800ad6c <tcp_receive+0x5e0>)
 800ac98:	881b      	ldrh	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	f000 84e1 	beq.w	800b662 <tcp_receive+0xed6>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	7d1b      	ldrb	r3, [r3, #20]
 800aca4:	2b06      	cmp	r3, #6
 800aca6:	f200 84dc 	bhi.w	800b662 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acae:	4b30      	ldr	r3, [pc, #192]	; (800ad70 <tcp_receive+0x5e4>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	1ad3      	subs	r3, r2, r3
 800acb4:	3b01      	subs	r3, #1
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f2c0 808e 	blt.w	800add8 <tcp_receive+0x64c>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acc0:	4b2a      	ldr	r3, [pc, #168]	; (800ad6c <tcp_receive+0x5e0>)
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	4619      	mov	r1, r3
 800acc6:	4b2a      	ldr	r3, [pc, #168]	; (800ad70 <tcp_receive+0x5e4>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	440b      	add	r3, r1
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	3301      	adds	r3, #1
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	f300 8081 	bgt.w	800add8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800acd6:	4b27      	ldr	r3, [pc, #156]	; (800ad74 <tcp_receive+0x5e8>)
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ace0:	4b23      	ldr	r3, [pc, #140]	; (800ad70 <tcp_receive+0x5e4>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	1ad3      	subs	r3, r2, r3
 800ace6:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ace8:	4b22      	ldr	r3, [pc, #136]	; (800ad74 <tcp_receive+0x5e8>)
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d106      	bne.n	800acfe <tcp_receive+0x572>
 800acf0:	4b21      	ldr	r3, [pc, #132]	; (800ad78 <tcp_receive+0x5ec>)
 800acf2:	f240 5294 	movw	r2, #1428	; 0x594
 800acf6:	4921      	ldr	r1, [pc, #132]	; (800ad7c <tcp_receive+0x5f0>)
 800acf8:	4821      	ldr	r0, [pc, #132]	; (800ad80 <tcp_receive+0x5f4>)
 800acfa:	f007 fc35 	bl	8012568 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800acfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d906      	bls.n	800ad16 <tcp_receive+0x58a>
 800ad08:	4b1b      	ldr	r3, [pc, #108]	; (800ad78 <tcp_receive+0x5ec>)
 800ad0a:	f240 5295 	movw	r2, #1429	; 0x595
 800ad0e:	491d      	ldr	r1, [pc, #116]	; (800ad84 <tcp_receive+0x5f8>)
 800ad10:	481b      	ldr	r0, [pc, #108]	; (800ad80 <tcp_receive+0x5f4>)
 800ad12:	f007 fc29 	bl	8012568 <iprintf>
      off = (u16_t)off32;
 800ad16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ad1c:	4b15      	ldr	r3, [pc, #84]	; (800ad74 <tcp_receive+0x5e8>)
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	891b      	ldrh	r3, [r3, #8]
 800ad22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d906      	bls.n	800ad38 <tcp_receive+0x5ac>
 800ad2a:	4b13      	ldr	r3, [pc, #76]	; (800ad78 <tcp_receive+0x5ec>)
 800ad2c:	f240 5297 	movw	r2, #1431	; 0x597
 800ad30:	4915      	ldr	r1, [pc, #84]	; (800ad88 <tcp_receive+0x5fc>)
 800ad32:	4813      	ldr	r0, [pc, #76]	; (800ad80 <tcp_receive+0x5f4>)
 800ad34:	f007 fc18 	bl	8012568 <iprintf>
      inseg.len -= off;
 800ad38:	4b0e      	ldr	r3, [pc, #56]	; (800ad74 <tcp_receive+0x5e8>)
 800ad3a:	891a      	ldrh	r2, [r3, #8]
 800ad3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	b29a      	uxth	r2, r3
 800ad44:	4b0b      	ldr	r3, [pc, #44]	; (800ad74 <tcp_receive+0x5e8>)
 800ad46:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ad48:	4b0a      	ldr	r3, [pc, #40]	; (800ad74 <tcp_receive+0x5e8>)
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	891a      	ldrh	r2, [r3, #8]
 800ad4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ad52:	1ad3      	subs	r3, r2, r3
 800ad54:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ad56:	e029      	b.n	800adac <tcp_receive+0x620>
 800ad58:	08014c0c 	.word	0x08014c0c
 800ad5c:	08014c14 	.word	0x08014c14
 800ad60:	20000544 	.word	0x20000544
 800ad64:	20000540 	.word	0x20000540
 800ad68:	2000718c 	.word	0x2000718c
 800ad6c:	20000546 	.word	0x20000546
 800ad70:	2000053c 	.word	0x2000053c
 800ad74:	2000051c 	.word	0x2000051c
 800ad78:	080148a4 	.word	0x080148a4
 800ad7c:	08014c1c 	.word	0x08014c1c
 800ad80:	080148f0 	.word	0x080148f0
 800ad84:	08014c2c 	.word	0x08014c2c
 800ad88:	08014c3c 	.word	0x08014c3c
        off -= p->len;
 800ad8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad8e:	895b      	ldrh	r3, [r3, #10]
 800ad90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ad94:	1ad3      	subs	r3, r2, r3
 800ad96:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ad9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad9c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ad9e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ada0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ada2:	2200      	movs	r2, #0
 800ada4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ada6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800adac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adae:	895b      	ldrh	r3, [r3, #10]
 800adb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d8e9      	bhi.n	800ad8c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800adb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800adbc:	4619      	mov	r1, r3
 800adbe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800adc0:	f7fc f8d6 	bl	8006f70 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	4a91      	ldr	r2, [pc, #580]	; (800b010 <tcp_receive+0x884>)
 800adca:	6013      	str	r3, [r2, #0]
 800adcc:	4b91      	ldr	r3, [pc, #580]	; (800b014 <tcp_receive+0x888>)
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	4a8f      	ldr	r2, [pc, #572]	; (800b010 <tcp_receive+0x884>)
 800add2:	6812      	ldr	r2, [r2, #0]
 800add4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800add6:	e00d      	b.n	800adf4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800add8:	4b8d      	ldr	r3, [pc, #564]	; (800b010 <tcp_receive+0x884>)
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	1ad3      	subs	r3, r2, r3
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	da06      	bge.n	800adf4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	8b5b      	ldrh	r3, [r3, #26]
 800adea:	f043 0302 	orr.w	r3, r3, #2
 800adee:	b29a      	uxth	r2, r3
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800adf4:	4b86      	ldr	r3, [pc, #536]	; (800b010 <tcp_receive+0x884>)
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f2c0 842a 	blt.w	800b658 <tcp_receive+0xecc>
 800ae04:	4b82      	ldr	r3, [pc, #520]	; (800b010 <tcp_receive+0x884>)
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0c:	6879      	ldr	r1, [r7, #4]
 800ae0e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae10:	440b      	add	r3, r1
 800ae12:	1ad3      	subs	r3, r2, r3
 800ae14:	3301      	adds	r3, #1
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f300 841e 	bgt.w	800b658 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae20:	4b7b      	ldr	r3, [pc, #492]	; (800b010 <tcp_receive+0x884>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	f040 829a 	bne.w	800b35e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ae2a:	4b7a      	ldr	r3, [pc, #488]	; (800b014 <tcp_receive+0x888>)
 800ae2c:	891c      	ldrh	r4, [r3, #8]
 800ae2e:	4b79      	ldr	r3, [pc, #484]	; (800b014 <tcp_receive+0x888>)
 800ae30:	68db      	ldr	r3, [r3, #12]
 800ae32:	899b      	ldrh	r3, [r3, #12]
 800ae34:	b29b      	uxth	r3, r3
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7fa fe48 	bl	8005acc <lwip_htons>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	f003 0303 	and.w	r3, r3, #3
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d001      	beq.n	800ae4c <tcp_receive+0x6c0>
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e000      	b.n	800ae4e <tcp_receive+0x6c2>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4423      	add	r3, r4
 800ae50:	b29a      	uxth	r2, r3
 800ae52:	4b71      	ldr	r3, [pc, #452]	; (800b018 <tcp_receive+0x88c>)
 800ae54:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ae5a:	4b6f      	ldr	r3, [pc, #444]	; (800b018 <tcp_receive+0x88c>)
 800ae5c:	881b      	ldrh	r3, [r3, #0]
 800ae5e:	429a      	cmp	r2, r3
 800ae60:	d275      	bcs.n	800af4e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ae62:	4b6c      	ldr	r3, [pc, #432]	; (800b014 <tcp_receive+0x888>)
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	899b      	ldrh	r3, [r3, #12]
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fa fe2e 	bl	8005acc <lwip_htons>
 800ae70:	4603      	mov	r3, r0
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	f003 0301 	and.w	r3, r3, #1
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d01f      	beq.n	800aebc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ae7c:	4b65      	ldr	r3, [pc, #404]	; (800b014 <tcp_receive+0x888>)
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	899b      	ldrh	r3, [r3, #12]
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	b21b      	sxth	r3, r3
 800ae86:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ae8a:	b21c      	sxth	r4, r3
 800ae8c:	4b61      	ldr	r3, [pc, #388]	; (800b014 <tcp_receive+0x888>)
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	899b      	ldrh	r3, [r3, #12]
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7fa fe19 	bl	8005acc <lwip_htons>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fa fe10 	bl	8005acc <lwip_htons>
 800aeac:	4603      	mov	r3, r0
 800aeae:	b21b      	sxth	r3, r3
 800aeb0:	4323      	orrs	r3, r4
 800aeb2:	b21a      	sxth	r2, r3
 800aeb4:	4b57      	ldr	r3, [pc, #348]	; (800b014 <tcp_receive+0x888>)
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	b292      	uxth	r2, r2
 800aeba:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aec0:	4b54      	ldr	r3, [pc, #336]	; (800b014 <tcp_receive+0x888>)
 800aec2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800aec4:	4b53      	ldr	r3, [pc, #332]	; (800b014 <tcp_receive+0x888>)
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	899b      	ldrh	r3, [r3, #12]
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fa fdfd 	bl	8005acc <lwip_htons>
 800aed2:	4603      	mov	r3, r0
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	f003 0302 	and.w	r3, r3, #2
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d005      	beq.n	800aeea <tcp_receive+0x75e>
            inseg.len -= 1;
 800aede:	4b4d      	ldr	r3, [pc, #308]	; (800b014 <tcp_receive+0x888>)
 800aee0:	891b      	ldrh	r3, [r3, #8]
 800aee2:	3b01      	subs	r3, #1
 800aee4:	b29a      	uxth	r2, r3
 800aee6:	4b4b      	ldr	r3, [pc, #300]	; (800b014 <tcp_receive+0x888>)
 800aee8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800aeea:	4b4a      	ldr	r3, [pc, #296]	; (800b014 <tcp_receive+0x888>)
 800aeec:	685a      	ldr	r2, [r3, #4]
 800aeee:	4b49      	ldr	r3, [pc, #292]	; (800b014 <tcp_receive+0x888>)
 800aef0:	891b      	ldrh	r3, [r3, #8]
 800aef2:	4619      	mov	r1, r3
 800aef4:	4610      	mov	r0, r2
 800aef6:	f7fb ff3b 	bl	8006d70 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800aefa:	4b46      	ldr	r3, [pc, #280]	; (800b014 <tcp_receive+0x888>)
 800aefc:	891c      	ldrh	r4, [r3, #8]
 800aefe:	4b45      	ldr	r3, [pc, #276]	; (800b014 <tcp_receive+0x888>)
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	899b      	ldrh	r3, [r3, #12]
 800af04:	b29b      	uxth	r3, r3
 800af06:	4618      	mov	r0, r3
 800af08:	f7fa fde0 	bl	8005acc <lwip_htons>
 800af0c:	4603      	mov	r3, r0
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	f003 0303 	and.w	r3, r3, #3
 800af14:	2b00      	cmp	r3, #0
 800af16:	d001      	beq.n	800af1c <tcp_receive+0x790>
 800af18:	2301      	movs	r3, #1
 800af1a:	e000      	b.n	800af1e <tcp_receive+0x792>
 800af1c:	2300      	movs	r3, #0
 800af1e:	4423      	add	r3, r4
 800af20:	b29a      	uxth	r2, r3
 800af22:	4b3d      	ldr	r3, [pc, #244]	; (800b018 <tcp_receive+0x88c>)
 800af24:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800af26:	4b3c      	ldr	r3, [pc, #240]	; (800b018 <tcp_receive+0x88c>)
 800af28:	881b      	ldrh	r3, [r3, #0]
 800af2a:	461a      	mov	r2, r3
 800af2c:	4b38      	ldr	r3, [pc, #224]	; (800b010 <tcp_receive+0x884>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	441a      	add	r2, r3
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af36:	6879      	ldr	r1, [r7, #4]
 800af38:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800af3a:	440b      	add	r3, r1
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d006      	beq.n	800af4e <tcp_receive+0x7c2>
 800af40:	4b36      	ldr	r3, [pc, #216]	; (800b01c <tcp_receive+0x890>)
 800af42:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800af46:	4936      	ldr	r1, [pc, #216]	; (800b020 <tcp_receive+0x894>)
 800af48:	4836      	ldr	r0, [pc, #216]	; (800b024 <tcp_receive+0x898>)
 800af4a:	f007 fb0d 	bl	8012568 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af52:	2b00      	cmp	r3, #0
 800af54:	f000 80e7 	beq.w	800b126 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800af58:	4b2e      	ldr	r3, [pc, #184]	; (800b014 <tcp_receive+0x888>)
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	899b      	ldrh	r3, [r3, #12]
 800af5e:	b29b      	uxth	r3, r3
 800af60:	4618      	mov	r0, r3
 800af62:	f7fa fdb3 	bl	8005acc <lwip_htons>
 800af66:	4603      	mov	r3, r0
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	f003 0301 	and.w	r3, r3, #1
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d010      	beq.n	800af94 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800af72:	e00a      	b.n	800af8a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af78:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f7fd fcab 	bl	80088e0 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1f0      	bne.n	800af74 <tcp_receive+0x7e8>
 800af92:	e0c8      	b.n	800b126 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af98:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800af9a:	e052      	b.n	800b042 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800af9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	899b      	ldrh	r3, [r3, #12]
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	4618      	mov	r0, r3
 800afa6:	f7fa fd91 	bl	8005acc <lwip_htons>
 800afaa:	4603      	mov	r3, r0
 800afac:	b2db      	uxtb	r3, r3
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d03d      	beq.n	800b032 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800afb6:	4b17      	ldr	r3, [pc, #92]	; (800b014 <tcp_receive+0x888>)
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	899b      	ldrh	r3, [r3, #12]
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7fa fd84 	bl	8005acc <lwip_htons>
 800afc4:	4603      	mov	r3, r0
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d130      	bne.n	800b032 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800afd0:	4b10      	ldr	r3, [pc, #64]	; (800b014 <tcp_receive+0x888>)
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	899b      	ldrh	r3, [r3, #12]
 800afd6:	b29c      	uxth	r4, r3
 800afd8:	2001      	movs	r0, #1
 800afda:	f7fa fd77 	bl	8005acc <lwip_htons>
 800afde:	4603      	mov	r3, r0
 800afe0:	461a      	mov	r2, r3
 800afe2:	4b0c      	ldr	r3, [pc, #48]	; (800b014 <tcp_receive+0x888>)
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	4322      	orrs	r2, r4
 800afe8:	b292      	uxth	r2, r2
 800afea:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800afec:	4b09      	ldr	r3, [pc, #36]	; (800b014 <tcp_receive+0x888>)
 800afee:	891c      	ldrh	r4, [r3, #8]
 800aff0:	4b08      	ldr	r3, [pc, #32]	; (800b014 <tcp_receive+0x888>)
 800aff2:	68db      	ldr	r3, [r3, #12]
 800aff4:	899b      	ldrh	r3, [r3, #12]
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fa fd67 	bl	8005acc <lwip_htons>
 800affe:	4603      	mov	r3, r0
 800b000:	b2db      	uxtb	r3, r3
 800b002:	f003 0303 	and.w	r3, r3, #3
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00e      	beq.n	800b028 <tcp_receive+0x89c>
 800b00a:	2301      	movs	r3, #1
 800b00c:	e00d      	b.n	800b02a <tcp_receive+0x89e>
 800b00e:	bf00      	nop
 800b010:	2000053c 	.word	0x2000053c
 800b014:	2000051c 	.word	0x2000051c
 800b018:	20000546 	.word	0x20000546
 800b01c:	080148a4 	.word	0x080148a4
 800b020:	08014c4c 	.word	0x08014c4c
 800b024:	080148f0 	.word	0x080148f0
 800b028:	2300      	movs	r3, #0
 800b02a:	4423      	add	r3, r4
 800b02c:	b29a      	uxth	r2, r3
 800b02e:	4b98      	ldr	r3, [pc, #608]	; (800b290 <tcp_receive+0xb04>)
 800b030:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b034:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800b03c:	6938      	ldr	r0, [r7, #16]
 800b03e:	f7fd fc4f 	bl	80088e0 <tcp_seg_free>
            while (next &&
 800b042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00e      	beq.n	800b066 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b048:	4b91      	ldr	r3, [pc, #580]	; (800b290 <tcp_receive+0xb04>)
 800b04a:	881b      	ldrh	r3, [r3, #0]
 800b04c:	461a      	mov	r2, r3
 800b04e:	4b91      	ldr	r3, [pc, #580]	; (800b294 <tcp_receive+0xb08>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	441a      	add	r2, r3
 800b054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b05c:	8909      	ldrh	r1, [r1, #8]
 800b05e:	440b      	add	r3, r1
 800b060:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b062:	2b00      	cmp	r3, #0
 800b064:	da9a      	bge.n	800af9c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d059      	beq.n	800b120 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b06c:	4b88      	ldr	r3, [pc, #544]	; (800b290 <tcp_receive+0xb04>)
 800b06e:	881b      	ldrh	r3, [r3, #0]
 800b070:	461a      	mov	r2, r3
 800b072:	4b88      	ldr	r3, [pc, #544]	; (800b294 <tcp_receive+0xb08>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	441a      	add	r2, r3
 800b078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b080:	2b00      	cmp	r3, #0
 800b082:	dd4d      	ble.n	800b120 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	b29a      	uxth	r2, r3
 800b08c:	4b81      	ldr	r3, [pc, #516]	; (800b294 <tcp_receive+0xb08>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	b29b      	uxth	r3, r3
 800b092:	1ad3      	subs	r3, r2, r3
 800b094:	b29a      	uxth	r2, r3
 800b096:	4b80      	ldr	r3, [pc, #512]	; (800b298 <tcp_receive+0xb0c>)
 800b098:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b09a:	4b7f      	ldr	r3, [pc, #508]	; (800b298 <tcp_receive+0xb0c>)
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	899b      	ldrh	r3, [r3, #12]
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fa fd12 	bl	8005acc <lwip_htons>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	b2db      	uxtb	r3, r3
 800b0ac:	f003 0302 	and.w	r3, r3, #2
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d005      	beq.n	800b0c0 <tcp_receive+0x934>
                inseg.len -= 1;
 800b0b4:	4b78      	ldr	r3, [pc, #480]	; (800b298 <tcp_receive+0xb0c>)
 800b0b6:	891b      	ldrh	r3, [r3, #8]
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	b29a      	uxth	r2, r3
 800b0bc:	4b76      	ldr	r3, [pc, #472]	; (800b298 <tcp_receive+0xb0c>)
 800b0be:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b0c0:	4b75      	ldr	r3, [pc, #468]	; (800b298 <tcp_receive+0xb0c>)
 800b0c2:	685a      	ldr	r2, [r3, #4]
 800b0c4:	4b74      	ldr	r3, [pc, #464]	; (800b298 <tcp_receive+0xb0c>)
 800b0c6:	891b      	ldrh	r3, [r3, #8]
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	4610      	mov	r0, r2
 800b0cc:	f7fb fe50 	bl	8006d70 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b0d0:	4b71      	ldr	r3, [pc, #452]	; (800b298 <tcp_receive+0xb0c>)
 800b0d2:	891c      	ldrh	r4, [r3, #8]
 800b0d4:	4b70      	ldr	r3, [pc, #448]	; (800b298 <tcp_receive+0xb0c>)
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	899b      	ldrh	r3, [r3, #12]
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7fa fcf5 	bl	8005acc <lwip_htons>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	f003 0303 	and.w	r3, r3, #3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d001      	beq.n	800b0f2 <tcp_receive+0x966>
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e000      	b.n	800b0f4 <tcp_receive+0x968>
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	4423      	add	r3, r4
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	4b65      	ldr	r3, [pc, #404]	; (800b290 <tcp_receive+0xb04>)
 800b0fa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b0fc:	4b64      	ldr	r3, [pc, #400]	; (800b290 <tcp_receive+0xb04>)
 800b0fe:	881b      	ldrh	r3, [r3, #0]
 800b100:	461a      	mov	r2, r3
 800b102:	4b64      	ldr	r3, [pc, #400]	; (800b294 <tcp_receive+0xb08>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	441a      	add	r2, r3
 800b108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d006      	beq.n	800b120 <tcp_receive+0x994>
 800b112:	4b62      	ldr	r3, [pc, #392]	; (800b29c <tcp_receive+0xb10>)
 800b114:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800b118:	4961      	ldr	r1, [pc, #388]	; (800b2a0 <tcp_receive+0xb14>)
 800b11a:	4862      	ldr	r0, [pc, #392]	; (800b2a4 <tcp_receive+0xb18>)
 800b11c:	f007 fa24 	bl	8012568 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b124:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b126:	4b5a      	ldr	r3, [pc, #360]	; (800b290 <tcp_receive+0xb04>)
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	461a      	mov	r2, r3
 800b12c:	4b59      	ldr	r3, [pc, #356]	; (800b294 <tcp_receive+0xb08>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	441a      	add	r2, r3
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b13a:	4b55      	ldr	r3, [pc, #340]	; (800b290 <tcp_receive+0xb04>)
 800b13c:	881b      	ldrh	r3, [r3, #0]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d206      	bcs.n	800b150 <tcp_receive+0x9c4>
 800b142:	4b56      	ldr	r3, [pc, #344]	; (800b29c <tcp_receive+0xb10>)
 800b144:	f240 6207 	movw	r2, #1543	; 0x607
 800b148:	4957      	ldr	r1, [pc, #348]	; (800b2a8 <tcp_receive+0xb1c>)
 800b14a:	4856      	ldr	r0, [pc, #344]	; (800b2a4 <tcp_receive+0xb18>)
 800b14c:	f007 fa0c 	bl	8012568 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b154:	4b4e      	ldr	r3, [pc, #312]	; (800b290 <tcp_receive+0xb04>)
 800b156:	881b      	ldrh	r3, [r3, #0]
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	b29a      	uxth	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7fc fe9b 	bl	8007e9c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b166:	4b4c      	ldr	r3, [pc, #304]	; (800b298 <tcp_receive+0xb0c>)
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	891b      	ldrh	r3, [r3, #8]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d006      	beq.n	800b17e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b170:	4b49      	ldr	r3, [pc, #292]	; (800b298 <tcp_receive+0xb0c>)
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	4a4d      	ldr	r2, [pc, #308]	; (800b2ac <tcp_receive+0xb20>)
 800b176:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b178:	4b47      	ldr	r3, [pc, #284]	; (800b298 <tcp_receive+0xb0c>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b17e:	4b46      	ldr	r3, [pc, #280]	; (800b298 <tcp_receive+0xb0c>)
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	899b      	ldrh	r3, [r3, #12]
 800b184:	b29b      	uxth	r3, r3
 800b186:	4618      	mov	r0, r3
 800b188:	f7fa fca0 	bl	8005acc <lwip_htons>
 800b18c:	4603      	mov	r3, r0
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	f003 0301 	and.w	r3, r3, #1
 800b194:	2b00      	cmp	r3, #0
 800b196:	f000 80b8 	beq.w	800b30a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b19a:	4b45      	ldr	r3, [pc, #276]	; (800b2b0 <tcp_receive+0xb24>)
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	f043 0320 	orr.w	r3, r3, #32
 800b1a2:	b2da      	uxtb	r2, r3
 800b1a4:	4b42      	ldr	r3, [pc, #264]	; (800b2b0 <tcp_receive+0xb24>)
 800b1a6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b1a8:	e0af      	b.n	800b30a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1ae:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	4a36      	ldr	r2, [pc, #216]	; (800b294 <tcp_receive+0xb08>)
 800b1ba:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	891b      	ldrh	r3, [r3, #8]
 800b1c0:	461c      	mov	r4, r3
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	68db      	ldr	r3, [r3, #12]
 800b1c6:	899b      	ldrh	r3, [r3, #12]
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fa fc7e 	bl	8005acc <lwip_htons>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	f003 0303 	and.w	r3, r3, #3
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d001      	beq.n	800b1e0 <tcp_receive+0xa54>
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e000      	b.n	800b1e2 <tcp_receive+0xa56>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	191a      	adds	r2, r3, r4
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e8:	441a      	add	r2, r3
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1f2:	461c      	mov	r4, r3
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	891b      	ldrh	r3, [r3, #8]
 800b1f8:	461d      	mov	r5, r3
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	899b      	ldrh	r3, [r3, #12]
 800b200:	b29b      	uxth	r3, r3
 800b202:	4618      	mov	r0, r3
 800b204:	f7fa fc62 	bl	8005acc <lwip_htons>
 800b208:	4603      	mov	r3, r0
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	f003 0303 	and.w	r3, r3, #3
 800b210:	2b00      	cmp	r3, #0
 800b212:	d001      	beq.n	800b218 <tcp_receive+0xa8c>
 800b214:	2301      	movs	r3, #1
 800b216:	e000      	b.n	800b21a <tcp_receive+0xa8e>
 800b218:	2300      	movs	r3, #0
 800b21a:	442b      	add	r3, r5
 800b21c:	429c      	cmp	r4, r3
 800b21e:	d206      	bcs.n	800b22e <tcp_receive+0xaa2>
 800b220:	4b1e      	ldr	r3, [pc, #120]	; (800b29c <tcp_receive+0xb10>)
 800b222:	f240 622c 	movw	r2, #1580	; 0x62c
 800b226:	4923      	ldr	r1, [pc, #140]	; (800b2b4 <tcp_receive+0xb28>)
 800b228:	481e      	ldr	r0, [pc, #120]	; (800b2a4 <tcp_receive+0xb18>)
 800b22a:	f007 f99d 	bl	8012568 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	891b      	ldrh	r3, [r3, #8]
 800b232:	461c      	mov	r4, r3
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	899b      	ldrh	r3, [r3, #12]
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7fa fc45 	bl	8005acc <lwip_htons>
 800b242:	4603      	mov	r3, r0
 800b244:	b2db      	uxtb	r3, r3
 800b246:	f003 0303 	and.w	r3, r3, #3
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d001      	beq.n	800b252 <tcp_receive+0xac6>
 800b24e:	2301      	movs	r3, #1
 800b250:	e000      	b.n	800b254 <tcp_receive+0xac8>
 800b252:	2300      	movs	r3, #0
 800b254:	1919      	adds	r1, r3, r4
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b25a:	b28b      	uxth	r3, r1
 800b25c:	1ad3      	subs	r3, r2, r3
 800b25e:	b29a      	uxth	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f7fc fe19 	bl	8007e9c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	891b      	ldrh	r3, [r3, #8]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d028      	beq.n	800b2c6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b274:	4b0d      	ldr	r3, [pc, #52]	; (800b2ac <tcp_receive+0xb20>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d01d      	beq.n	800b2b8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b27c:	4b0b      	ldr	r3, [pc, #44]	; (800b2ac <tcp_receive+0xb20>)
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	4619      	mov	r1, r3
 800b286:	4610      	mov	r0, r2
 800b288:	f7fb ffba 	bl	8007200 <pbuf_cat>
 800b28c:	e018      	b.n	800b2c0 <tcp_receive+0xb34>
 800b28e:	bf00      	nop
 800b290:	20000546 	.word	0x20000546
 800b294:	2000053c 	.word	0x2000053c
 800b298:	2000051c 	.word	0x2000051c
 800b29c:	080148a4 	.word	0x080148a4
 800b2a0:	08014c84 	.word	0x08014c84
 800b2a4:	080148f0 	.word	0x080148f0
 800b2a8:	08014cc0 	.word	0x08014cc0
 800b2ac:	2000054c 	.word	0x2000054c
 800b2b0:	20000549 	.word	0x20000549
 800b2b4:	08014ce0 	.word	0x08014ce0
            } else {
              recv_data = cseg->p;
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	4a70      	ldr	r2, [pc, #448]	; (800b480 <tcp_receive+0xcf4>)
 800b2be:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	899b      	ldrh	r3, [r3, #12]
 800b2cc:	b29b      	uxth	r3, r3
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7fa fbfc 	bl	8005acc <lwip_htons>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	b2db      	uxtb	r3, r3
 800b2d8:	f003 0301 	and.w	r3, r3, #1
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00d      	beq.n	800b2fc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b2e0:	4b68      	ldr	r3, [pc, #416]	; (800b484 <tcp_receive+0xcf8>)
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	f043 0320 	orr.w	r3, r3, #32
 800b2e8:	b2da      	uxtb	r2, r3
 800b2ea:	4b66      	ldr	r3, [pc, #408]	; (800b484 <tcp_receive+0xcf8>)
 800b2ec:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	7d1b      	ldrb	r3, [r3, #20]
 800b2f2:	2b04      	cmp	r3, #4
 800b2f4:	d102      	bne.n	800b2fc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2207      	movs	r2, #7
 800b2fa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800b304:	68b8      	ldr	r0, [r7, #8]
 800b306:	f7fd faeb 	bl	80088e0 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d008      	beq.n	800b324 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	685a      	ldr	r2, [r3, #4]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800b31e:	429a      	cmp	r2, r3
 800b320:	f43f af43 	beq.w	800b1aa <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	8b5b      	ldrh	r3, [r3, #26]
 800b328:	f003 0301 	and.w	r3, r3, #1
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d00e      	beq.n	800b34e <tcp_receive+0xbc2>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	8b5b      	ldrh	r3, [r3, #26]
 800b334:	f023 0301 	bic.w	r3, r3, #1
 800b338:	b29a      	uxth	r2, r3
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	835a      	strh	r2, [r3, #26]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	8b5b      	ldrh	r3, [r3, #26]
 800b342:	f043 0302 	orr.w	r3, r3, #2
 800b346:	b29a      	uxth	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b34c:	e188      	b.n	800b660 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	8b5b      	ldrh	r3, [r3, #26]
 800b352:	f043 0301 	orr.w	r3, r3, #1
 800b356:	b29a      	uxth	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b35c:	e180      	b.n	800b660 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b362:	2b00      	cmp	r3, #0
 800b364:	d106      	bne.n	800b374 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b366:	4848      	ldr	r0, [pc, #288]	; (800b488 <tcp_receive+0xcfc>)
 800b368:	f7fd faf0 	bl	800894c <tcp_seg_copy>
 800b36c:	4602      	mov	r2, r0
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	675a      	str	r2, [r3, #116]	; 0x74
 800b372:	e16d      	b.n	800b650 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b374:	2300      	movs	r3, #0
 800b376:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b37c:	63bb      	str	r3, [r7, #56]	; 0x38
 800b37e:	e157      	b.n	800b630 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800b380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	4b41      	ldr	r3, [pc, #260]	; (800b48c <tcp_receive+0xd00>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d11d      	bne.n	800b3ca <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b38e:	4b3e      	ldr	r3, [pc, #248]	; (800b488 <tcp_receive+0xcfc>)
 800b390:	891a      	ldrh	r2, [r3, #8]
 800b392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b394:	891b      	ldrh	r3, [r3, #8]
 800b396:	429a      	cmp	r2, r3
 800b398:	f240 814f 	bls.w	800b63a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b39c:	483a      	ldr	r0, [pc, #232]	; (800b488 <tcp_receive+0xcfc>)
 800b39e:	f7fd fad5 	bl	800894c <tcp_seg_copy>
 800b3a2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	f000 8149 	beq.w	800b63e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800b3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d003      	beq.n	800b3ba <tcp_receive+0xc2e>
                    prev->next = cseg;
 800b3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b4:	697a      	ldr	r2, [r7, #20]
 800b3b6:	601a      	str	r2, [r3, #0]
 800b3b8:	e002      	b.n	800b3c0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	697a      	ldr	r2, [r7, #20]
 800b3be:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b3c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3c2:	6978      	ldr	r0, [r7, #20]
 800b3c4:	f7ff f8de 	bl	800a584 <tcp_oos_insert_segment>
                }
                break;
 800b3c8:	e139      	b.n	800b63e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d117      	bne.n	800b400 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b3d0:	4b2e      	ldr	r3, [pc, #184]	; (800b48c <tcp_receive+0xd00>)
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	685b      	ldr	r3, [r3, #4]
 800b3da:	1ad3      	subs	r3, r2, r3
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	da57      	bge.n	800b490 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b3e0:	4829      	ldr	r0, [pc, #164]	; (800b488 <tcp_receive+0xcfc>)
 800b3e2:	f7fd fab3 	bl	800894c <tcp_seg_copy>
 800b3e6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	f000 8129 	beq.w	800b642 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	69ba      	ldr	r2, [r7, #24]
 800b3f4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b3f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b3f8:	69b8      	ldr	r0, [r7, #24]
 800b3fa:	f7ff f8c3 	bl	800a584 <tcp_oos_insert_segment>
                  }
                  break;
 800b3fe:	e120      	b.n	800b642 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b400:	4b22      	ldr	r3, [pc, #136]	; (800b48c <tcp_receive+0xd00>)
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	3b01      	subs	r3, #1
 800b40e:	2b00      	cmp	r3, #0
 800b410:	db3e      	blt.n	800b490 <tcp_receive+0xd04>
 800b412:	4b1e      	ldr	r3, [pc, #120]	; (800b48c <tcp_receive+0xd00>)
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	1ad3      	subs	r3, r2, r3
 800b41e:	3301      	adds	r3, #1
 800b420:	2b00      	cmp	r3, #0
 800b422:	dc35      	bgt.n	800b490 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b424:	4818      	ldr	r0, [pc, #96]	; (800b488 <tcp_receive+0xcfc>)
 800b426:	f7fd fa91 	bl	800894c <tcp_seg_copy>
 800b42a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f000 8109 	beq.w	800b646 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b43c:	8912      	ldrh	r2, [r2, #8]
 800b43e:	441a      	add	r2, r3
 800b440:	4b12      	ldr	r3, [pc, #72]	; (800b48c <tcp_receive+0xd00>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	1ad3      	subs	r3, r2, r3
 800b446:	2b00      	cmp	r3, #0
 800b448:	dd12      	ble.n	800b470 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b44a:	4b10      	ldr	r3, [pc, #64]	; (800b48c <tcp_receive+0xd00>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	b29a      	uxth	r2, r3
 800b450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b452:	68db      	ldr	r3, [r3, #12]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	b29b      	uxth	r3, r3
 800b458:	1ad3      	subs	r3, r2, r3
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b45e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b462:	685a      	ldr	r2, [r3, #4]
 800b464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b466:	891b      	ldrh	r3, [r3, #8]
 800b468:	4619      	mov	r1, r3
 800b46a:	4610      	mov	r0, r2
 800b46c:	f7fb fc80 	bl	8006d70 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800b470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b472:	69fa      	ldr	r2, [r7, #28]
 800b474:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800b476:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b478:	69f8      	ldr	r0, [r7, #28]
 800b47a:	f7ff f883 	bl	800a584 <tcp_oos_insert_segment>
                  }
                  break;
 800b47e:	e0e2      	b.n	800b646 <tcp_receive+0xeba>
 800b480:	2000054c 	.word	0x2000054c
 800b484:	20000549 	.word	0x20000549
 800b488:	2000051c 	.word	0x2000051c
 800b48c:	2000053c 	.word	0x2000053c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800b490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b492:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800b494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f040 80c6 	bne.w	800b62a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b49e:	4b80      	ldr	r3, [pc, #512]	; (800b6a0 <tcp_receive+0xf14>)
 800b4a0:	681a      	ldr	r2, [r3, #0]
 800b4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f340 80bd 	ble.w	800b62a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b2:	68db      	ldr	r3, [r3, #12]
 800b4b4:	899b      	ldrh	r3, [r3, #12]
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fa fb07 	bl	8005acc <lwip_htons>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	f003 0301 	and.w	r3, r3, #1
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	f040 80bf 	bne.w	800b64a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800b4cc:	4875      	ldr	r0, [pc, #468]	; (800b6a4 <tcp_receive+0xf18>)
 800b4ce:	f7fd fa3d 	bl	800894c <tcp_seg_copy>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800b4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f000 80b6 	beq.w	800b64e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4ea:	8912      	ldrh	r2, [r2, #8]
 800b4ec:	441a      	add	r2, r3
 800b4ee:	4b6c      	ldr	r3, [pc, #432]	; (800b6a0 <tcp_receive+0xf14>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	1ad3      	subs	r3, r2, r3
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	dd12      	ble.n	800b51e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b4f8:	4b69      	ldr	r3, [pc, #420]	; (800b6a0 <tcp_receive+0xf14>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b500:	68db      	ldr	r3, [r3, #12]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	b29b      	uxth	r3, r3
 800b506:	1ad3      	subs	r3, r2, r3
 800b508:	b29a      	uxth	r2, r3
 800b50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b50c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800b50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b510:	685a      	ldr	r2, [r3, #4]
 800b512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b514:	891b      	ldrh	r3, [r3, #8]
 800b516:	4619      	mov	r1, r3
 800b518:	4610      	mov	r0, r2
 800b51a:	f7fb fc29 	bl	8006d70 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b51e:	4b62      	ldr	r3, [pc, #392]	; (800b6a8 <tcp_receive+0xf1c>)
 800b520:	881b      	ldrh	r3, [r3, #0]
 800b522:	461a      	mov	r2, r3
 800b524:	4b5e      	ldr	r3, [pc, #376]	; (800b6a0 <tcp_receive+0xf14>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	441a      	add	r2, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	6879      	ldr	r1, [r7, #4]
 800b530:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b532:	440b      	add	r3, r1
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	2b00      	cmp	r3, #0
 800b538:	f340 8089 	ble.w	800b64e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	68db      	ldr	r3, [r3, #12]
 800b542:	899b      	ldrh	r3, [r3, #12]
 800b544:	b29b      	uxth	r3, r3
 800b546:	4618      	mov	r0, r3
 800b548:	f7fa fac0 	bl	8005acc <lwip_htons>
 800b54c:	4603      	mov	r3, r0
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	f003 0301 	and.w	r3, r3, #1
 800b554:	2b00      	cmp	r3, #0
 800b556:	d022      	beq.n	800b59e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	899b      	ldrh	r3, [r3, #12]
 800b560:	b29b      	uxth	r3, r3
 800b562:	b21b      	sxth	r3, r3
 800b564:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b568:	b21c      	sxth	r4, r3
 800b56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	899b      	ldrh	r3, [r3, #12]
 800b572:	b29b      	uxth	r3, r3
 800b574:	4618      	mov	r0, r3
 800b576:	f7fa faa9 	bl	8005acc <lwip_htons>
 800b57a:	4603      	mov	r3, r0
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	b29b      	uxth	r3, r3
 800b580:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b584:	b29b      	uxth	r3, r3
 800b586:	4618      	mov	r0, r3
 800b588:	f7fa faa0 	bl	8005acc <lwip_htons>
 800b58c:	4603      	mov	r3, r0
 800b58e:	b21b      	sxth	r3, r3
 800b590:	4323      	orrs	r3, r4
 800b592:	b21a      	sxth	r2, r3
 800b594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	b292      	uxth	r2, r2
 800b59c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5a8:	4413      	add	r3, r2
 800b5aa:	b299      	uxth	r1, r3
 800b5ac:	4b3c      	ldr	r3, [pc, #240]	; (800b6a0 <tcp_receive+0xf14>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	b29a      	uxth	r2, r3
 800b5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	1a8a      	subs	r2, r1, r2
 800b5b8:	b292      	uxth	r2, r2
 800b5ba:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	685a      	ldr	r2, [r3, #4]
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	891b      	ldrh	r3, [r3, #8]
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	4610      	mov	r0, r2
 800b5cc:	f7fb fbd0 	bl	8006d70 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	891c      	ldrh	r4, [r3, #8]
 800b5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	899b      	ldrh	r3, [r3, #12]
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7fa fa73 	bl	8005acc <lwip_htons>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	f003 0303 	and.w	r3, r3, #3
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <tcp_receive+0xe6a>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e000      	b.n	800b5f8 <tcp_receive+0xe6c>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	4423      	add	r3, r4
 800b5fa:	b29a      	uxth	r2, r3
 800b5fc:	4b2a      	ldr	r3, [pc, #168]	; (800b6a8 <tcp_receive+0xf1c>)
 800b5fe:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b600:	4b29      	ldr	r3, [pc, #164]	; (800b6a8 <tcp_receive+0xf1c>)
 800b602:	881b      	ldrh	r3, [r3, #0]
 800b604:	461a      	mov	r2, r3
 800b606:	4b26      	ldr	r3, [pc, #152]	; (800b6a0 <tcp_receive+0xf14>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	441a      	add	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b610:	6879      	ldr	r1, [r7, #4]
 800b612:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b614:	440b      	add	r3, r1
 800b616:	429a      	cmp	r2, r3
 800b618:	d019      	beq.n	800b64e <tcp_receive+0xec2>
 800b61a:	4b24      	ldr	r3, [pc, #144]	; (800b6ac <tcp_receive+0xf20>)
 800b61c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b620:	4923      	ldr	r1, [pc, #140]	; (800b6b0 <tcp_receive+0xf24>)
 800b622:	4824      	ldr	r0, [pc, #144]	; (800b6b4 <tcp_receive+0xf28>)
 800b624:	f006 ffa0 	bl	8012568 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800b628:	e011      	b.n	800b64e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b632:	2b00      	cmp	r3, #0
 800b634:	f47f aea4 	bne.w	800b380 <tcp_receive+0xbf4>
 800b638:	e00a      	b.n	800b650 <tcp_receive+0xec4>
                break;
 800b63a:	bf00      	nop
 800b63c:	e008      	b.n	800b650 <tcp_receive+0xec4>
                break;
 800b63e:	bf00      	nop
 800b640:	e006      	b.n	800b650 <tcp_receive+0xec4>
                  break;
 800b642:	bf00      	nop
 800b644:	e004      	b.n	800b650 <tcp_receive+0xec4>
                  break;
 800b646:	bf00      	nop
 800b648:	e002      	b.n	800b650 <tcp_receive+0xec4>
                  break;
 800b64a:	bf00      	nop
 800b64c:	e000      	b.n	800b650 <tcp_receive+0xec4>
                break;
 800b64e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f001 fe9d 	bl	800d390 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800b656:	e003      	b.n	800b660 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f001 fe99 	bl	800d390 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b65e:	e01a      	b.n	800b696 <tcp_receive+0xf0a>
 800b660:	e019      	b.n	800b696 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b662:	4b0f      	ldr	r3, [pc, #60]	; (800b6a0 <tcp_receive+0xf14>)
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66a:	1ad3      	subs	r3, r2, r3
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	db0a      	blt.n	800b686 <tcp_receive+0xefa>
 800b670:	4b0b      	ldr	r3, [pc, #44]	; (800b6a0 <tcp_receive+0xf14>)
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b678:	6879      	ldr	r1, [r7, #4]
 800b67a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b67c:	440b      	add	r3, r1
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	3301      	adds	r3, #1
 800b682:	2b00      	cmp	r3, #0
 800b684:	dd07      	ble.n	800b696 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	8b5b      	ldrh	r3, [r3, #26]
 800b68a:	f043 0302 	orr.w	r3, r3, #2
 800b68e:	b29a      	uxth	r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800b694:	e7ff      	b.n	800b696 <tcp_receive+0xf0a>
 800b696:	bf00      	nop
 800b698:	3750      	adds	r7, #80	; 0x50
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bdb0      	pop	{r4, r5, r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	2000053c 	.word	0x2000053c
 800b6a4:	2000051c 	.word	0x2000051c
 800b6a8:	20000546 	.word	0x20000546
 800b6ac:	080148a4 	.word	0x080148a4
 800b6b0:	08014c4c 	.word	0x08014c4c
 800b6b4:	080148f0 	.word	0x080148f0

0800b6b8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b6be:	4b15      	ldr	r3, [pc, #84]	; (800b714 <tcp_get_next_optbyte+0x5c>)
 800b6c0:	881b      	ldrh	r3, [r3, #0]
 800b6c2:	1c5a      	adds	r2, r3, #1
 800b6c4:	b291      	uxth	r1, r2
 800b6c6:	4a13      	ldr	r2, [pc, #76]	; (800b714 <tcp_get_next_optbyte+0x5c>)
 800b6c8:	8011      	strh	r1, [r2, #0]
 800b6ca:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b6cc:	4b12      	ldr	r3, [pc, #72]	; (800b718 <tcp_get_next_optbyte+0x60>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d004      	beq.n	800b6de <tcp_get_next_optbyte+0x26>
 800b6d4:	4b11      	ldr	r3, [pc, #68]	; (800b71c <tcp_get_next_optbyte+0x64>)
 800b6d6:	881b      	ldrh	r3, [r3, #0]
 800b6d8:	88fa      	ldrh	r2, [r7, #6]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d208      	bcs.n	800b6f0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b6de:	4b10      	ldr	r3, [pc, #64]	; (800b720 <tcp_get_next_optbyte+0x68>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	3314      	adds	r3, #20
 800b6e4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b6e6:	88fb      	ldrh	r3, [r7, #6]
 800b6e8:	683a      	ldr	r2, [r7, #0]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	e00b      	b.n	800b708 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b6f0:	88fb      	ldrh	r3, [r7, #6]
 800b6f2:	b2da      	uxtb	r2, r3
 800b6f4:	4b09      	ldr	r3, [pc, #36]	; (800b71c <tcp_get_next_optbyte+0x64>)
 800b6f6:	881b      	ldrh	r3, [r3, #0]
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	1ad3      	subs	r3, r2, r3
 800b6fc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b6fe:	4b06      	ldr	r3, [pc, #24]	; (800b718 <tcp_get_next_optbyte+0x60>)
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	797b      	ldrb	r3, [r7, #5]
 800b704:	4413      	add	r3, r2
 800b706:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b708:	4618      	mov	r0, r3
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr
 800b714:	20000538 	.word	0x20000538
 800b718:	20000534 	.word	0x20000534
 800b71c:	20000532 	.word	0x20000532
 800b720:	2000052c 	.word	0x2000052c

0800b724 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d106      	bne.n	800b740 <tcp_parseopt+0x1c>
 800b732:	4b31      	ldr	r3, [pc, #196]	; (800b7f8 <tcp_parseopt+0xd4>)
 800b734:	f240 727d 	movw	r2, #1917	; 0x77d
 800b738:	4930      	ldr	r1, [pc, #192]	; (800b7fc <tcp_parseopt+0xd8>)
 800b73a:	4831      	ldr	r0, [pc, #196]	; (800b800 <tcp_parseopt+0xdc>)
 800b73c:	f006 ff14 	bl	8012568 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b740:	4b30      	ldr	r3, [pc, #192]	; (800b804 <tcp_parseopt+0xe0>)
 800b742:	881b      	ldrh	r3, [r3, #0]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d053      	beq.n	800b7f0 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b748:	4b2f      	ldr	r3, [pc, #188]	; (800b808 <tcp_parseopt+0xe4>)
 800b74a:	2200      	movs	r2, #0
 800b74c:	801a      	strh	r2, [r3, #0]
 800b74e:	e043      	b.n	800b7d8 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800b750:	f7ff ffb2 	bl	800b6b8 <tcp_get_next_optbyte>
 800b754:	4603      	mov	r3, r0
 800b756:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b758:	7bfb      	ldrb	r3, [r7, #15]
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d03c      	beq.n	800b7d8 <tcp_parseopt+0xb4>
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d002      	beq.n	800b768 <tcp_parseopt+0x44>
 800b762:	2b00      	cmp	r3, #0
 800b764:	d03f      	beq.n	800b7e6 <tcp_parseopt+0xc2>
 800b766:	e026      	b.n	800b7b6 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b768:	f7ff ffa6 	bl	800b6b8 <tcp_get_next_optbyte>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b04      	cmp	r3, #4
 800b770:	d13b      	bne.n	800b7ea <tcp_parseopt+0xc6>
 800b772:	4b25      	ldr	r3, [pc, #148]	; (800b808 <tcp_parseopt+0xe4>)
 800b774:	881b      	ldrh	r3, [r3, #0]
 800b776:	3302      	adds	r3, #2
 800b778:	4a22      	ldr	r2, [pc, #136]	; (800b804 <tcp_parseopt+0xe0>)
 800b77a:	8812      	ldrh	r2, [r2, #0]
 800b77c:	4293      	cmp	r3, r2
 800b77e:	dc34      	bgt.n	800b7ea <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b780:	f7ff ff9a 	bl	800b6b8 <tcp_get_next_optbyte>
 800b784:	4603      	mov	r3, r0
 800b786:	b29b      	uxth	r3, r3
 800b788:	021b      	lsls	r3, r3, #8
 800b78a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b78c:	f7ff ff94 	bl	800b6b8 <tcp_get_next_optbyte>
 800b790:	4603      	mov	r3, r0
 800b792:	b29a      	uxth	r2, r3
 800b794:	89bb      	ldrh	r3, [r7, #12]
 800b796:	4313      	orrs	r3, r2
 800b798:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b79a:	89bb      	ldrh	r3, [r7, #12]
 800b79c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b7a0:	d804      	bhi.n	800b7ac <tcp_parseopt+0x88>
 800b7a2:	89bb      	ldrh	r3, [r7, #12]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d001      	beq.n	800b7ac <tcp_parseopt+0x88>
 800b7a8:	89ba      	ldrh	r2, [r7, #12]
 800b7aa:	e001      	b.n	800b7b0 <tcp_parseopt+0x8c>
 800b7ac:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b7b4:	e010      	b.n	800b7d8 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b7b6:	f7ff ff7f 	bl	800b6b8 <tcp_get_next_optbyte>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b7be:	7afb      	ldrb	r3, [r7, #11]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d914      	bls.n	800b7ee <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b7c4:	7afb      	ldrb	r3, [r7, #11]
 800b7c6:	b29a      	uxth	r2, r3
 800b7c8:	4b0f      	ldr	r3, [pc, #60]	; (800b808 <tcp_parseopt+0xe4>)
 800b7ca:	881b      	ldrh	r3, [r3, #0]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	3b02      	subs	r3, #2
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	4b0c      	ldr	r3, [pc, #48]	; (800b808 <tcp_parseopt+0xe4>)
 800b7d6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b7d8:	4b0b      	ldr	r3, [pc, #44]	; (800b808 <tcp_parseopt+0xe4>)
 800b7da:	881a      	ldrh	r2, [r3, #0]
 800b7dc:	4b09      	ldr	r3, [pc, #36]	; (800b804 <tcp_parseopt+0xe0>)
 800b7de:	881b      	ldrh	r3, [r3, #0]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d3b5      	bcc.n	800b750 <tcp_parseopt+0x2c>
 800b7e4:	e004      	b.n	800b7f0 <tcp_parseopt+0xcc>
          return;
 800b7e6:	bf00      	nop
 800b7e8:	e002      	b.n	800b7f0 <tcp_parseopt+0xcc>
            return;
 800b7ea:	bf00      	nop
 800b7ec:	e000      	b.n	800b7f0 <tcp_parseopt+0xcc>
            return;
 800b7ee:	bf00      	nop
      }
    }
  }
}
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	080148a4 	.word	0x080148a4
 800b7fc:	08014d08 	.word	0x08014d08
 800b800:	080148f0 	.word	0x080148f0
 800b804:	20000530 	.word	0x20000530
 800b808:	20000538 	.word	0x20000538

0800b80c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b80c:	b480      	push	{r7}
 800b80e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b810:	4b05      	ldr	r3, [pc, #20]	; (800b828 <tcp_trigger_input_pcb_close+0x1c>)
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	f043 0310 	orr.w	r3, r3, #16
 800b818:	b2da      	uxtb	r2, r3
 800b81a:	4b03      	ldr	r3, [pc, #12]	; (800b828 <tcp_trigger_input_pcb_close+0x1c>)
 800b81c:	701a      	strb	r2, [r3, #0]
}
 800b81e:	bf00      	nop
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr
 800b828:	20000549 	.word	0x20000549

0800b82c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00a      	beq.n	800b854 <tcp_route+0x28>
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	7a1b      	ldrb	r3, [r3, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d006      	beq.n	800b854 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	7a1b      	ldrb	r3, [r3, #8]
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7fb f8ba 	bl	80069c4 <netif_get_by_index>
 800b850:	4603      	mov	r3, r0
 800b852:	e003      	b.n	800b85c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f005 fc43 	bl	80110e0 <ip4_route>
 800b85a:	4603      	mov	r3, r0
  }
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b864:	b590      	push	{r4, r7, lr}
 800b866:	b087      	sub	sp, #28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	603b      	str	r3, [r7, #0]
 800b870:	4613      	mov	r3, r2
 800b872:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d105      	bne.n	800b886 <tcp_create_segment+0x22>
 800b87a:	4b44      	ldr	r3, [pc, #272]	; (800b98c <tcp_create_segment+0x128>)
 800b87c:	22a3      	movs	r2, #163	; 0xa3
 800b87e:	4944      	ldr	r1, [pc, #272]	; (800b990 <tcp_create_segment+0x12c>)
 800b880:	4844      	ldr	r0, [pc, #272]	; (800b994 <tcp_create_segment+0x130>)
 800b882:	f006 fe71 	bl	8012568 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d105      	bne.n	800b898 <tcp_create_segment+0x34>
 800b88c:	4b3f      	ldr	r3, [pc, #252]	; (800b98c <tcp_create_segment+0x128>)
 800b88e:	22a4      	movs	r2, #164	; 0xa4
 800b890:	4941      	ldr	r1, [pc, #260]	; (800b998 <tcp_create_segment+0x134>)
 800b892:	4840      	ldr	r0, [pc, #256]	; (800b994 <tcp_create_segment+0x130>)
 800b894:	f006 fe68 	bl	8012568 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	f003 0304 	and.w	r3, r3, #4
 800b8a4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b8a6:	2003      	movs	r0, #3
 800b8a8:	f7fa fd9c 	bl	80063e4 <memp_malloc>
 800b8ac:	6138      	str	r0, [r7, #16]
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d104      	bne.n	800b8be <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b8b4:	68b8      	ldr	r0, [r7, #8]
 800b8b6:	f7fb fbe1 	bl	800707c <pbuf_free>
    return NULL;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	e061      	b.n	800b982 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b8c4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	68ba      	ldr	r2, [r7, #8]
 800b8d0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	891a      	ldrh	r2, [r3, #8]
 800b8d6:	7dfb      	ldrb	r3, [r7, #23]
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d205      	bcs.n	800b8ea <tcp_create_segment+0x86>
 800b8de:	4b2b      	ldr	r3, [pc, #172]	; (800b98c <tcp_create_segment+0x128>)
 800b8e0:	22b0      	movs	r2, #176	; 0xb0
 800b8e2:	492e      	ldr	r1, [pc, #184]	; (800b99c <tcp_create_segment+0x138>)
 800b8e4:	482b      	ldr	r0, [pc, #172]	; (800b994 <tcp_create_segment+0x130>)
 800b8e6:	f006 fe3f 	bl	8012568 <iprintf>
  seg->len = p->tot_len - optlen;
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	891a      	ldrh	r2, [r3, #8]
 800b8ee:	7dfb      	ldrb	r3, [r7, #23]
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	1ad3      	subs	r3, r2, r3
 800b8f4:	b29a      	uxth	r2, r3
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b8fa:	2114      	movs	r1, #20
 800b8fc:	68b8      	ldr	r0, [r7, #8]
 800b8fe:	f7fb fb27 	bl	8006f50 <pbuf_add_header>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d004      	beq.n	800b912 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b908:	6938      	ldr	r0, [r7, #16]
 800b90a:	f7fc ffe9 	bl	80088e0 <tcp_seg_free>
    return NULL;
 800b90e:	2300      	movs	r3, #0
 800b910:	e037      	b.n	800b982 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	685a      	ldr	r2, [r3, #4]
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	8ada      	ldrh	r2, [r3, #22]
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	68dc      	ldr	r4, [r3, #12]
 800b924:	4610      	mov	r0, r2
 800b926:	f7fa f8d1 	bl	8005acc <lwip_htons>
 800b92a:	4603      	mov	r3, r0
 800b92c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	8b1a      	ldrh	r2, [r3, #24]
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	68dc      	ldr	r4, [r3, #12]
 800b936:	4610      	mov	r0, r2
 800b938:	f7fa f8c8 	bl	8005acc <lwip_htons>
 800b93c:	4603      	mov	r3, r0
 800b93e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	68dc      	ldr	r4, [r3, #12]
 800b944:	6838      	ldr	r0, [r7, #0]
 800b946:	f7fa f8d6 	bl	8005af6 <lwip_htonl>
 800b94a:	4603      	mov	r3, r0
 800b94c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b94e:	7dfb      	ldrb	r3, [r7, #23]
 800b950:	089b      	lsrs	r3, r3, #2
 800b952:	b2db      	uxtb	r3, r3
 800b954:	b29b      	uxth	r3, r3
 800b956:	3305      	adds	r3, #5
 800b958:	b29b      	uxth	r3, r3
 800b95a:	031b      	lsls	r3, r3, #12
 800b95c:	b29a      	uxth	r2, r3
 800b95e:	79fb      	ldrb	r3, [r7, #7]
 800b960:	b29b      	uxth	r3, r3
 800b962:	4313      	orrs	r3, r2
 800b964:	b29a      	uxth	r2, r3
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	68dc      	ldr	r4, [r3, #12]
 800b96a:	4610      	mov	r0, r2
 800b96c:	f7fa f8ae 	bl	8005acc <lwip_htons>
 800b970:	4603      	mov	r3, r0
 800b972:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	749a      	strb	r2, [r3, #18]
 800b97c:	2200      	movs	r2, #0
 800b97e:	74da      	strb	r2, [r3, #19]
  return seg;
 800b980:	693b      	ldr	r3, [r7, #16]
}
 800b982:	4618      	mov	r0, r3
 800b984:	371c      	adds	r7, #28
 800b986:	46bd      	mov	sp, r7
 800b988:	bd90      	pop	{r4, r7, pc}
 800b98a:	bf00      	nop
 800b98c:	08014d24 	.word	0x08014d24
 800b990:	08014d58 	.word	0x08014d58
 800b994:	08014d78 	.word	0x08014d78
 800b998:	08014da0 	.word	0x08014da0
 800b99c:	08014dc4 	.word	0x08014dc4

0800b9a0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b086      	sub	sp, #24
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	607b      	str	r3, [r7, #4]
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73fb      	strb	r3, [r7, #15]
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	81bb      	strh	r3, [r7, #12]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b9b4:	89bb      	ldrh	r3, [r7, #12]
 800b9b6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d105      	bne.n	800b9ca <tcp_pbuf_prealloc+0x2a>
 800b9be:	4b30      	ldr	r3, [pc, #192]	; (800ba80 <tcp_pbuf_prealloc+0xe0>)
 800b9c0:	22e8      	movs	r2, #232	; 0xe8
 800b9c2:	4930      	ldr	r1, [pc, #192]	; (800ba84 <tcp_pbuf_prealloc+0xe4>)
 800b9c4:	4830      	ldr	r0, [pc, #192]	; (800ba88 <tcp_pbuf_prealloc+0xe8>)
 800b9c6:	f006 fdcf 	bl	8012568 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b9ca:	6a3b      	ldr	r3, [r7, #32]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d105      	bne.n	800b9dc <tcp_pbuf_prealloc+0x3c>
 800b9d0:	4b2b      	ldr	r3, [pc, #172]	; (800ba80 <tcp_pbuf_prealloc+0xe0>)
 800b9d2:	22e9      	movs	r2, #233	; 0xe9
 800b9d4:	492d      	ldr	r1, [pc, #180]	; (800ba8c <tcp_pbuf_prealloc+0xec>)
 800b9d6:	482c      	ldr	r0, [pc, #176]	; (800ba88 <tcp_pbuf_prealloc+0xe8>)
 800b9d8:	f006 fdc6 	bl	8012568 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b9dc:	89ba      	ldrh	r2, [r7, #12]
 800b9de:	897b      	ldrh	r3, [r7, #10]
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d221      	bcs.n	800ba28 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b9e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b9e8:	f003 0302 	and.w	r3, r3, #2
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d111      	bne.n	800ba14 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800b9f0:	6a3b      	ldr	r3, [r7, #32]
 800b9f2:	8b5b      	ldrh	r3, [r3, #26]
 800b9f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d115      	bne.n	800ba28 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b9fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d007      	beq.n	800ba14 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800ba04:	6a3b      	ldr	r3, [r7, #32]
 800ba06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d103      	bne.n	800ba14 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800ba0c:	6a3b      	ldr	r3, [r7, #32]
 800ba0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d009      	beq.n	800ba28 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ba14:	89bb      	ldrh	r3, [r7, #12]
 800ba16:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800ba1a:	f023 0203 	bic.w	r2, r3, #3
 800ba1e:	897b      	ldrh	r3, [r7, #10]
 800ba20:	4293      	cmp	r3, r2
 800ba22:	bf28      	it	cs
 800ba24:	4613      	movcs	r3, r2
 800ba26:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ba28:	8af9      	ldrh	r1, [r7, #22]
 800ba2a:	7bfb      	ldrb	r3, [r7, #15]
 800ba2c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7fb f843 	bl	8006abc <pbuf_alloc>
 800ba36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d101      	bne.n	800ba42 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	e019      	b.n	800ba76 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d006      	beq.n	800ba58 <tcp_pbuf_prealloc+0xb8>
 800ba4a:	4b0d      	ldr	r3, [pc, #52]	; (800ba80 <tcp_pbuf_prealloc+0xe0>)
 800ba4c:	f240 120b 	movw	r2, #267	; 0x10b
 800ba50:	490f      	ldr	r1, [pc, #60]	; (800ba90 <tcp_pbuf_prealloc+0xf0>)
 800ba52:	480d      	ldr	r0, [pc, #52]	; (800ba88 <tcp_pbuf_prealloc+0xe8>)
 800ba54:	f006 fd88 	bl	8012568 <iprintf>
  *oversize = p->len - length;
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	895a      	ldrh	r2, [r3, #10]
 800ba5c:	89bb      	ldrh	r3, [r7, #12]
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	89ba      	ldrh	r2, [r7, #12]
 800ba6a:	811a      	strh	r2, [r3, #8]
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	891a      	ldrh	r2, [r3, #8]
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	815a      	strh	r2, [r3, #10]
  return p;
 800ba74:	693b      	ldr	r3, [r7, #16]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3718      	adds	r7, #24
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	08014d24 	.word	0x08014d24
 800ba84:	08014ddc 	.word	0x08014ddc
 800ba88:	08014d78 	.word	0x08014d78
 800ba8c:	08014e00 	.word	0x08014e00
 800ba90:	08014e20 	.word	0x08014e20

0800ba94 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d106      	bne.n	800bab4 <tcp_write_checks+0x20>
 800baa6:	4b33      	ldr	r3, [pc, #204]	; (800bb74 <tcp_write_checks+0xe0>)
 800baa8:	f240 1233 	movw	r2, #307	; 0x133
 800baac:	4932      	ldr	r1, [pc, #200]	; (800bb78 <tcp_write_checks+0xe4>)
 800baae:	4833      	ldr	r0, [pc, #204]	; (800bb7c <tcp_write_checks+0xe8>)
 800bab0:	f006 fd5a 	bl	8012568 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	7d1b      	ldrb	r3, [r3, #20]
 800bab8:	2b04      	cmp	r3, #4
 800baba:	d00e      	beq.n	800bada <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800bac0:	2b07      	cmp	r3, #7
 800bac2:	d00a      	beq.n	800bada <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800bac8:	2b02      	cmp	r3, #2
 800baca:	d006      	beq.n	800bada <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800bad0:	2b03      	cmp	r3, #3
 800bad2:	d002      	beq.n	800bada <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800bad4:	f06f 030a 	mvn.w	r3, #10
 800bad8:	e048      	b.n	800bb6c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800bada:	887b      	ldrh	r3, [r7, #2]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d101      	bne.n	800bae4 <tcp_write_checks+0x50>
    return ERR_OK;
 800bae0:	2300      	movs	r3, #0
 800bae2:	e043      	b.n	800bb6c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800baea:	887a      	ldrh	r2, [r7, #2]
 800baec:	429a      	cmp	r2, r3
 800baee:	d909      	bls.n	800bb04 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	8b5b      	ldrh	r3, [r3, #26]
 800baf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800bafe:	f04f 33ff 	mov.w	r3, #4294967295
 800bb02:	e033      	b.n	800bb6c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb0a:	2b08      	cmp	r3, #8
 800bb0c:	d909      	bls.n	800bb22 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	8b5b      	ldrh	r3, [r3, #26]
 800bb12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800bb1c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb20:	e024      	b.n	800bb6c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00f      	beq.n	800bb4c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d11a      	bne.n	800bb6a <tcp_write_checks+0xd6>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d116      	bne.n	800bb6a <tcp_write_checks+0xd6>
 800bb3c:	4b0d      	ldr	r3, [pc, #52]	; (800bb74 <tcp_write_checks+0xe0>)
 800bb3e:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800bb42:	490f      	ldr	r1, [pc, #60]	; (800bb80 <tcp_write_checks+0xec>)
 800bb44:	480d      	ldr	r0, [pc, #52]	; (800bb7c <tcp_write_checks+0xe8>)
 800bb46:	f006 fd0f 	bl	8012568 <iprintf>
 800bb4a:	e00e      	b.n	800bb6a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d103      	bne.n	800bb5c <tcp_write_checks+0xc8>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d006      	beq.n	800bb6a <tcp_write_checks+0xd6>
 800bb5c:	4b05      	ldr	r3, [pc, #20]	; (800bb74 <tcp_write_checks+0xe0>)
 800bb5e:	f240 1259 	movw	r2, #345	; 0x159
 800bb62:	4908      	ldr	r1, [pc, #32]	; (800bb84 <tcp_write_checks+0xf0>)
 800bb64:	4805      	ldr	r0, [pc, #20]	; (800bb7c <tcp_write_checks+0xe8>)
 800bb66:	f006 fcff 	bl	8012568 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3708      	adds	r7, #8
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	08014d24 	.word	0x08014d24
 800bb78:	08014e34 	.word	0x08014e34
 800bb7c:	08014d78 	.word	0x08014d78
 800bb80:	08014e54 	.word	0x08014e54
 800bb84:	08014e90 	.word	0x08014e90

0800bb88 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800bb88:	b590      	push	{r4, r7, lr}
 800bb8a:	b09b      	sub	sp, #108	; 0x6c
 800bb8c:	af04      	add	r7, sp, #16
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	4611      	mov	r1, r2
 800bb94:	461a      	mov	r2, r3
 800bb96:	460b      	mov	r3, r1
 800bb98:	80fb      	strh	r3, [r7, #6]
 800bb9a:	4613      	mov	r3, r2
 800bb9c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bba2:	2300      	movs	r3, #0
 800bba4:	653b      	str	r3, [r7, #80]	; 0x50
 800bba6:	2300      	movs	r3, #0
 800bba8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbaa:	2300      	movs	r3, #0
 800bbac:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbae:	2300      	movs	r3, #0
 800bbb0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d109      	bne.n	800bbe4 <tcp_write+0x5c>
 800bbd0:	4ba5      	ldr	r3, [pc, #660]	; (800be68 <tcp_write+0x2e0>)
 800bbd2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800bbd6:	49a5      	ldr	r1, [pc, #660]	; (800be6c <tcp_write+0x2e4>)
 800bbd8:	48a5      	ldr	r0, [pc, #660]	; (800be70 <tcp_write+0x2e8>)
 800bbda:	f006 fcc5 	bl	8012568 <iprintf>
 800bbde:	f06f 030f 	mvn.w	r3, #15
 800bbe2:	e32c      	b.n	800c23e <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bbea:	085b      	lsrs	r3, r3, #1
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	bf28      	it	cs
 800bbf6:	4613      	movcs	r3, r2
 800bbf8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800bbfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d102      	bne.n	800bc06 <tcp_write+0x7e>
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc04:	e000      	b.n	800bc08 <tcp_write+0x80>
 800bc06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc08:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d109      	bne.n	800bc24 <tcp_write+0x9c>
 800bc10:	4b95      	ldr	r3, [pc, #596]	; (800be68 <tcp_write+0x2e0>)
 800bc12:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800bc16:	4997      	ldr	r1, [pc, #604]	; (800be74 <tcp_write+0x2ec>)
 800bc18:	4895      	ldr	r0, [pc, #596]	; (800be70 <tcp_write+0x2e8>)
 800bc1a:	f006 fca5 	bl	8012568 <iprintf>
 800bc1e:	f06f 030f 	mvn.w	r3, #15
 800bc22:	e30c      	b.n	800c23e <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800bc24:	88fb      	ldrh	r3, [r7, #6]
 800bc26:	4619      	mov	r1, r3
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f7ff ff33 	bl	800ba94 <tcp_write_checks>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800bc34:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d002      	beq.n	800bc42 <tcp_write+0xba>
    return err;
 800bc3c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800bc40:	e2fd      	b.n	800c23e <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bc48:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f000 80f7 	beq.w	800be4a <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc60:	653b      	str	r3, [r7, #80]	; 0x50
 800bc62:	e002      	b.n	800bc6a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800bc64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bc6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d1f8      	bne.n	800bc64 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800bc72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc74:	7a9b      	ldrb	r3, [r3, #10]
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	f003 0304 	and.w	r3, r3, #4
 800bc7e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bc80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bc82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc84:	891b      	ldrh	r3, [r3, #8]
 800bc86:	4619      	mov	r1, r3
 800bc88:	8c3b      	ldrh	r3, [r7, #32]
 800bc8a:	440b      	add	r3, r1
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	da06      	bge.n	800bc9e <tcp_write+0x116>
 800bc90:	4b75      	ldr	r3, [pc, #468]	; (800be68 <tcp_write+0x2e0>)
 800bc92:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bc96:	4978      	ldr	r1, [pc, #480]	; (800be78 <tcp_write+0x2f0>)
 800bc98:	4875      	ldr	r0, [pc, #468]	; (800be70 <tcp_write+0x2e8>)
 800bc9a:	f006 fc65 	bl	8012568 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800bc9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bca0:	891a      	ldrh	r2, [r3, #8]
 800bca2:	8c3b      	ldrh	r3, [r7, #32]
 800bca4:	4413      	add	r3, r2
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bcaa:	1ad3      	subs	r3, r2, r3
 800bcac:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bcb4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800bcb6:	8a7b      	ldrh	r3, [r7, #18]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d027      	beq.n	800bd0c <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800bcbc:	8a7b      	ldrh	r3, [r7, #18]
 800bcbe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d206      	bcs.n	800bcd2 <tcp_write+0x14a>
 800bcc4:	4b68      	ldr	r3, [pc, #416]	; (800be68 <tcp_write+0x2e0>)
 800bcc6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800bcca:	496c      	ldr	r1, [pc, #432]	; (800be7c <tcp_write+0x2f4>)
 800bccc:	4868      	ldr	r0, [pc, #416]	; (800be70 <tcp_write+0x2e8>)
 800bcce:	f006 fc4b 	bl	8012568 <iprintf>
      seg = last_unsent;
 800bcd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcd4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800bcd6:	8a7b      	ldrh	r3, [r7, #18]
 800bcd8:	88fa      	ldrh	r2, [r7, #6]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d901      	bls.n	800bce2 <tcp_write+0x15a>
 800bcde:	8a7b      	ldrh	r3, [r7, #18]
 800bce0:	e000      	b.n	800bce4 <tcp_write+0x15c>
 800bce2:	88fb      	ldrh	r3, [r7, #6]
 800bce4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bce6:	4293      	cmp	r3, r2
 800bce8:	bfa8      	it	ge
 800bcea:	4613      	movge	r3, r2
 800bcec:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800bcee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bcf2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bcf4:	4413      	add	r3, r2
 800bcf6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800bcfa:	8a7a      	ldrh	r2, [r7, #18]
 800bcfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800bd04:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bd06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bd08:	1ad3      	subs	r3, r2, r3
 800bd0a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800bd0c:	8a7b      	ldrh	r3, [r7, #18]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d00b      	beq.n	800bd2a <tcp_write+0x1a2>
 800bd12:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bd16:	88fb      	ldrh	r3, [r7, #6]
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	d006      	beq.n	800bd2a <tcp_write+0x1a2>
 800bd1c:	4b52      	ldr	r3, [pc, #328]	; (800be68 <tcp_write+0x2e0>)
 800bd1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd22:	4957      	ldr	r1, [pc, #348]	; (800be80 <tcp_write+0x2f8>)
 800bd24:	4852      	ldr	r0, [pc, #328]	; (800be70 <tcp_write+0x2e8>)
 800bd26:	f006 fc1f 	bl	8012568 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800bd2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bd2e:	88fb      	ldrh	r3, [r7, #6]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	f080 8168 	bcs.w	800c006 <tcp_write+0x47e>
 800bd36:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f000 8164 	beq.w	800c006 <tcp_write+0x47e>
 800bd3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd40:	891b      	ldrh	r3, [r3, #8]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	f000 815f 	beq.w	800c006 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bd48:	88fa      	ldrh	r2, [r7, #6]
 800bd4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd4e:	1ad2      	subs	r2, r2, r3
 800bd50:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bd52:	4293      	cmp	r3, r2
 800bd54:	bfa8      	it	ge
 800bd56:	4613      	movge	r3, r2
 800bd58:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800bd5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd5c:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bd5e:	797b      	ldrb	r3, [r7, #5]
 800bd60:	f003 0301 	and.w	r3, r3, #1
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d027      	beq.n	800bdb8 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800bd68:	f107 0012 	add.w	r0, r7, #18
 800bd6c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bd6e:	8bf9      	ldrh	r1, [r7, #30]
 800bd70:	2301      	movs	r3, #1
 800bd72:	9302      	str	r3, [sp, #8]
 800bd74:	797b      	ldrb	r3, [r7, #5]
 800bd76:	9301      	str	r3, [sp, #4]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2000      	movs	r0, #0
 800bd80:	f7ff fe0e 	bl	800b9a0 <tcp_pbuf_prealloc>
 800bd84:	6578      	str	r0, [r7, #84]	; 0x54
 800bd86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f000 8226 	beq.w	800c1da <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800bd8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd90:	6858      	ldr	r0, [r3, #4]
 800bd92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	4413      	add	r3, r2
 800bd9a:	8bfa      	ldrh	r2, [r7, #30]
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	f006 fbd0 	bl	8012542 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800bda2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bda4:	f7fb f9f2 	bl	800718c <pbuf_clen>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	461a      	mov	r2, r3
 800bdac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bdb0:	4413      	add	r3, r2
 800bdb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800bdb6:	e041      	b.n	800be3c <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800bdb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	637b      	str	r3, [r7, #52]	; 0x34
 800bdbe:	e002      	b.n	800bdc6 <tcp_write+0x23e>
 800bdc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	637b      	str	r3, [r7, #52]	; 0x34
 800bdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d1f8      	bne.n	800bdc0 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bdce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdd0:	7b1b      	ldrb	r3, [r3, #12]
 800bdd2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d115      	bne.n	800be06 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800bdda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bde0:	8952      	ldrh	r2, [r2, #10]
 800bde2:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d10d      	bne.n	800be06 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800bdea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d006      	beq.n	800be00 <tcp_write+0x278>
 800bdf2:	4b1d      	ldr	r3, [pc, #116]	; (800be68 <tcp_write+0x2e0>)
 800bdf4:	f240 2231 	movw	r2, #561	; 0x231
 800bdf8:	4922      	ldr	r1, [pc, #136]	; (800be84 <tcp_write+0x2fc>)
 800bdfa:	481d      	ldr	r0, [pc, #116]	; (800be70 <tcp_write+0x2e8>)
 800bdfc:	f006 fbb4 	bl	8012568 <iprintf>
          extendlen = seglen;
 800be00:	8bfb      	ldrh	r3, [r7, #30]
 800be02:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800be04:	e01a      	b.n	800be3c <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800be06:	8bfb      	ldrh	r3, [r7, #30]
 800be08:	2201      	movs	r2, #1
 800be0a:	4619      	mov	r1, r3
 800be0c:	2000      	movs	r0, #0
 800be0e:	f7fa fe55 	bl	8006abc <pbuf_alloc>
 800be12:	6578      	str	r0, [r7, #84]	; 0x54
 800be14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be16:	2b00      	cmp	r3, #0
 800be18:	f000 81e1 	beq.w	800c1de <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800be1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	441a      	add	r2, r3
 800be24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be26:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800be28:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800be2a:	f7fb f9af 	bl	800718c <pbuf_clen>
 800be2e:	4603      	mov	r3, r0
 800be30:	461a      	mov	r2, r3
 800be32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800be36:	4413      	add	r3, r2
 800be38:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800be3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800be40:	8bfb      	ldrh	r3, [r7, #30]
 800be42:	4413      	add	r3, r2
 800be44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800be48:	e0dd      	b.n	800c006 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800be50:	2b00      	cmp	r3, #0
 800be52:	f000 80d8 	beq.w	800c006 <tcp_write+0x47e>
 800be56:	4b04      	ldr	r3, [pc, #16]	; (800be68 <tcp_write+0x2e0>)
 800be58:	f240 224b 	movw	r2, #587	; 0x24b
 800be5c:	490a      	ldr	r1, [pc, #40]	; (800be88 <tcp_write+0x300>)
 800be5e:	4804      	ldr	r0, [pc, #16]	; (800be70 <tcp_write+0x2e8>)
 800be60:	f006 fb82 	bl	8012568 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800be64:	e0cf      	b.n	800c006 <tcp_write+0x47e>
 800be66:	bf00      	nop
 800be68:	08014d24 	.word	0x08014d24
 800be6c:	08014ec4 	.word	0x08014ec4
 800be70:	08014d78 	.word	0x08014d78
 800be74:	08014edc 	.word	0x08014edc
 800be78:	08014f10 	.word	0x08014f10
 800be7c:	08014f28 	.word	0x08014f28
 800be80:	08014f48 	.word	0x08014f48
 800be84:	08014f68 	.word	0x08014f68
 800be88:	08014f94 	.word	0x08014f94
    struct pbuf *p;
    u16_t left = len - pos;
 800be8c:	88fa      	ldrh	r2, [r7, #6]
 800be8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800be92:	1ad3      	subs	r3, r2, r3
 800be94:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800be96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800be9e:	1ad3      	subs	r3, r2, r3
 800bea0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800bea2:	8b7a      	ldrh	r2, [r7, #26]
 800bea4:	8bbb      	ldrh	r3, [r7, #28]
 800bea6:	4293      	cmp	r3, r2
 800bea8:	bf28      	it	cs
 800beaa:	4613      	movcs	r3, r2
 800beac:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800beae:	797b      	ldrb	r3, [r7, #5]
 800beb0:	f003 0301 	and.w	r3, r3, #1
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d036      	beq.n	800bf26 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800beb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bebc:	b29a      	uxth	r2, r3
 800bebe:	8b3b      	ldrh	r3, [r7, #24]
 800bec0:	4413      	add	r3, r2
 800bec2:	b299      	uxth	r1, r3
 800bec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	bf0c      	ite	eq
 800beca:	2301      	moveq	r3, #1
 800becc:	2300      	movne	r3, #0
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	f107 0012 	add.w	r0, r7, #18
 800bed4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bed6:	9302      	str	r3, [sp, #8]
 800bed8:	797b      	ldrb	r3, [r7, #5]
 800beda:	9301      	str	r3, [sp, #4]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	9300      	str	r3, [sp, #0]
 800bee0:	4603      	mov	r3, r0
 800bee2:	2036      	movs	r0, #54	; 0x36
 800bee4:	f7ff fd5c 	bl	800b9a0 <tcp_pbuf_prealloc>
 800bee8:	6338      	str	r0, [r7, #48]	; 0x30
 800beea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beec:	2b00      	cmp	r3, #0
 800beee:	f000 8178 	beq.w	800c1e2 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef4:	895b      	ldrh	r3, [r3, #10]
 800bef6:	8b3a      	ldrh	r2, [r7, #24]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d906      	bls.n	800bf0a <tcp_write+0x382>
 800befc:	4b8c      	ldr	r3, [pc, #560]	; (800c130 <tcp_write+0x5a8>)
 800befe:	f240 2267 	movw	r2, #615	; 0x267
 800bf02:	498c      	ldr	r1, [pc, #560]	; (800c134 <tcp_write+0x5ac>)
 800bf04:	488c      	ldr	r0, [pc, #560]	; (800c138 <tcp_write+0x5b0>)
 800bf06:	f006 fb2f 	bl	8012568 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800bf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0c:	685a      	ldr	r2, [r3, #4]
 800bf0e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bf12:	18d0      	adds	r0, r2, r3
 800bf14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	4413      	add	r3, r2
 800bf1c:	8b3a      	ldrh	r2, [r7, #24]
 800bf1e:	4619      	mov	r1, r3
 800bf20:	f006 fb0f 	bl	8012542 <memcpy>
 800bf24:	e02f      	b.n	800bf86 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bf26:	8a7b      	ldrh	r3, [r7, #18]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d006      	beq.n	800bf3a <tcp_write+0x3b2>
 800bf2c:	4b80      	ldr	r3, [pc, #512]	; (800c130 <tcp_write+0x5a8>)
 800bf2e:	f240 2271 	movw	r2, #625	; 0x271
 800bf32:	4982      	ldr	r1, [pc, #520]	; (800c13c <tcp_write+0x5b4>)
 800bf34:	4880      	ldr	r0, [pc, #512]	; (800c138 <tcp_write+0x5b0>)
 800bf36:	f006 fb17 	bl	8012568 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800bf3a:	8b3b      	ldrh	r3, [r7, #24]
 800bf3c:	2201      	movs	r2, #1
 800bf3e:	4619      	mov	r1, r3
 800bf40:	2036      	movs	r0, #54	; 0x36
 800bf42:	f7fa fdbb 	bl	8006abc <pbuf_alloc>
 800bf46:	6178      	str	r0, [r7, #20]
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f000 814b 	beq.w	800c1e6 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800bf50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	441a      	add	r2, r3
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bf5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bf66:	4619      	mov	r1, r3
 800bf68:	2036      	movs	r0, #54	; 0x36
 800bf6a:	f7fa fda7 	bl	8006abc <pbuf_alloc>
 800bf6e:	6338      	str	r0, [r7, #48]	; 0x30
 800bf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d103      	bne.n	800bf7e <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800bf76:	6978      	ldr	r0, [r7, #20]
 800bf78:	f7fb f880 	bl	800707c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800bf7c:	e136      	b.n	800c1ec <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800bf7e:	6979      	ldr	r1, [r7, #20]
 800bf80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf82:	f7fb f93d 	bl	8007200 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800bf86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf88:	f7fb f900 	bl	800718c <pbuf_clen>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	461a      	mov	r2, r3
 800bf90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bf94:	4413      	add	r3, r2
 800bf96:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800bf9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800bf9e:	2b09      	cmp	r3, #9
 800bfa0:	d903      	bls.n	800bfaa <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800bfa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfa4:	f7fb f86a 	bl	800707c <pbuf_free>
      goto memerr;
 800bfa8:	e120      	b.n	800c1ec <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bfae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800bfb2:	441a      	add	r2, r3
 800bfb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfb8:	9300      	str	r3, [sp, #0]
 800bfba:	4613      	mov	r3, r2
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f7ff fc4f 	bl	800b864 <tcp_create_segment>
 800bfc6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800bfc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	f000 810d 	beq.w	800c1ea <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800bfd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d102      	bne.n	800bfdc <tcp_write+0x454>
      queue = seg;
 800bfd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfd8:	647b      	str	r3, [r7, #68]	; 0x44
 800bfda:	e00c      	b.n	800bff6 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800bfdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d106      	bne.n	800bff0 <tcp_write+0x468>
 800bfe2:	4b53      	ldr	r3, [pc, #332]	; (800c130 <tcp_write+0x5a8>)
 800bfe4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800bfe8:	4955      	ldr	r1, [pc, #340]	; (800c140 <tcp_write+0x5b8>)
 800bfea:	4853      	ldr	r0, [pc, #332]	; (800c138 <tcp_write+0x5b0>)
 800bfec:	f006 fabc 	bl	8012568 <iprintf>
      prev_seg->next = seg;
 800bff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bff2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bff4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800bff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bff8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800bffa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800bffe:	8b3b      	ldrh	r3, [r7, #24]
 800c000:	4413      	add	r3, r2
 800c002:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800c006:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c00a:	88fb      	ldrh	r3, [r7, #6]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	f4ff af3d 	bcc.w	800be8c <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800c012:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c014:	2b00      	cmp	r3, #0
 800c016:	d02c      	beq.n	800c072 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800c018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c01e:	e01e      	b.n	800c05e <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 800c020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c022:	891a      	ldrh	r2, [r3, #8]
 800c024:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c026:	4413      	add	r3, r2
 800c028:	b29a      	uxth	r2, r3
 800c02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800c02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d110      	bne.n	800c058 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800c036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c03c:	8952      	ldrh	r2, [r2, #10]
 800c03e:	4413      	add	r3, r2
 800c040:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800c042:	68b9      	ldr	r1, [r7, #8]
 800c044:	4618      	mov	r0, r3
 800c046:	f006 fa7c 	bl	8012542 <memcpy>
        p->len += oversize_used;
 800c04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04c:	895a      	ldrh	r2, [r3, #10]
 800c04e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c050:	4413      	add	r3, r2
 800c052:	b29a      	uxth	r2, r3
 800c054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c056:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800c058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1dd      	bne.n	800c020 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 800c064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c066:	891a      	ldrh	r2, [r3, #8]
 800c068:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800c06a:	4413      	add	r3, r2
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c070:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800c072:	8a7a      	ldrh	r2, [r7, #18]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800c07a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d018      	beq.n	800c0b2 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800c080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c082:	2b00      	cmp	r3, #0
 800c084:	d106      	bne.n	800c094 <tcp_write+0x50c>
 800c086:	4b2a      	ldr	r3, [pc, #168]	; (800c130 <tcp_write+0x5a8>)
 800c088:	f240 22e1 	movw	r2, #737	; 0x2e1
 800c08c:	492d      	ldr	r1, [pc, #180]	; (800c144 <tcp_write+0x5bc>)
 800c08e:	482a      	ldr	r0, [pc, #168]	; (800c138 <tcp_write+0x5b0>)
 800c090:	f006 fa6a 	bl	8012568 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800c094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7fb f8b0 	bl	8007200 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800c0a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0a2:	891a      	ldrh	r2, [r3, #8]
 800c0a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0a6:	891b      	ldrh	r3, [r3, #8]
 800c0a8:	4413      	add	r3, r2
 800c0aa:	b29a      	uxth	r2, r3
 800c0ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0ae:	811a      	strh	r2, [r3, #8]
 800c0b0:	e037      	b.n	800c122 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 800c0b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d034      	beq.n	800c122 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c0b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d003      	beq.n	800c0c6 <tcp_write+0x53e>
 800c0be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d106      	bne.n	800c0d4 <tcp_write+0x54c>
 800c0c6:	4b1a      	ldr	r3, [pc, #104]	; (800c130 <tcp_write+0x5a8>)
 800c0c8:	f240 22e7 	movw	r2, #743	; 0x2e7
 800c0cc:	491e      	ldr	r1, [pc, #120]	; (800c148 <tcp_write+0x5c0>)
 800c0ce:	481a      	ldr	r0, [pc, #104]	; (800c138 <tcp_write+0x5b0>)
 800c0d0:	f006 fa4a 	bl	8012568 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c0d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0da:	e009      	b.n	800c0f0 <tcp_write+0x568>
      p->tot_len += extendlen;
 800c0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0de:	891a      	ldrh	r2, [r3, #8]
 800c0e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c0e2:	4413      	add	r3, r2
 800c0e4:	b29a      	uxth	r2, r3
 800c0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d1f1      	bne.n	800c0dc <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 800c0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fa:	891a      	ldrh	r2, [r3, #8]
 800c0fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c0fe:	4413      	add	r3, r2
 800c100:	b29a      	uxth	r2, r3
 800c102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c104:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800c106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c108:	895a      	ldrh	r2, [r3, #10]
 800c10a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c10c:	4413      	add	r3, r2
 800c10e:	b29a      	uxth	r2, r3
 800c110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c112:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800c114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c116:	891a      	ldrh	r2, [r3, #8]
 800c118:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c11a:	4413      	add	r3, r2
 800c11c:	b29a      	uxth	r2, r3
 800c11e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c120:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800c122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c124:	2b00      	cmp	r3, #0
 800c126:	d111      	bne.n	800c14c <tcp_write+0x5c4>
    pcb->unsent = queue;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c12c:	66da      	str	r2, [r3, #108]	; 0x6c
 800c12e:	e010      	b.n	800c152 <tcp_write+0x5ca>
 800c130:	08014d24 	.word	0x08014d24
 800c134:	08014fc4 	.word	0x08014fc4
 800c138:	08014d78 	.word	0x08014d78
 800c13c:	08015004 	.word	0x08015004
 800c140:	08015014 	.word	0x08015014
 800c144:	08015028 	.word	0x08015028
 800c148:	08015060 	.word	0x08015060
  } else {
    last_unsent->next = queue;
 800c14c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c14e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c150:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c156:	88fb      	ldrh	r3, [r7, #6]
 800c158:	441a      	add	r2, r3
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c164:	88fb      	ldrh	r3, [r7, #6]
 800c166:	1ad3      	subs	r3, r2, r3
 800c168:	b29a      	uxth	r2, r3
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c176:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00e      	beq.n	800c1a2 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d10a      	bne.n	800c1a2 <tcp_write+0x61a>
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c190:	2b00      	cmp	r3, #0
 800c192:	d106      	bne.n	800c1a2 <tcp_write+0x61a>
 800c194:	4b2c      	ldr	r3, [pc, #176]	; (800c248 <tcp_write+0x6c0>)
 800c196:	f240 3213 	movw	r2, #787	; 0x313
 800c19a:	492c      	ldr	r1, [pc, #176]	; (800c24c <tcp_write+0x6c4>)
 800c19c:	482c      	ldr	r0, [pc, #176]	; (800c250 <tcp_write+0x6c8>)
 800c19e:	f006 f9e3 	bl	8012568 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800c1a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d016      	beq.n	800c1d6 <tcp_write+0x64e>
 800c1a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d012      	beq.n	800c1d6 <tcp_write+0x64e>
 800c1b0:	797b      	ldrb	r3, [r7, #5]
 800c1b2:	f003 0302 	and.w	r3, r3, #2
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d10d      	bne.n	800c1d6 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800c1ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	899b      	ldrh	r3, [r3, #12]
 800c1c0:	b29c      	uxth	r4, r3
 800c1c2:	2008      	movs	r0, #8
 800c1c4:	f7f9 fc82 	bl	8005acc <lwip_htons>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1ce:	68db      	ldr	r3, [r3, #12]
 800c1d0:	4322      	orrs	r2, r4
 800c1d2:	b292      	uxth	r2, r2
 800c1d4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	e031      	b.n	800c23e <tcp_write+0x6b6>
          goto memerr;
 800c1da:	bf00      	nop
 800c1dc:	e006      	b.n	800c1ec <tcp_write+0x664>
            goto memerr;
 800c1de:	bf00      	nop
 800c1e0:	e004      	b.n	800c1ec <tcp_write+0x664>
        goto memerr;
 800c1e2:	bf00      	nop
 800c1e4:	e002      	b.n	800c1ec <tcp_write+0x664>
        goto memerr;
 800c1e6:	bf00      	nop
 800c1e8:	e000      	b.n	800c1ec <tcp_write+0x664>
      goto memerr;
 800c1ea:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	8b5b      	ldrh	r3, [r3, #26]
 800c1f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800c1fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d002      	beq.n	800c206 <tcp_write+0x67e>
    pbuf_free(concat_p);
 800c200:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c202:	f7fa ff3b 	bl	800707c <pbuf_free>
  }
  if (queue != NULL) {
 800c206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d002      	beq.n	800c212 <tcp_write+0x68a>
    tcp_segs_free(queue);
 800c20c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c20e:	f7fc fb53 	bl	80088b8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d00e      	beq.n	800c23a <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10a      	bne.n	800c23a <tcp_write+0x6b2>
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d106      	bne.n	800c23a <tcp_write+0x6b2>
 800c22c:	4b06      	ldr	r3, [pc, #24]	; (800c248 <tcp_write+0x6c0>)
 800c22e:	f44f 724a 	mov.w	r2, #808	; 0x328
 800c232:	4906      	ldr	r1, [pc, #24]	; (800c24c <tcp_write+0x6c4>)
 800c234:	4806      	ldr	r0, [pc, #24]	; (800c250 <tcp_write+0x6c8>)
 800c236:	f006 f997 	bl	8012568 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800c23a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c23e:	4618      	mov	r0, r3
 800c240:	375c      	adds	r7, #92	; 0x5c
 800c242:	46bd      	mov	sp, r7
 800c244:	bd90      	pop	{r4, r7, pc}
 800c246:	bf00      	nop
 800c248:	08014d24 	.word	0x08014d24
 800c24c:	08015098 	.word	0x08015098
 800c250:	08014d78 	.word	0x08014d78

0800c254 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800c254:	b590      	push	{r4, r7, lr}
 800c256:	b08b      	sub	sp, #44	; 0x2c
 800c258:	af02      	add	r7, sp, #8
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800c260:	2300      	movs	r3, #0
 800c262:	61fb      	str	r3, [r7, #28]
 800c264:	2300      	movs	r3, #0
 800c266:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c268:	2300      	movs	r3, #0
 800c26a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d106      	bne.n	800c280 <tcp_split_unsent_seg+0x2c>
 800c272:	4b95      	ldr	r3, [pc, #596]	; (800c4c8 <tcp_split_unsent_seg+0x274>)
 800c274:	f240 324b 	movw	r2, #843	; 0x34b
 800c278:	4994      	ldr	r1, [pc, #592]	; (800c4cc <tcp_split_unsent_seg+0x278>)
 800c27a:	4895      	ldr	r0, [pc, #596]	; (800c4d0 <tcp_split_unsent_seg+0x27c>)
 800c27c:	f006 f974 	bl	8012568 <iprintf>

  useg = pcb->unsent;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c284:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d102      	bne.n	800c292 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800c28c:	f04f 33ff 	mov.w	r3, #4294967295
 800c290:	e116      	b.n	800c4c0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800c292:	887b      	ldrh	r3, [r7, #2]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d109      	bne.n	800c2ac <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c298:	4b8b      	ldr	r3, [pc, #556]	; (800c4c8 <tcp_split_unsent_seg+0x274>)
 800c29a:	f240 3253 	movw	r2, #851	; 0x353
 800c29e:	498d      	ldr	r1, [pc, #564]	; (800c4d4 <tcp_split_unsent_seg+0x280>)
 800c2a0:	488b      	ldr	r0, [pc, #556]	; (800c4d0 <tcp_split_unsent_seg+0x27c>)
 800c2a2:	f006 f961 	bl	8012568 <iprintf>
    return ERR_VAL;
 800c2a6:	f06f 0305 	mvn.w	r3, #5
 800c2aa:	e109      	b.n	800c4c0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	891b      	ldrh	r3, [r3, #8]
 800c2b0:	887a      	ldrh	r2, [r7, #2]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d301      	bcc.n	800c2ba <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	e102      	b.n	800c4c0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2be:	887a      	ldrh	r2, [r7, #2]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d906      	bls.n	800c2d2 <tcp_split_unsent_seg+0x7e>
 800c2c4:	4b80      	ldr	r3, [pc, #512]	; (800c4c8 <tcp_split_unsent_seg+0x274>)
 800c2c6:	f240 325b 	movw	r2, #859	; 0x35b
 800c2ca:	4983      	ldr	r1, [pc, #524]	; (800c4d8 <tcp_split_unsent_seg+0x284>)
 800c2cc:	4880      	ldr	r0, [pc, #512]	; (800c4d0 <tcp_split_unsent_seg+0x27c>)
 800c2ce:	f006 f94b 	bl	8012568 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	891b      	ldrh	r3, [r3, #8]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d106      	bne.n	800c2e8 <tcp_split_unsent_seg+0x94>
 800c2da:	4b7b      	ldr	r3, [pc, #492]	; (800c4c8 <tcp_split_unsent_seg+0x274>)
 800c2dc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c2e0:	497e      	ldr	r1, [pc, #504]	; (800c4dc <tcp_split_unsent_seg+0x288>)
 800c2e2:	487b      	ldr	r0, [pc, #492]	; (800c4d0 <tcp_split_unsent_seg+0x27c>)
 800c2e4:	f006 f940 	bl	8012568 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	7a9b      	ldrb	r3, [r3, #10]
 800c2ec:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c2ee:	7bfb      	ldrb	r3, [r7, #15]
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	b2db      	uxtb	r3, r3
 800c2f4:	f003 0304 	and.w	r3, r3, #4
 800c2f8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	891a      	ldrh	r2, [r3, #8]
 800c2fe:	887b      	ldrh	r3, [r7, #2]
 800c300:	1ad3      	subs	r3, r2, r3
 800c302:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c304:	7bbb      	ldrb	r3, [r7, #14]
 800c306:	b29a      	uxth	r2, r3
 800c308:	89bb      	ldrh	r3, [r7, #12]
 800c30a:	4413      	add	r3, r2
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c312:	4619      	mov	r1, r3
 800c314:	2036      	movs	r0, #54	; 0x36
 800c316:	f7fa fbd1 	bl	8006abc <pbuf_alloc>
 800c31a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	f000 80b7 	beq.w	800c492 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	891a      	ldrh	r2, [r3, #8]
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	891b      	ldrh	r3, [r3, #8]
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	b29a      	uxth	r2, r3
 800c332:	887b      	ldrh	r3, [r7, #2]
 800c334:	4413      	add	r3, r2
 800c336:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	6858      	ldr	r0, [r3, #4]
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	685a      	ldr	r2, [r3, #4]
 800c340:	7bbb      	ldrb	r3, [r7, #14]
 800c342:	18d1      	adds	r1, r2, r3
 800c344:	897b      	ldrh	r3, [r7, #10]
 800c346:	89ba      	ldrh	r2, [r7, #12]
 800c348:	f7fb f892 	bl	8007470 <pbuf_copy_partial>
 800c34c:	4603      	mov	r3, r0
 800c34e:	461a      	mov	r2, r3
 800c350:	89bb      	ldrh	r3, [r7, #12]
 800c352:	4293      	cmp	r3, r2
 800c354:	f040 809f 	bne.w	800c496 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	899b      	ldrh	r3, [r3, #12]
 800c35e:	b29b      	uxth	r3, r3
 800c360:	4618      	mov	r0, r3
 800c362:	f7f9 fbb3 	bl	8005acc <lwip_htons>
 800c366:	4603      	mov	r3, r0
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c36e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c370:	2300      	movs	r3, #0
 800c372:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c374:	7efb      	ldrb	r3, [r7, #27]
 800c376:	f003 0308 	and.w	r3, r3, #8
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d007      	beq.n	800c38e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c37e:	7efb      	ldrb	r3, [r7, #27]
 800c380:	f023 0308 	bic.w	r3, r3, #8
 800c384:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c386:	7ebb      	ldrb	r3, [r7, #26]
 800c388:	f043 0308 	orr.w	r3, r3, #8
 800c38c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c38e:	7efb      	ldrb	r3, [r7, #27]
 800c390:	f003 0301 	and.w	r3, r3, #1
 800c394:	2b00      	cmp	r3, #0
 800c396:	d007      	beq.n	800c3a8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c398:	7efb      	ldrb	r3, [r7, #27]
 800c39a:	f023 0301 	bic.w	r3, r3, #1
 800c39e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c3a0:	7ebb      	ldrb	r3, [r7, #26]
 800c3a2:	f043 0301 	orr.w	r3, r3, #1
 800c3a6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7f9 fba1 	bl	8005af6 <lwip_htonl>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	887b      	ldrh	r3, [r7, #2]
 800c3b8:	18d1      	adds	r1, r2, r3
 800c3ba:	7eba      	ldrb	r2, [r7, #26]
 800c3bc:	7bfb      	ldrb	r3, [r7, #15]
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	6939      	ldr	r1, [r7, #16]
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f7ff fa4d 	bl	800b864 <tcp_create_segment>
 800c3ca:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d063      	beq.n	800c49a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7fa fed8 	bl	800718c <pbuf_clen>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	461a      	mov	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c3e6:	1a9b      	subs	r3, r3, r2
 800c3e8:	b29a      	uxth	r2, r3
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	6858      	ldr	r0, [r3, #4]
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	685b      	ldr	r3, [r3, #4]
 800c3f8:	891a      	ldrh	r2, [r3, #8]
 800c3fa:	89bb      	ldrh	r3, [r7, #12]
 800c3fc:	1ad3      	subs	r3, r2, r3
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	4619      	mov	r1, r3
 800c402:	f7fa fcb5 	bl	8006d70 <pbuf_realloc>
  useg->len -= remainder;
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	891a      	ldrh	r2, [r3, #8]
 800c40a:	89bb      	ldrh	r3, [r7, #12]
 800c40c:	1ad3      	subs	r3, r2, r3
 800c40e:	b29a      	uxth	r2, r3
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	899b      	ldrh	r3, [r3, #12]
 800c41a:	b29c      	uxth	r4, r3
 800c41c:	7efb      	ldrb	r3, [r7, #27]
 800c41e:	b29b      	uxth	r3, r3
 800c420:	4618      	mov	r0, r3
 800c422:	f7f9 fb53 	bl	8005acc <lwip_htons>
 800c426:	4603      	mov	r3, r0
 800c428:	461a      	mov	r2, r3
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	4322      	orrs	r2, r4
 800c430:	b292      	uxth	r2, r2
 800c432:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	4618      	mov	r0, r3
 800c43a:	f7fa fea7 	bl	800718c <pbuf_clen>
 800c43e:	4603      	mov	r3, r0
 800c440:	461a      	mov	r2, r3
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c448:	4413      	add	r3, r2
 800c44a:	b29a      	uxth	r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c452:	69fb      	ldr	r3, [r7, #28]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	4618      	mov	r0, r3
 800c458:	f7fa fe98 	bl	800718c <pbuf_clen>
 800c45c:	4603      	mov	r3, r0
 800c45e:	461a      	mov	r2, r3
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c466:	4413      	add	r3, r2
 800c468:	b29a      	uxth	r2, r3
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	69fa      	ldr	r2, [r7, #28]
 800c47c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c47e:	69fb      	ldr	r3, [r7, #28]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d103      	bne.n	800c48e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2200      	movs	r2, #0
 800c48a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c48e:	2300      	movs	r3, #0
 800c490:	e016      	b.n	800c4c0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c492:	bf00      	nop
 800c494:	e002      	b.n	800c49c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c496:	bf00      	nop
 800c498:	e000      	b.n	800c49c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c49a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d006      	beq.n	800c4b0 <tcp_split_unsent_seg+0x25c>
 800c4a2:	4b09      	ldr	r3, [pc, #36]	; (800c4c8 <tcp_split_unsent_seg+0x274>)
 800c4a4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c4a8:	490d      	ldr	r1, [pc, #52]	; (800c4e0 <tcp_split_unsent_seg+0x28c>)
 800c4aa:	4809      	ldr	r0, [pc, #36]	; (800c4d0 <tcp_split_unsent_seg+0x27c>)
 800c4ac:	f006 f85c 	bl	8012568 <iprintf>
  if (p != NULL) {
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d002      	beq.n	800c4bc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c4b6:	6938      	ldr	r0, [r7, #16]
 800c4b8:	f7fa fde0 	bl	800707c <pbuf_free>
  }

  return ERR_MEM;
 800c4bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3724      	adds	r7, #36	; 0x24
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd90      	pop	{r4, r7, pc}
 800c4c8:	08014d24 	.word	0x08014d24
 800c4cc:	080150b8 	.word	0x080150b8
 800c4d0:	08014d78 	.word	0x08014d78
 800c4d4:	080150dc 	.word	0x080150dc
 800c4d8:	08015100 	.word	0x08015100
 800c4dc:	08015110 	.word	0x08015110
 800c4e0:	08015120 	.word	0x08015120

0800c4e4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c4e4:	b590      	push	{r4, r7, lr}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d106      	bne.n	800c500 <tcp_send_fin+0x1c>
 800c4f2:	4b21      	ldr	r3, [pc, #132]	; (800c578 <tcp_send_fin+0x94>)
 800c4f4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c4f8:	4920      	ldr	r1, [pc, #128]	; (800c57c <tcp_send_fin+0x98>)
 800c4fa:	4821      	ldr	r0, [pc, #132]	; (800c580 <tcp_send_fin+0x9c>)
 800c4fc:	f006 f834 	bl	8012568 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c504:	2b00      	cmp	r3, #0
 800c506:	d02e      	beq.n	800c566 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c50c:	60fb      	str	r3, [r7, #12]
 800c50e:	e002      	b.n	800c516 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d1f8      	bne.n	800c510 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	899b      	ldrh	r3, [r3, #12]
 800c524:	b29b      	uxth	r3, r3
 800c526:	4618      	mov	r0, r3
 800c528:	f7f9 fad0 	bl	8005acc <lwip_htons>
 800c52c:	4603      	mov	r3, r0
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	f003 0307 	and.w	r3, r3, #7
 800c534:	2b00      	cmp	r3, #0
 800c536:	d116      	bne.n	800c566 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	899b      	ldrh	r3, [r3, #12]
 800c53e:	b29c      	uxth	r4, r3
 800c540:	2001      	movs	r0, #1
 800c542:	f7f9 fac3 	bl	8005acc <lwip_htons>
 800c546:	4603      	mov	r3, r0
 800c548:	461a      	mov	r2, r3
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	4322      	orrs	r2, r4
 800c550:	b292      	uxth	r2, r2
 800c552:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	8b5b      	ldrh	r3, [r3, #26]
 800c558:	f043 0320 	orr.w	r3, r3, #32
 800c55c:	b29a      	uxth	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c562:	2300      	movs	r3, #0
 800c564:	e004      	b.n	800c570 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c566:	2101      	movs	r1, #1
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 f80b 	bl	800c584 <tcp_enqueue_flags>
 800c56e:	4603      	mov	r3, r0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3714      	adds	r7, #20
 800c574:	46bd      	mov	sp, r7
 800c576:	bd90      	pop	{r4, r7, pc}
 800c578:	08014d24 	.word	0x08014d24
 800c57c:	0801512c 	.word	0x0801512c
 800c580:	08014d78 	.word	0x08014d78

0800c584 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b08a      	sub	sp, #40	; 0x28
 800c588:	af02      	add	r7, sp, #8
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	460b      	mov	r3, r1
 800c58e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c590:	2300      	movs	r3, #0
 800c592:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c594:	2300      	movs	r3, #0
 800c596:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c598:	78fb      	ldrb	r3, [r7, #3]
 800c59a:	f003 0303 	and.w	r3, r3, #3
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d106      	bne.n	800c5b0 <tcp_enqueue_flags+0x2c>
 800c5a2:	4b67      	ldr	r3, [pc, #412]	; (800c740 <tcp_enqueue_flags+0x1bc>)
 800c5a4:	f240 4212 	movw	r2, #1042	; 0x412
 800c5a8:	4966      	ldr	r1, [pc, #408]	; (800c744 <tcp_enqueue_flags+0x1c0>)
 800c5aa:	4867      	ldr	r0, [pc, #412]	; (800c748 <tcp_enqueue_flags+0x1c4>)
 800c5ac:	f005 ffdc 	bl	8012568 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d106      	bne.n	800c5c4 <tcp_enqueue_flags+0x40>
 800c5b6:	4b62      	ldr	r3, [pc, #392]	; (800c740 <tcp_enqueue_flags+0x1bc>)
 800c5b8:	f240 4213 	movw	r2, #1043	; 0x413
 800c5bc:	4963      	ldr	r1, [pc, #396]	; (800c74c <tcp_enqueue_flags+0x1c8>)
 800c5be:	4862      	ldr	r0, [pc, #392]	; (800c748 <tcp_enqueue_flags+0x1c4>)
 800c5c0:	f005 ffd2 	bl	8012568 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c5c4:	78fb      	ldrb	r3, [r7, #3]
 800c5c6:	f003 0302 	and.w	r3, r3, #2
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d001      	beq.n	800c5d2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c5d2:	7ffb      	ldrb	r3, [r7, #31]
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	f003 0304 	and.w	r3, r3, #4
 800c5dc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c5de:	7dfb      	ldrb	r3, [r7, #23]
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	2036      	movs	r0, #54	; 0x36
 800c5ea:	f7fa fa67 	bl	8006abc <pbuf_alloc>
 800c5ee:	6138      	str	r0, [r7, #16]
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d109      	bne.n	800c60a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	8b5b      	ldrh	r3, [r3, #26]
 800c5fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c604:	f04f 33ff 	mov.w	r3, #4294967295
 800c608:	e095      	b.n	800c736 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	895a      	ldrh	r2, [r3, #10]
 800c60e:	7dfb      	ldrb	r3, [r7, #23]
 800c610:	b29b      	uxth	r3, r3
 800c612:	429a      	cmp	r2, r3
 800c614:	d206      	bcs.n	800c624 <tcp_enqueue_flags+0xa0>
 800c616:	4b4a      	ldr	r3, [pc, #296]	; (800c740 <tcp_enqueue_flags+0x1bc>)
 800c618:	f240 423a 	movw	r2, #1082	; 0x43a
 800c61c:	494c      	ldr	r1, [pc, #304]	; (800c750 <tcp_enqueue_flags+0x1cc>)
 800c61e:	484a      	ldr	r0, [pc, #296]	; (800c748 <tcp_enqueue_flags+0x1c4>)
 800c620:	f005 ffa2 	bl	8012568 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800c628:	78fa      	ldrb	r2, [r7, #3]
 800c62a:	7ffb      	ldrb	r3, [r7, #31]
 800c62c:	9300      	str	r3, [sp, #0]
 800c62e:	460b      	mov	r3, r1
 800c630:	6939      	ldr	r1, [r7, #16]
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7ff f916 	bl	800b864 <tcp_create_segment>
 800c638:	60f8      	str	r0, [r7, #12]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d109      	bne.n	800c654 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	8b5b      	ldrh	r3, [r3, #26]
 800c644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c648:	b29a      	uxth	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c64e:	f04f 33ff 	mov.w	r3, #4294967295
 800c652:	e070      	b.n	800c736 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	68db      	ldr	r3, [r3, #12]
 800c658:	f003 0303 	and.w	r3, r3, #3
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d006      	beq.n	800c66e <tcp_enqueue_flags+0xea>
 800c660:	4b37      	ldr	r3, [pc, #220]	; (800c740 <tcp_enqueue_flags+0x1bc>)
 800c662:	f240 4242 	movw	r2, #1090	; 0x442
 800c666:	493b      	ldr	r1, [pc, #236]	; (800c754 <tcp_enqueue_flags+0x1d0>)
 800c668:	4837      	ldr	r0, [pc, #220]	; (800c748 <tcp_enqueue_flags+0x1c4>)
 800c66a:	f005 ff7d 	bl	8012568 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	891b      	ldrh	r3, [r3, #8]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d006      	beq.n	800c684 <tcp_enqueue_flags+0x100>
 800c676:	4b32      	ldr	r3, [pc, #200]	; (800c740 <tcp_enqueue_flags+0x1bc>)
 800c678:	f240 4243 	movw	r2, #1091	; 0x443
 800c67c:	4936      	ldr	r1, [pc, #216]	; (800c758 <tcp_enqueue_flags+0x1d4>)
 800c67e:	4832      	ldr	r0, [pc, #200]	; (800c748 <tcp_enqueue_flags+0x1c4>)
 800c680:	f005 ff72 	bl	8012568 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d103      	bne.n	800c694 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	66da      	str	r2, [r3, #108]	; 0x6c
 800c692:	e00d      	b.n	800c6b0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c698:	61bb      	str	r3, [r7, #24]
 800c69a:	e002      	b.n	800c6a2 <tcp_enqueue_flags+0x11e>
 800c69c:	69bb      	ldr	r3, [r7, #24]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	61bb      	str	r3, [r7, #24]
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d1f8      	bne.n	800c69c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c6b8:	78fb      	ldrb	r3, [r7, #3]
 800c6ba:	f003 0302 	and.w	r3, r3, #2
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d104      	bne.n	800c6cc <tcp_enqueue_flags+0x148>
 800c6c2:	78fb      	ldrb	r3, [r7, #3]
 800c6c4:	f003 0301 	and.w	r3, r3, #1
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d004      	beq.n	800c6d6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6d0:	1c5a      	adds	r2, r3, #1
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c6d6:	78fb      	ldrb	r3, [r7, #3]
 800c6d8:	f003 0301 	and.w	r3, r3, #1
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d006      	beq.n	800c6ee <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	8b5b      	ldrh	r3, [r3, #26]
 800c6e4:	f043 0320 	orr.w	r3, r3, #32
 800c6e8:	b29a      	uxth	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fa fd4a 	bl	800718c <pbuf_clen>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c702:	4413      	add	r3, r2
 800c704:	b29a      	uxth	r2, r3
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00e      	beq.n	800c734 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d10a      	bne.n	800c734 <tcp_enqueue_flags+0x1b0>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c722:	2b00      	cmp	r3, #0
 800c724:	d106      	bne.n	800c734 <tcp_enqueue_flags+0x1b0>
 800c726:	4b06      	ldr	r3, [pc, #24]	; (800c740 <tcp_enqueue_flags+0x1bc>)
 800c728:	f240 4266 	movw	r2, #1126	; 0x466
 800c72c:	490b      	ldr	r1, [pc, #44]	; (800c75c <tcp_enqueue_flags+0x1d8>)
 800c72e:	4806      	ldr	r0, [pc, #24]	; (800c748 <tcp_enqueue_flags+0x1c4>)
 800c730:	f005 ff1a 	bl	8012568 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c734:	2300      	movs	r3, #0
}
 800c736:	4618      	mov	r0, r3
 800c738:	3720      	adds	r7, #32
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	08014d24 	.word	0x08014d24
 800c744:	08015148 	.word	0x08015148
 800c748:	08014d78 	.word	0x08014d78
 800c74c:	080151a0 	.word	0x080151a0
 800c750:	080151c0 	.word	0x080151c0
 800c754:	080151fc 	.word	0x080151fc
 800c758:	08015214 	.word	0x08015214
 800c75c:	08015240 	.word	0x08015240

0800c760 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c760:	b5b0      	push	{r4, r5, r7, lr}
 800c762:	b08a      	sub	sp, #40	; 0x28
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d106      	bne.n	800c77c <tcp_output+0x1c>
 800c76e:	4ba0      	ldr	r3, [pc, #640]	; (800c9f0 <tcp_output+0x290>)
 800c770:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c774:	499f      	ldr	r1, [pc, #636]	; (800c9f4 <tcp_output+0x294>)
 800c776:	48a0      	ldr	r0, [pc, #640]	; (800c9f8 <tcp_output+0x298>)
 800c778:	f005 fef6 	bl	8012568 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	7d1b      	ldrb	r3, [r3, #20]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d106      	bne.n	800c792 <tcp_output+0x32>
 800c784:	4b9a      	ldr	r3, [pc, #616]	; (800c9f0 <tcp_output+0x290>)
 800c786:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800c78a:	499c      	ldr	r1, [pc, #624]	; (800c9fc <tcp_output+0x29c>)
 800c78c:	489a      	ldr	r0, [pc, #616]	; (800c9f8 <tcp_output+0x298>)
 800c78e:	f005 feeb 	bl	8012568 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c792:	4b9b      	ldr	r3, [pc, #620]	; (800ca00 <tcp_output+0x2a0>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	429a      	cmp	r2, r3
 800c79a:	d101      	bne.n	800c7a0 <tcp_output+0x40>
    return ERR_OK;
 800c79c:	2300      	movs	r3, #0
 800c79e:	e1d2      	b.n	800cb46 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d203      	bcs.n	800c7b8 <tcp_output+0x58>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c7b6:	e002      	b.n	800c7be <tcp_output+0x5e>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c7be:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7c4:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d10b      	bne.n	800c7e4 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	8b5b      	ldrh	r3, [r3, #26]
 800c7d0:	f003 0302 	and.w	r3, r3, #2
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f000 81a9 	beq.w	800cb2c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 fdd8 	bl	800d390 <tcp_send_empty_ack>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	e1b0      	b.n	800cb46 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c7e4:	6879      	ldr	r1, [r7, #4]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f7ff f81d 	bl	800b82c <tcp_route>
 800c7f2:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d102      	bne.n	800c800 <tcp_output+0xa0>
    return ERR_RTE;
 800c7fa:	f06f 0303 	mvn.w	r3, #3
 800c7fe:	e1a2      	b.n	800cb46 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d003      	beq.n	800c80e <tcp_output+0xae>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d111      	bne.n	800c832 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d002      	beq.n	800c81a <tcp_output+0xba>
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	3304      	adds	r3, #4
 800c818:	e000      	b.n	800c81c <tcp_output+0xbc>
 800c81a:	2300      	movs	r3, #0
 800c81c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d102      	bne.n	800c82a <tcp_output+0xca>
      return ERR_RTE;
 800c824:	f06f 0303 	mvn.w	r3, #3
 800c828:	e18d      	b.n	800cb46 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	4618      	mov	r0, r3
 800c83a:	f7f9 f95c 	bl	8005af6 <lwip_htonl>
 800c83e:	4602      	mov	r2, r0
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c848:	8912      	ldrh	r2, [r2, #8]
 800c84a:	4413      	add	r3, r2
 800c84c:	69ba      	ldr	r2, [r7, #24]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d227      	bcs.n	800c8a2 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c858:	461a      	mov	r2, r3
 800c85a:	69bb      	ldr	r3, [r7, #24]
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d114      	bne.n	800c88a <tcp_output+0x12a>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c864:	2b00      	cmp	r3, #0
 800c866:	d110      	bne.n	800c88a <tcp_output+0x12a>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d10b      	bne.n	800c88a <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2201      	movs	r2, #1
 800c87e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	8b5b      	ldrh	r3, [r3, #26]
 800c88e:	f003 0302 	and.w	r3, r3, #2
 800c892:	2b00      	cmp	r3, #0
 800c894:	f000 814c 	beq.w	800cb30 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f000 fd79 	bl	800d390 <tcp_send_empty_ack>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	e151      	b.n	800cb46 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8ae:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c8b0:	6a3b      	ldr	r3, [r7, #32]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	f000 811b 	beq.w	800caee <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800c8b8:	e002      	b.n	800c8c0 <tcp_output+0x160>
 800c8ba:	6a3b      	ldr	r3, [r7, #32]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	623b      	str	r3, [r7, #32]
 800c8c0:	6a3b      	ldr	r3, [r7, #32]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d1f8      	bne.n	800c8ba <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c8c8:	e111      	b.n	800caee <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	899b      	ldrh	r3, [r3, #12]
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7f9 f8fa 	bl	8005acc <lwip_htons>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	f003 0304 	and.w	r3, r3, #4
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d006      	beq.n	800c8f2 <tcp_output+0x192>
 800c8e4:	4b42      	ldr	r3, [pc, #264]	; (800c9f0 <tcp_output+0x290>)
 800c8e6:	f240 5237 	movw	r2, #1335	; 0x537
 800c8ea:	4946      	ldr	r1, [pc, #280]	; (800ca04 <tcp_output+0x2a4>)
 800c8ec:	4842      	ldr	r0, [pc, #264]	; (800c9f8 <tcp_output+0x298>)
 800c8ee:	f005 fe3b 	bl	8012568 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d01f      	beq.n	800c93a <tcp_output+0x1da>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	8b5b      	ldrh	r3, [r3, #26]
 800c8fe:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c902:	2b00      	cmp	r3, #0
 800c904:	d119      	bne.n	800c93a <tcp_output+0x1da>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00b      	beq.n	800c926 <tcp_output+0x1c6>
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d110      	bne.n	800c93a <tcp_output+0x1da>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c91c:	891a      	ldrh	r2, [r3, #8]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c922:	429a      	cmp	r2, r3
 800c924:	d209      	bcs.n	800c93a <tcp_output+0x1da>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d004      	beq.n	800c93a <tcp_output+0x1da>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c936:	2b08      	cmp	r3, #8
 800c938:	d901      	bls.n	800c93e <tcp_output+0x1de>
 800c93a:	2301      	movs	r3, #1
 800c93c:	e000      	b.n	800c940 <tcp_output+0x1e0>
 800c93e:	2300      	movs	r3, #0
 800c940:	2b00      	cmp	r3, #0
 800c942:	d106      	bne.n	800c952 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	8b5b      	ldrh	r3, [r3, #26]
 800c948:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	f000 80e3 	beq.w	800cb18 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	7d1b      	ldrb	r3, [r3, #20]
 800c956:	2b02      	cmp	r3, #2
 800c958:	d00d      	beq.n	800c976 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95c:	68db      	ldr	r3, [r3, #12]
 800c95e:	899b      	ldrh	r3, [r3, #12]
 800c960:	b29c      	uxth	r4, r3
 800c962:	2010      	movs	r0, #16
 800c964:	f7f9 f8b2 	bl	8005acc <lwip_htons>
 800c968:	4603      	mov	r3, r0
 800c96a:	461a      	mov	r2, r3
 800c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	4322      	orrs	r2, r4
 800c972:	b292      	uxth	r2, r2
 800c974:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c976:	697a      	ldr	r2, [r7, #20]
 800c978:	6879      	ldr	r1, [r7, #4]
 800c97a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c97c:	f000 f908 	bl	800cb90 <tcp_output_segment>
 800c980:	4603      	mov	r3, r0
 800c982:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d009      	beq.n	800c9a0 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	8b5b      	ldrh	r3, [r3, #26]
 800c990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c994:	b29a      	uxth	r2, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	835a      	strh	r2, [r3, #26]
      return err;
 800c99a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c99e:	e0d2      	b.n	800cb46 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	7d1b      	ldrb	r3, [r3, #20]
 800c9ac:	2b02      	cmp	r3, #2
 800c9ae:	d006      	beq.n	800c9be <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	8b5b      	ldrh	r3, [r3, #26]
 800c9b4:	f023 0303 	bic.w	r3, r3, #3
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7f9 f896 	bl	8005af6 <lwip_htonl>
 800c9ca:	4604      	mov	r4, r0
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	891b      	ldrh	r3, [r3, #8]
 800c9d0:	461d      	mov	r5, r3
 800c9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	899b      	ldrh	r3, [r3, #12]
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7f9 f876 	bl	8005acc <lwip_htons>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	f003 0303 	and.w	r3, r3, #3
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d00d      	beq.n	800ca08 <tcp_output+0x2a8>
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e00c      	b.n	800ca0a <tcp_output+0x2aa>
 800c9f0:	08014d24 	.word	0x08014d24
 800c9f4:	08015268 	.word	0x08015268
 800c9f8:	08014d78 	.word	0x08014d78
 800c9fc:	08015280 	.word	0x08015280
 800ca00:	2000719c 	.word	0x2000719c
 800ca04:	080152a8 	.word	0x080152a8
 800ca08:	2300      	movs	r3, #0
 800ca0a:	442b      	add	r3, r5
 800ca0c:	4423      	add	r3, r4
 800ca0e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	1ad3      	subs	r3, r2, r3
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	da02      	bge.n	800ca22 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	68ba      	ldr	r2, [r7, #8]
 800ca20:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800ca22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca24:	891b      	ldrh	r3, [r3, #8]
 800ca26:	461c      	mov	r4, r3
 800ca28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2a:	68db      	ldr	r3, [r3, #12]
 800ca2c:	899b      	ldrh	r3, [r3, #12]
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7f9 f84b 	bl	8005acc <lwip_htons>
 800ca36:	4603      	mov	r3, r0
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	f003 0303 	and.w	r3, r3, #3
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d001      	beq.n	800ca46 <tcp_output+0x2e6>
 800ca42:	2301      	movs	r3, #1
 800ca44:	e000      	b.n	800ca48 <tcp_output+0x2e8>
 800ca46:	2300      	movs	r3, #0
 800ca48:	4423      	add	r3, r4
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d049      	beq.n	800cae2 <tcp_output+0x382>
      seg->next = NULL;
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca50:	2200      	movs	r2, #0
 800ca52:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d105      	bne.n	800ca68 <tcp_output+0x308>
        pcb->unacked = seg;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca60:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ca62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca64:	623b      	str	r3, [r7, #32]
 800ca66:	e03f      	b.n	800cae8 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ca68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7f9 f841 	bl	8005af6 <lwip_htonl>
 800ca74:	4604      	mov	r4, r0
 800ca76:	6a3b      	ldr	r3, [r7, #32]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f7f9 f83a 	bl	8005af6 <lwip_htonl>
 800ca82:	4603      	mov	r3, r0
 800ca84:	1ae3      	subs	r3, r4, r3
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	da24      	bge.n	800cad4 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	3370      	adds	r3, #112	; 0x70
 800ca8e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ca90:	e002      	b.n	800ca98 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ca92:	69fb      	ldr	r3, [r7, #28]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d011      	beq.n	800cac4 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7f9 f824 	bl	8005af6 <lwip_htonl>
 800caae:	4604      	mov	r4, r0
 800cab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7f9 f81d 	bl	8005af6 <lwip_htonl>
 800cabc:	4603      	mov	r3, r0
 800cabe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	dbe6      	blt.n	800ca92 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caca:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800cacc:	69fb      	ldr	r3, [r7, #28]
 800cace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cad0:	601a      	str	r2, [r3, #0]
 800cad2:	e009      	b.n	800cae8 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800cad4:	6a3b      	ldr	r3, [r7, #32]
 800cad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cad8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800cada:	6a3b      	ldr	r3, [r7, #32]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	623b      	str	r3, [r7, #32]
 800cae0:	e002      	b.n	800cae8 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800cae2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cae4:	f7fb fefc 	bl	80088e0 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caec:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800caee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d012      	beq.n	800cb1a <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800caf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7f8 fffb 	bl	8005af6 <lwip_htonl>
 800cb00:	4602      	mov	r2, r0
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb06:	1ad3      	subs	r3, r2, r3
 800cb08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb0a:	8912      	ldrh	r2, [r2, #8]
 800cb0c:	4413      	add	r3, r2
  while (seg != NULL &&
 800cb0e:	69ba      	ldr	r2, [r7, #24]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	f4bf aeda 	bcs.w	800c8ca <tcp_output+0x16a>
 800cb16:	e000      	b.n	800cb1a <tcp_output+0x3ba>
      break;
 800cb18:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d108      	bne.n	800cb34 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800cb2a:	e004      	b.n	800cb36 <tcp_output+0x3d6>
    goto output_done;
 800cb2c:	bf00      	nop
 800cb2e:	e002      	b.n	800cb36 <tcp_output+0x3d6>
    goto output_done;
 800cb30:	bf00      	nop
 800cb32:	e000      	b.n	800cb36 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800cb34:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	8b5b      	ldrh	r3, [r3, #26]
 800cb3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb3e:	b29a      	uxth	r2, r3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800cb44:	2300      	movs	r3, #0
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3728      	adds	r7, #40	; 0x28
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bdb0      	pop	{r4, r5, r7, pc}
 800cb4e:	bf00      	nop

0800cb50 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d106      	bne.n	800cb6c <tcp_output_segment_busy+0x1c>
 800cb5e:	4b09      	ldr	r3, [pc, #36]	; (800cb84 <tcp_output_segment_busy+0x34>)
 800cb60:	f240 529a 	movw	r2, #1434	; 0x59a
 800cb64:	4908      	ldr	r1, [pc, #32]	; (800cb88 <tcp_output_segment_busy+0x38>)
 800cb66:	4809      	ldr	r0, [pc, #36]	; (800cb8c <tcp_output_segment_busy+0x3c>)
 800cb68:	f005 fcfe 	bl	8012568 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	7b9b      	ldrb	r3, [r3, #14]
 800cb72:	2b01      	cmp	r3, #1
 800cb74:	d001      	beq.n	800cb7a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800cb76:	2301      	movs	r3, #1
 800cb78:	e000      	b.n	800cb7c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	08014d24 	.word	0x08014d24
 800cb88:	080152c0 	.word	0x080152c0
 800cb8c:	08014d78 	.word	0x08014d78

0800cb90 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800cb90:	b5b0      	push	{r4, r5, r7, lr}
 800cb92:	b08c      	sub	sp, #48	; 0x30
 800cb94:	af04      	add	r7, sp, #16
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d106      	bne.n	800cbb0 <tcp_output_segment+0x20>
 800cba2:	4b64      	ldr	r3, [pc, #400]	; (800cd34 <tcp_output_segment+0x1a4>)
 800cba4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800cba8:	4963      	ldr	r1, [pc, #396]	; (800cd38 <tcp_output_segment+0x1a8>)
 800cbaa:	4864      	ldr	r0, [pc, #400]	; (800cd3c <tcp_output_segment+0x1ac>)
 800cbac:	f005 fcdc 	bl	8012568 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d106      	bne.n	800cbc4 <tcp_output_segment+0x34>
 800cbb6:	4b5f      	ldr	r3, [pc, #380]	; (800cd34 <tcp_output_segment+0x1a4>)
 800cbb8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800cbbc:	4960      	ldr	r1, [pc, #384]	; (800cd40 <tcp_output_segment+0x1b0>)
 800cbbe:	485f      	ldr	r0, [pc, #380]	; (800cd3c <tcp_output_segment+0x1ac>)
 800cbc0:	f005 fcd2 	bl	8012568 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d106      	bne.n	800cbd8 <tcp_output_segment+0x48>
 800cbca:	4b5a      	ldr	r3, [pc, #360]	; (800cd34 <tcp_output_segment+0x1a4>)
 800cbcc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800cbd0:	495c      	ldr	r1, [pc, #368]	; (800cd44 <tcp_output_segment+0x1b4>)
 800cbd2:	485a      	ldr	r0, [pc, #360]	; (800cd3c <tcp_output_segment+0x1ac>)
 800cbd4:	f005 fcc8 	bl	8012568 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	f7ff ffb9 	bl	800cb50 <tcp_output_segment_busy>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d001      	beq.n	800cbe8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	e0a0      	b.n	800cd2a <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	68dc      	ldr	r4, [r3, #12]
 800cbf0:	4610      	mov	r0, r2
 800cbf2:	f7f8 ff80 	bl	8005af6 <lwip_htonl>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	68dc      	ldr	r4, [r3, #12]
 800cc02:	4610      	mov	r0, r2
 800cc04:	f7f8 ff62 	bl	8005acc <lwip_htons>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc10:	68ba      	ldr	r2, [r7, #8]
 800cc12:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cc14:	441a      	add	r2, r3
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	3314      	adds	r3, #20
 800cc20:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	7a9b      	ldrb	r3, [r3, #10]
 800cc26:	f003 0301 	and.w	r3, r3, #1
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d015      	beq.n	800cc5a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	3304      	adds	r3, #4
 800cc32:	461a      	mov	r2, r3
 800cc34:	6879      	ldr	r1, [r7, #4]
 800cc36:	f44f 7006 	mov.w	r0, #536	; 0x218
 800cc3a:	f7fc fa33 	bl	80090a4 <tcp_eff_send_mss_netif>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800cc42:	8b7b      	ldrh	r3, [r7, #26]
 800cc44:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7f8 ff54 	bl	8005af6 <lwip_htonl>
 800cc4e:	4602      	mov	r2, r0
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	601a      	str	r2, [r3, #0]
    opts += 1;
 800cc54:	69fb      	ldr	r3, [r7, #28]
 800cc56:	3304      	adds	r3, #4
 800cc58:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	da02      	bge.n	800cc6a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	2200      	movs	r2, #0
 800cc68:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d10c      	bne.n	800cc8c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800cc72:	4b35      	ldr	r3, [pc, #212]	; (800cd48 <tcp_output_segment+0x1b8>)
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	685b      	ldr	r3, [r3, #4]
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7f8 ff38 	bl	8005af6 <lwip_htonl>
 800cc86:	4602      	mov	r2, r0
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	461a      	mov	r2, r3
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	8959      	ldrh	r1, [r3, #10]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	8b3a      	ldrh	r2, [r7, #24]
 800cca8:	1a8a      	subs	r2, r1, r2
 800ccaa:	b292      	uxth	r2, r2
 800ccac:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	8919      	ldrh	r1, [r3, #8]
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	8b3a      	ldrh	r2, [r7, #24]
 800ccba:	1a8a      	subs	r2, r1, r2
 800ccbc:	b292      	uxth	r2, r2
 800ccbe:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	68d2      	ldr	r2, [r2, #12]
 800ccc8:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	741a      	strb	r2, [r3, #16]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	f103 0214 	add.w	r2, r3, #20
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	7a9b      	ldrb	r3, [r3, #10]
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	f003 0304 	and.w	r3, r3, #4
 800cce8:	4413      	add	r3, r2
 800ccea:	69fa      	ldr	r2, [r7, #28]
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d006      	beq.n	800ccfe <tcp_output_segment+0x16e>
 800ccf0:	4b10      	ldr	r3, [pc, #64]	; (800cd34 <tcp_output_segment+0x1a4>)
 800ccf2:	f240 621c 	movw	r2, #1564	; 0x61c
 800ccf6:	4915      	ldr	r1, [pc, #84]	; (800cd4c <tcp_output_segment+0x1bc>)
 800ccf8:	4810      	ldr	r0, [pc, #64]	; (800cd3c <tcp_output_segment+0x1ac>)
 800ccfa:	f005 fc35 	bl	8012568 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6858      	ldr	r0, [r3, #4]
 800cd02:	68b9      	ldr	r1, [r7, #8]
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	1d1c      	adds	r4, r3, #4
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	7add      	ldrb	r5, [r3, #11]
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	7a9b      	ldrb	r3, [r3, #10]
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	9202      	str	r2, [sp, #8]
 800cd14:	2206      	movs	r2, #6
 800cd16:	9201      	str	r2, [sp, #4]
 800cd18:	9300      	str	r3, [sp, #0]
 800cd1a:	462b      	mov	r3, r5
 800cd1c:	4622      	mov	r2, r4
 800cd1e:	f004 fbb9 	bl	8011494 <ip4_output_if>
 800cd22:	4603      	mov	r3, r0
 800cd24:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800cd26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3720      	adds	r7, #32
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bdb0      	pop	{r4, r5, r7, pc}
 800cd32:	bf00      	nop
 800cd34:	08014d24 	.word	0x08014d24
 800cd38:	080152e8 	.word	0x080152e8
 800cd3c:	08014d78 	.word	0x08014d78
 800cd40:	08015308 	.word	0x08015308
 800cd44:	08015328 	.word	0x08015328
 800cd48:	2000718c 	.word	0x2000718c
 800cd4c:	0801534c 	.word	0x0801534c

0800cd50 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800cd50:	b5b0      	push	{r4, r5, r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d106      	bne.n	800cd6c <tcp_rexmit_rto_prepare+0x1c>
 800cd5e:	4b31      	ldr	r3, [pc, #196]	; (800ce24 <tcp_rexmit_rto_prepare+0xd4>)
 800cd60:	f240 6263 	movw	r2, #1635	; 0x663
 800cd64:	4930      	ldr	r1, [pc, #192]	; (800ce28 <tcp_rexmit_rto_prepare+0xd8>)
 800cd66:	4831      	ldr	r0, [pc, #196]	; (800ce2c <tcp_rexmit_rto_prepare+0xdc>)
 800cd68:	f005 fbfe 	bl	8012568 <iprintf>

  if (pcb->unacked == NULL) {
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d102      	bne.n	800cd7a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800cd74:	f06f 0305 	mvn.w	r3, #5
 800cd78:	e050      	b.n	800ce1c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd7e:	60fb      	str	r3, [r7, #12]
 800cd80:	e00b      	b.n	800cd9a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f7ff fee4 	bl	800cb50 <tcp_output_segment_busy>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d002      	beq.n	800cd94 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800cd8e:	f06f 0305 	mvn.w	r3, #5
 800cd92:	e043      	b.n	800ce1c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	60fb      	str	r3, [r7, #12]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1ef      	bne.n	800cd82 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f7ff fed4 	bl	800cb50 <tcp_output_segment_busy>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d002      	beq.n	800cdb4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800cdae:	f06f 0305 	mvn.w	r3, #5
 800cdb2:	e033      	b.n	800ce1c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	8b5b      	ldrh	r3, [r3, #26]
 800cdce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800cdd2:	b29a      	uxth	r2, r3
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7f8 fe89 	bl	8005af6 <lwip_htonl>
 800cde4:	4604      	mov	r4, r0
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	891b      	ldrh	r3, [r3, #8]
 800cdea:	461d      	mov	r5, r3
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	899b      	ldrh	r3, [r3, #12]
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7f8 fe69 	bl	8005acc <lwip_htons>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	b2db      	uxtb	r3, r3
 800cdfe:	f003 0303 	and.w	r3, r3, #3
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d001      	beq.n	800ce0a <tcp_rexmit_rto_prepare+0xba>
 800ce06:	2301      	movs	r3, #1
 800ce08:	e000      	b.n	800ce0c <tcp_rexmit_rto_prepare+0xbc>
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	442b      	add	r3, r5
 800ce0e:	18e2      	adds	r2, r4, r3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2200      	movs	r2, #0
 800ce18:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800ce1a:	2300      	movs	r3, #0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3710      	adds	r7, #16
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bdb0      	pop	{r4, r5, r7, pc}
 800ce24:	08014d24 	.word	0x08014d24
 800ce28:	08015360 	.word	0x08015360
 800ce2c:	08014d78 	.word	0x08014d78

0800ce30 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d106      	bne.n	800ce4c <tcp_rexmit_rto_commit+0x1c>
 800ce3e:	4b0d      	ldr	r3, [pc, #52]	; (800ce74 <tcp_rexmit_rto_commit+0x44>)
 800ce40:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ce44:	490c      	ldr	r1, [pc, #48]	; (800ce78 <tcp_rexmit_rto_commit+0x48>)
 800ce46:	480d      	ldr	r0, [pc, #52]	; (800ce7c <tcp_rexmit_rto_commit+0x4c>)
 800ce48:	f005 fb8e 	bl	8012568 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce52:	2bff      	cmp	r3, #255	; 0xff
 800ce54:	d007      	beq.n	800ce66 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	b2da      	uxtb	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f7ff fc7a 	bl	800c760 <tcp_output>
}
 800ce6c:	bf00      	nop
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	08014d24 	.word	0x08014d24
 800ce78:	08015384 	.word	0x08015384
 800ce7c:	08014d78 	.word	0x08014d78

0800ce80 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b082      	sub	sp, #8
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d106      	bne.n	800ce9c <tcp_rexmit_rto+0x1c>
 800ce8e:	4b0a      	ldr	r3, [pc, #40]	; (800ceb8 <tcp_rexmit_rto+0x38>)
 800ce90:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ce94:	4909      	ldr	r1, [pc, #36]	; (800cebc <tcp_rexmit_rto+0x3c>)
 800ce96:	480a      	ldr	r0, [pc, #40]	; (800cec0 <tcp_rexmit_rto+0x40>)
 800ce98:	f005 fb66 	bl	8012568 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f7ff ff57 	bl	800cd50 <tcp_rexmit_rto_prepare>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d102      	bne.n	800ceae <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f7ff ffc1 	bl	800ce30 <tcp_rexmit_rto_commit>
  }
}
 800ceae:	bf00      	nop
 800ceb0:	3708      	adds	r7, #8
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	08014d24 	.word	0x08014d24
 800cebc:	080153a8 	.word	0x080153a8
 800cec0:	08014d78 	.word	0x08014d78

0800cec4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cec4:	b590      	push	{r4, r7, lr}
 800cec6:	b085      	sub	sp, #20
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d106      	bne.n	800cee0 <tcp_rexmit+0x1c>
 800ced2:	4b2f      	ldr	r3, [pc, #188]	; (800cf90 <tcp_rexmit+0xcc>)
 800ced4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800ced8:	492e      	ldr	r1, [pc, #184]	; (800cf94 <tcp_rexmit+0xd0>)
 800ceda:	482f      	ldr	r0, [pc, #188]	; (800cf98 <tcp_rexmit+0xd4>)
 800cedc:	f005 fb44 	bl	8012568 <iprintf>

  if (pcb->unacked == NULL) {
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d102      	bne.n	800ceee <tcp_rexmit+0x2a>
    return ERR_VAL;
 800cee8:	f06f 0305 	mvn.w	r3, #5
 800ceec:	e04c      	b.n	800cf88 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cef2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800cef4:	68b8      	ldr	r0, [r7, #8]
 800cef6:	f7ff fe2b 	bl	800cb50 <tcp_output_segment_busy>
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d002      	beq.n	800cf06 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cf00:	f06f 0305 	mvn.w	r3, #5
 800cf04:	e040      	b.n	800cf88 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	336c      	adds	r3, #108	; 0x6c
 800cf12:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cf14:	e002      	b.n	800cf1c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d011      	beq.n	800cf48 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7f8 fde2 	bl	8005af6 <lwip_htonl>
 800cf32:	4604      	mov	r4, r0
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7f8 fddb 	bl	8005af6 <lwip_htonl>
 800cf40:	4603      	mov	r3, r0
 800cf42:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	dbe6      	blt.n	800cf16 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	68ba      	ldr	r2, [r7, #8]
 800cf54:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d103      	bne.n	800cf66 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2200      	movs	r2, #0
 800cf62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf6c:	2bff      	cmp	r3, #255	; 0xff
 800cf6e:	d007      	beq.n	800cf80 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cf76:	3301      	adds	r3, #1
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2200      	movs	r2, #0
 800cf84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3714      	adds	r7, #20
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd90      	pop	{r4, r7, pc}
 800cf90:	08014d24 	.word	0x08014d24
 800cf94:	080153c4 	.word	0x080153c4
 800cf98:	08014d78 	.word	0x08014d78

0800cf9c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d106      	bne.n	800cfb8 <tcp_rexmit_fast+0x1c>
 800cfaa:	4b2f      	ldr	r3, [pc, #188]	; (800d068 <tcp_rexmit_fast+0xcc>)
 800cfac:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800cfb0:	492e      	ldr	r1, [pc, #184]	; (800d06c <tcp_rexmit_fast+0xd0>)
 800cfb2:	482f      	ldr	r0, [pc, #188]	; (800d070 <tcp_rexmit_fast+0xd4>)
 800cfb4:	f005 fad8 	bl	8012568 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d04f      	beq.n	800d060 <tcp_rexmit_fast+0xc4>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	8b5b      	ldrh	r3, [r3, #26]
 800cfc4:	f003 0304 	and.w	r3, r3, #4
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d149      	bne.n	800d060 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f7ff ff79 	bl	800cec4 <tcp_rexmit>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d143      	bne.n	800d060 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d208      	bcs.n	800cffa <tcp_rexmit_fast+0x5e>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	da00      	bge.n	800cff4 <tcp_rexmit_fast+0x58>
 800cff2:	3301      	adds	r3, #1
 800cff4:	105b      	asrs	r3, r3, #1
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	e007      	b.n	800d00a <tcp_rexmit_fast+0x6e>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d000:	2b00      	cmp	r3, #0
 800d002:	da00      	bge.n	800d006 <tcp_rexmit_fast+0x6a>
 800d004:	3301      	adds	r3, #1
 800d006:	105b      	asrs	r3, r3, #1
 800d008:	b29b      	uxth	r3, r3
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d016:	461a      	mov	r2, r3
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d01c:	005b      	lsls	r3, r3, #1
 800d01e:	429a      	cmp	r2, r3
 800d020:	d206      	bcs.n	800d030 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d026:	005b      	lsls	r3, r3, #1
 800d028:	b29a      	uxth	r2, r3
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d03a:	4619      	mov	r1, r3
 800d03c:	0049      	lsls	r1, r1, #1
 800d03e:	440b      	add	r3, r1
 800d040:	b29b      	uxth	r3, r3
 800d042:	4413      	add	r3, r2
 800d044:	b29a      	uxth	r2, r3
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	8b5b      	ldrh	r3, [r3, #26]
 800d050:	f043 0304 	orr.w	r3, r3, #4
 800d054:	b29a      	uxth	r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800d060:	bf00      	nop
 800d062:	3708      	adds	r7, #8
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}
 800d068:	08014d24 	.word	0x08014d24
 800d06c:	080153dc 	.word	0x080153dc
 800d070:	08014d78 	.word	0x08014d78

0800d074 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b086      	sub	sp, #24
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	607b      	str	r3, [r7, #4]
 800d07e:	460b      	mov	r3, r1
 800d080:	817b      	strh	r3, [r7, #10]
 800d082:	4613      	mov	r3, r2
 800d084:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d086:	897a      	ldrh	r2, [r7, #10]
 800d088:	893b      	ldrh	r3, [r7, #8]
 800d08a:	4413      	add	r3, r2
 800d08c:	b29b      	uxth	r3, r3
 800d08e:	3314      	adds	r3, #20
 800d090:	b29b      	uxth	r3, r3
 800d092:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d096:	4619      	mov	r1, r3
 800d098:	2022      	movs	r0, #34	; 0x22
 800d09a:	f7f9 fd0f 	bl	8006abc <pbuf_alloc>
 800d09e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d04e      	beq.n	800d144 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	895b      	ldrh	r3, [r3, #10]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	897b      	ldrh	r3, [r7, #10]
 800d0ae:	3314      	adds	r3, #20
 800d0b0:	429a      	cmp	r2, r3
 800d0b2:	da06      	bge.n	800d0c2 <tcp_output_alloc_header_common+0x4e>
 800d0b4:	4b26      	ldr	r3, [pc, #152]	; (800d150 <tcp_output_alloc_header_common+0xdc>)
 800d0b6:	f240 7224 	movw	r2, #1828	; 0x724
 800d0ba:	4926      	ldr	r1, [pc, #152]	; (800d154 <tcp_output_alloc_header_common+0xe0>)
 800d0bc:	4826      	ldr	r0, [pc, #152]	; (800d158 <tcp_output_alloc_header_common+0xe4>)
 800d0be:	f005 fa53 	bl	8012568 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800d0c8:	8c3b      	ldrh	r3, [r7, #32]
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7f8 fcfe 	bl	8005acc <lwip_htons>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800d0d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7f8 fcf6 	bl	8005acc <lwip_htons>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800d0ee:	68f8      	ldr	r0, [r7, #12]
 800d0f0:	f7f8 fd01 	bl	8005af6 <lwip_htonl>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800d0fa:	897b      	ldrh	r3, [r7, #10]
 800d0fc:	089b      	lsrs	r3, r3, #2
 800d0fe:	b29b      	uxth	r3, r3
 800d100:	3305      	adds	r3, #5
 800d102:	b29b      	uxth	r3, r3
 800d104:	031b      	lsls	r3, r3, #12
 800d106:	b29a      	uxth	r2, r3
 800d108:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	4313      	orrs	r3, r2
 800d110:	b29b      	uxth	r3, r3
 800d112:	4618      	mov	r0, r3
 800d114:	f7f8 fcda 	bl	8005acc <lwip_htons>
 800d118:	4603      	mov	r3, r0
 800d11a:	461a      	mov	r2, r3
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800d120:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d122:	4618      	mov	r0, r3
 800d124:	f7f8 fcd2 	bl	8005acc <lwip_htons>
 800d128:	4603      	mov	r3, r0
 800d12a:	461a      	mov	r2, r3
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	2200      	movs	r2, #0
 800d134:	741a      	strb	r2, [r3, #16]
 800d136:	2200      	movs	r2, #0
 800d138:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	2200      	movs	r2, #0
 800d13e:	749a      	strb	r2, [r3, #18]
 800d140:	2200      	movs	r2, #0
 800d142:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800d144:	697b      	ldr	r3, [r7, #20]
}
 800d146:	4618      	mov	r0, r3
 800d148:	3718      	adds	r7, #24
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	08014d24 	.word	0x08014d24
 800d154:	080153fc 	.word	0x080153fc
 800d158:	08014d78 	.word	0x08014d78

0800d15c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800d15c:	b5b0      	push	{r4, r5, r7, lr}
 800d15e:	b08a      	sub	sp, #40	; 0x28
 800d160:	af04      	add	r7, sp, #16
 800d162:	60f8      	str	r0, [r7, #12]
 800d164:	607b      	str	r3, [r7, #4]
 800d166:	460b      	mov	r3, r1
 800d168:	817b      	strh	r3, [r7, #10]
 800d16a:	4613      	mov	r3, r2
 800d16c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d106      	bne.n	800d182 <tcp_output_alloc_header+0x26>
 800d174:	4b15      	ldr	r3, [pc, #84]	; (800d1cc <tcp_output_alloc_header+0x70>)
 800d176:	f240 7242 	movw	r2, #1858	; 0x742
 800d17a:	4915      	ldr	r1, [pc, #84]	; (800d1d0 <tcp_output_alloc_header+0x74>)
 800d17c:	4815      	ldr	r0, [pc, #84]	; (800d1d4 <tcp_output_alloc_header+0x78>)
 800d17e:	f005 f9f3 	bl	8012568 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	8adb      	ldrh	r3, [r3, #22]
 800d18a:	68fa      	ldr	r2, [r7, #12]
 800d18c:	8b12      	ldrh	r2, [r2, #24]
 800d18e:	68f9      	ldr	r1, [r7, #12]
 800d190:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800d192:	893d      	ldrh	r5, [r7, #8]
 800d194:	897c      	ldrh	r4, [r7, #10]
 800d196:	9103      	str	r1, [sp, #12]
 800d198:	2110      	movs	r1, #16
 800d19a:	9102      	str	r1, [sp, #8]
 800d19c:	9201      	str	r2, [sp, #4]
 800d19e:	9300      	str	r3, [sp, #0]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	462a      	mov	r2, r5
 800d1a4:	4621      	mov	r1, r4
 800d1a6:	f7ff ff65 	bl	800d074 <tcp_output_alloc_header_common>
 800d1aa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d006      	beq.n	800d1c0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1b6:	68fa      	ldr	r2, [r7, #12]
 800d1b8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800d1ba:	441a      	add	r2, r3
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800d1c0:	697b      	ldr	r3, [r7, #20]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3718      	adds	r7, #24
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bdb0      	pop	{r4, r5, r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	08014d24 	.word	0x08014d24
 800d1d0:	0801542c 	.word	0x0801542c
 800d1d4:	08014d78 	.word	0x08014d78

0800d1d8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b088      	sub	sp, #32
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	4611      	mov	r1, r2
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	71fb      	strb	r3, [r7, #7]
 800d1ea:	4613      	mov	r3, r2
 800d1ec:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d106      	bne.n	800d206 <tcp_output_fill_options+0x2e>
 800d1f8:	4b13      	ldr	r3, [pc, #76]	; (800d248 <tcp_output_fill_options+0x70>)
 800d1fa:	f240 7256 	movw	r2, #1878	; 0x756
 800d1fe:	4913      	ldr	r1, [pc, #76]	; (800d24c <tcp_output_fill_options+0x74>)
 800d200:	4813      	ldr	r0, [pc, #76]	; (800d250 <tcp_output_fill_options+0x78>)
 800d202:	f005 f9b1 	bl	8012568 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	3314      	adds	r3, #20
 800d210:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800d212:	69bb      	ldr	r3, [r7, #24]
 800d214:	f103 0214 	add.w	r2, r3, #20
 800d218:	8bfb      	ldrh	r3, [r7, #30]
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	4619      	mov	r1, r3
 800d21e:	79fb      	ldrb	r3, [r7, #7]
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	f003 0304 	and.w	r3, r3, #4
 800d226:	440b      	add	r3, r1
 800d228:	4413      	add	r3, r2
 800d22a:	697a      	ldr	r2, [r7, #20]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d006      	beq.n	800d23e <tcp_output_fill_options+0x66>
 800d230:	4b05      	ldr	r3, [pc, #20]	; (800d248 <tcp_output_fill_options+0x70>)
 800d232:	f240 7275 	movw	r2, #1909	; 0x775
 800d236:	4907      	ldr	r1, [pc, #28]	; (800d254 <tcp_output_fill_options+0x7c>)
 800d238:	4805      	ldr	r0, [pc, #20]	; (800d250 <tcp_output_fill_options+0x78>)
 800d23a:	f005 f995 	bl	8012568 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800d23e:	bf00      	nop
 800d240:	3720      	adds	r7, #32
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	08014d24 	.word	0x08014d24
 800d24c:	08015454 	.word	0x08015454
 800d250:	08014d78 	.word	0x08014d78
 800d254:	0801534c 	.word	0x0801534c

0800d258 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b08a      	sub	sp, #40	; 0x28
 800d25c:	af04      	add	r7, sp, #16
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	60b9      	str	r1, [r7, #8]
 800d262:	607a      	str	r2, [r7, #4]
 800d264:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d106      	bne.n	800d27a <tcp_output_control_segment+0x22>
 800d26c:	4b1c      	ldr	r3, [pc, #112]	; (800d2e0 <tcp_output_control_segment+0x88>)
 800d26e:	f240 7287 	movw	r2, #1927	; 0x787
 800d272:	491c      	ldr	r1, [pc, #112]	; (800d2e4 <tcp_output_control_segment+0x8c>)
 800d274:	481c      	ldr	r0, [pc, #112]	; (800d2e8 <tcp_output_control_segment+0x90>)
 800d276:	f005 f977 	bl	8012568 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800d27a:	683a      	ldr	r2, [r7, #0]
 800d27c:	6879      	ldr	r1, [r7, #4]
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f7fe fad4 	bl	800b82c <tcp_route>
 800d284:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d102      	bne.n	800d292 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800d28c:	23fc      	movs	r3, #252	; 0xfc
 800d28e:	75fb      	strb	r3, [r7, #23]
 800d290:	e01c      	b.n	800d2cc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d006      	beq.n	800d2a6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	7adb      	ldrb	r3, [r3, #11]
 800d29c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	7a9b      	ldrb	r3, [r3, #10]
 800d2a2:	757b      	strb	r3, [r7, #21]
 800d2a4:	e003      	b.n	800d2ae <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800d2a6:	23ff      	movs	r3, #255	; 0xff
 800d2a8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800d2ae:	7dba      	ldrb	r2, [r7, #22]
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	9302      	str	r3, [sp, #8]
 800d2b4:	2306      	movs	r3, #6
 800d2b6:	9301      	str	r3, [sp, #4]
 800d2b8:	7d7b      	ldrb	r3, [r7, #21]
 800d2ba:	9300      	str	r3, [sp, #0]
 800d2bc:	4613      	mov	r3, r2
 800d2be:	683a      	ldr	r2, [r7, #0]
 800d2c0:	6879      	ldr	r1, [r7, #4]
 800d2c2:	68b8      	ldr	r0, [r7, #8]
 800d2c4:	f004 f8e6 	bl	8011494 <ip4_output_if>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800d2cc:	68b8      	ldr	r0, [r7, #8]
 800d2ce:	f7f9 fed5 	bl	800707c <pbuf_free>
  return err;
 800d2d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3718      	adds	r7, #24
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	08014d24 	.word	0x08014d24
 800d2e4:	0801547c 	.word	0x0801547c
 800d2e8:	08014d78 	.word	0x08014d78

0800d2ec <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d2ec:	b590      	push	{r4, r7, lr}
 800d2ee:	b08b      	sub	sp, #44	; 0x2c
 800d2f0:	af04      	add	r7, sp, #16
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
 800d2f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d106      	bne.n	800d30e <tcp_rst+0x22>
 800d300:	4b1f      	ldr	r3, [pc, #124]	; (800d380 <tcp_rst+0x94>)
 800d302:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800d306:	491f      	ldr	r1, [pc, #124]	; (800d384 <tcp_rst+0x98>)
 800d308:	481f      	ldr	r0, [pc, #124]	; (800d388 <tcp_rst+0x9c>)
 800d30a:	f005 f92d 	bl	8012568 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d310:	2b00      	cmp	r3, #0
 800d312:	d106      	bne.n	800d322 <tcp_rst+0x36>
 800d314:	4b1a      	ldr	r3, [pc, #104]	; (800d380 <tcp_rst+0x94>)
 800d316:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800d31a:	491c      	ldr	r1, [pc, #112]	; (800d38c <tcp_rst+0xa0>)
 800d31c:	481a      	ldr	r0, [pc, #104]	; (800d388 <tcp_rst+0x9c>)
 800d31e:	f005 f923 	bl	8012568 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d322:	2300      	movs	r3, #0
 800d324:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d326:	f246 0308 	movw	r3, #24584	; 0x6008
 800d32a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d32c:	7dfb      	ldrb	r3, [r7, #23]
 800d32e:	b29c      	uxth	r4, r3
 800d330:	68b8      	ldr	r0, [r7, #8]
 800d332:	f7f8 fbe0 	bl	8005af6 <lwip_htonl>
 800d336:	4602      	mov	r2, r0
 800d338:	8abb      	ldrh	r3, [r7, #20]
 800d33a:	9303      	str	r3, [sp, #12]
 800d33c:	2314      	movs	r3, #20
 800d33e:	9302      	str	r3, [sp, #8]
 800d340:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d342:	9301      	str	r3, [sp, #4]
 800d344:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d346:	9300      	str	r3, [sp, #0]
 800d348:	4613      	mov	r3, r2
 800d34a:	2200      	movs	r2, #0
 800d34c:	4621      	mov	r1, r4
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f7ff fe90 	bl	800d074 <tcp_output_alloc_header_common>
 800d354:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d00c      	beq.n	800d376 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d35c:	7dfb      	ldrb	r3, [r7, #23]
 800d35e:	2200      	movs	r2, #0
 800d360:	6939      	ldr	r1, [r7, #16]
 800d362:	68f8      	ldr	r0, [r7, #12]
 800d364:	f7ff ff38 	bl	800d1d8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36a:	683a      	ldr	r2, [r7, #0]
 800d36c:	6939      	ldr	r1, [r7, #16]
 800d36e:	68f8      	ldr	r0, [r7, #12]
 800d370:	f7ff ff72 	bl	800d258 <tcp_output_control_segment>
 800d374:	e000      	b.n	800d378 <tcp_rst+0x8c>
    return;
 800d376:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d378:	371c      	adds	r7, #28
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd90      	pop	{r4, r7, pc}
 800d37e:	bf00      	nop
 800d380:	08014d24 	.word	0x08014d24
 800d384:	080154a8 	.word	0x080154a8
 800d388:	08014d78 	.word	0x08014d78
 800d38c:	080154c4 	.word	0x080154c4

0800d390 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d390:	b590      	push	{r4, r7, lr}
 800d392:	b087      	sub	sp, #28
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d398:	2300      	movs	r3, #0
 800d39a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d39c:	2300      	movs	r3, #0
 800d39e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d106      	bne.n	800d3b4 <tcp_send_empty_ack+0x24>
 800d3a6:	4b28      	ldr	r3, [pc, #160]	; (800d448 <tcp_send_empty_ack+0xb8>)
 800d3a8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800d3ac:	4927      	ldr	r1, [pc, #156]	; (800d44c <tcp_send_empty_ack+0xbc>)
 800d3ae:	4828      	ldr	r0, [pc, #160]	; (800d450 <tcp_send_empty_ack+0xc0>)
 800d3b0:	f005 f8da 	bl	8012568 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d3b4:	7dfb      	ldrb	r3, [r7, #23]
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	b2db      	uxtb	r3, r3
 800d3ba:	f003 0304 	and.w	r3, r3, #4
 800d3be:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d3c0:	7d7b      	ldrb	r3, [r7, #21]
 800d3c2:	b29c      	uxth	r4, r3
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7f8 fb94 	bl	8005af6 <lwip_htonl>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	4621      	mov	r1, r4
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f7ff fec1 	bl	800d15c <tcp_output_alloc_header>
 800d3da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d3dc:	693b      	ldr	r3, [r7, #16]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d109      	bne.n	800d3f6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	8b5b      	ldrh	r3, [r3, #26]
 800d3e6:	f043 0303 	orr.w	r3, r3, #3
 800d3ea:	b29a      	uxth	r2, r3
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d3f0:	f06f 0301 	mvn.w	r3, #1
 800d3f4:	e023      	b.n	800d43e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d3f6:	7dbb      	ldrb	r3, [r7, #22]
 800d3f8:	7dfa      	ldrb	r2, [r7, #23]
 800d3fa:	6939      	ldr	r1, [r7, #16]
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f7ff feeb 	bl	800d1d8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	3304      	adds	r3, #4
 800d408:	6939      	ldr	r1, [r7, #16]
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f7ff ff24 	bl	800d258 <tcp_output_control_segment>
 800d410:	4603      	mov	r3, r0
 800d412:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d007      	beq.n	800d42c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	8b5b      	ldrh	r3, [r3, #26]
 800d420:	f043 0303 	orr.w	r3, r3, #3
 800d424:	b29a      	uxth	r2, r3
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	835a      	strh	r2, [r3, #26]
 800d42a:	e006      	b.n	800d43a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	8b5b      	ldrh	r3, [r3, #26]
 800d430:	f023 0303 	bic.w	r3, r3, #3
 800d434:	b29a      	uxth	r2, r3
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d43a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d43e:	4618      	mov	r0, r3
 800d440:	371c      	adds	r7, #28
 800d442:	46bd      	mov	sp, r7
 800d444:	bd90      	pop	{r4, r7, pc}
 800d446:	bf00      	nop
 800d448:	08014d24 	.word	0x08014d24
 800d44c:	080154e0 	.word	0x080154e0
 800d450:	08014d78 	.word	0x08014d78

0800d454 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d454:	b590      	push	{r4, r7, lr}
 800d456:	b087      	sub	sp, #28
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d45c:	2300      	movs	r3, #0
 800d45e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d106      	bne.n	800d474 <tcp_keepalive+0x20>
 800d466:	4b18      	ldr	r3, [pc, #96]	; (800d4c8 <tcp_keepalive+0x74>)
 800d468:	f640 0224 	movw	r2, #2084	; 0x824
 800d46c:	4917      	ldr	r1, [pc, #92]	; (800d4cc <tcp_keepalive+0x78>)
 800d46e:	4818      	ldr	r0, [pc, #96]	; (800d4d0 <tcp_keepalive+0x7c>)
 800d470:	f005 f87a 	bl	8012568 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d474:	7dfb      	ldrb	r3, [r7, #23]
 800d476:	b29c      	uxth	r4, r3
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d47c:	3b01      	subs	r3, #1
 800d47e:	4618      	mov	r0, r3
 800d480:	f7f8 fb39 	bl	8005af6 <lwip_htonl>
 800d484:	4603      	mov	r3, r0
 800d486:	2200      	movs	r2, #0
 800d488:	4621      	mov	r1, r4
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f7ff fe66 	bl	800d15c <tcp_output_alloc_header>
 800d490:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d102      	bne.n	800d49e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d498:	f04f 33ff 	mov.w	r3, #4294967295
 800d49c:	e010      	b.n	800d4c0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d49e:	7dfb      	ldrb	r3, [r7, #23]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	6939      	ldr	r1, [r7, #16]
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f7ff fe97 	bl	800d1d8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d4aa:	687a      	ldr	r2, [r7, #4]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	3304      	adds	r3, #4
 800d4b0:	6939      	ldr	r1, [r7, #16]
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f7ff fed0 	bl	800d258 <tcp_output_control_segment>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d4bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	371c      	adds	r7, #28
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd90      	pop	{r4, r7, pc}
 800d4c8:	08014d24 	.word	0x08014d24
 800d4cc:	08015500 	.word	0x08015500
 800d4d0:	08014d78 	.word	0x08014d78

0800d4d4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d4d4:	b590      	push	{r4, r7, lr}
 800d4d6:	b08b      	sub	sp, #44	; 0x2c
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d4dc:	2300      	movs	r3, #0
 800d4de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d106      	bne.n	800d4f6 <tcp_zero_window_probe+0x22>
 800d4e8:	4b4c      	ldr	r3, [pc, #304]	; (800d61c <tcp_zero_window_probe+0x148>)
 800d4ea:	f640 024f 	movw	r2, #2127	; 0x84f
 800d4ee:	494c      	ldr	r1, [pc, #304]	; (800d620 <tcp_zero_window_probe+0x14c>)
 800d4f0:	484c      	ldr	r0, [pc, #304]	; (800d624 <tcp_zero_window_probe+0x150>)
 800d4f2:	f005 f839 	bl	8012568 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4fa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d4fc:	6a3b      	ldr	r3, [r7, #32]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d101      	bne.n	800d506 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d502:	2300      	movs	r3, #0
 800d504:	e086      	b.n	800d614 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d50c:	2bff      	cmp	r3, #255	; 0xff
 800d50e:	d007      	beq.n	800d520 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d516:	3301      	adds	r3, #1
 800d518:	b2da      	uxtb	r2, r3
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d520:	6a3b      	ldr	r3, [r7, #32]
 800d522:	68db      	ldr	r3, [r3, #12]
 800d524:	899b      	ldrh	r3, [r3, #12]
 800d526:	b29b      	uxth	r3, r3
 800d528:	4618      	mov	r0, r3
 800d52a:	f7f8 facf 	bl	8005acc <lwip_htons>
 800d52e:	4603      	mov	r3, r0
 800d530:	b2db      	uxtb	r3, r3
 800d532:	f003 0301 	and.w	r3, r3, #1
 800d536:	2b00      	cmp	r3, #0
 800d538:	d005      	beq.n	800d546 <tcp_zero_window_probe+0x72>
 800d53a:	6a3b      	ldr	r3, [r7, #32]
 800d53c:	891b      	ldrh	r3, [r3, #8]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d101      	bne.n	800d546 <tcp_zero_window_probe+0x72>
 800d542:	2301      	movs	r3, #1
 800d544:	e000      	b.n	800d548 <tcp_zero_window_probe+0x74>
 800d546:	2300      	movs	r3, #0
 800d548:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d54a:	7ffb      	ldrb	r3, [r7, #31]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	bf0c      	ite	eq
 800d550:	2301      	moveq	r3, #1
 800d552:	2300      	movne	r3, #0
 800d554:	b2db      	uxtb	r3, r3
 800d556:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d55c:	b299      	uxth	r1, r3
 800d55e:	6a3b      	ldr	r3, [r7, #32]
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	8bba      	ldrh	r2, [r7, #28]
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f7ff fdf8 	bl	800d15c <tcp_output_alloc_header>
 800d56c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d56e:	69bb      	ldr	r3, [r7, #24]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d102      	bne.n	800d57a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d574:	f04f 33ff 	mov.w	r3, #4294967295
 800d578:	e04c      	b.n	800d614 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d57a:	69bb      	ldr	r3, [r7, #24]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d580:	7ffb      	ldrb	r3, [r7, #31]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d011      	beq.n	800d5aa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	899b      	ldrh	r3, [r3, #12]
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	b21b      	sxth	r3, r3
 800d58e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d592:	b21c      	sxth	r4, r3
 800d594:	2011      	movs	r0, #17
 800d596:	f7f8 fa99 	bl	8005acc <lwip_htons>
 800d59a:	4603      	mov	r3, r0
 800d59c:	b21b      	sxth	r3, r3
 800d59e:	4323      	orrs	r3, r4
 800d5a0:	b21b      	sxth	r3, r3
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	819a      	strh	r2, [r3, #12]
 800d5a8:	e010      	b.n	800d5cc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d5aa:	69bb      	ldr	r3, [r7, #24]
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	3314      	adds	r3, #20
 800d5b0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d5b2:	6a3b      	ldr	r3, [r7, #32]
 800d5b4:	6858      	ldr	r0, [r3, #4]
 800d5b6:	6a3b      	ldr	r3, [r7, #32]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	891a      	ldrh	r2, [r3, #8]
 800d5bc:	6a3b      	ldr	r3, [r7, #32]
 800d5be:	891b      	ldrh	r3, [r3, #8]
 800d5c0:	1ad3      	subs	r3, r2, r3
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	6939      	ldr	r1, [r7, #16]
 800d5c8:	f7f9 ff52 	bl	8007470 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d5cc:	6a3b      	ldr	r3, [r7, #32]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7f8 fa8f 	bl	8005af6 <lwip_htonl>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	3301      	adds	r3, #1
 800d5dc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	1ad3      	subs	r3, r2, r3
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	da02      	bge.n	800d5f0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	68fa      	ldr	r2, [r7, #12]
 800d5ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5f4:	2200      	movs	r2, #0
 800d5f6:	69b9      	ldr	r1, [r7, #24]
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f7ff fded 	bl	800d1d8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	3304      	adds	r3, #4
 800d604:	69b9      	ldr	r1, [r7, #24]
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f7ff fe26 	bl	800d258 <tcp_output_control_segment>
 800d60c:	4603      	mov	r3, r0
 800d60e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d610:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d614:	4618      	mov	r0, r3
 800d616:	372c      	adds	r7, #44	; 0x2c
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd90      	pop	{r4, r7, pc}
 800d61c:	08014d24 	.word	0x08014d24
 800d620:	0801551c 	.word	0x0801551c
 800d624:	08014d78 	.word	0x08014d78

0800d628 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d630:	f7fa f80c 	bl	800764c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d634:	4b0a      	ldr	r3, [pc, #40]	; (800d660 <tcpip_tcp_timer+0x38>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d103      	bne.n	800d644 <tcpip_tcp_timer+0x1c>
 800d63c:	4b09      	ldr	r3, [pc, #36]	; (800d664 <tcpip_tcp_timer+0x3c>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d005      	beq.n	800d650 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d644:	2200      	movs	r2, #0
 800d646:	4908      	ldr	r1, [pc, #32]	; (800d668 <tcpip_tcp_timer+0x40>)
 800d648:	20fa      	movs	r0, #250	; 0xfa
 800d64a:	f000 f8f1 	bl	800d830 <sys_timeout>
 800d64e:	e002      	b.n	800d656 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d650:	4b06      	ldr	r3, [pc, #24]	; (800d66c <tcpip_tcp_timer+0x44>)
 800d652:	2200      	movs	r2, #0
 800d654:	601a      	str	r2, [r3, #0]
  }
}
 800d656:	bf00      	nop
 800d658:	3708      	adds	r7, #8
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	20007188 	.word	0x20007188
 800d664:	20007198 	.word	0x20007198
 800d668:	0800d629 	.word	0x0800d629
 800d66c:	20000558 	.word	0x20000558

0800d670 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d674:	4b0a      	ldr	r3, [pc, #40]	; (800d6a0 <tcp_timer_needed+0x30>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d10f      	bne.n	800d69c <tcp_timer_needed+0x2c>
 800d67c:	4b09      	ldr	r3, [pc, #36]	; (800d6a4 <tcp_timer_needed+0x34>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d103      	bne.n	800d68c <tcp_timer_needed+0x1c>
 800d684:	4b08      	ldr	r3, [pc, #32]	; (800d6a8 <tcp_timer_needed+0x38>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d007      	beq.n	800d69c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d68c:	4b04      	ldr	r3, [pc, #16]	; (800d6a0 <tcp_timer_needed+0x30>)
 800d68e:	2201      	movs	r2, #1
 800d690:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d692:	2200      	movs	r2, #0
 800d694:	4905      	ldr	r1, [pc, #20]	; (800d6ac <tcp_timer_needed+0x3c>)
 800d696:	20fa      	movs	r0, #250	; 0xfa
 800d698:	f000 f8ca 	bl	800d830 <sys_timeout>
  }
}
 800d69c:	bf00      	nop
 800d69e:	bd80      	pop	{r7, pc}
 800d6a0:	20000558 	.word	0x20000558
 800d6a4:	20007188 	.word	0x20007188
 800d6a8:	20007198 	.word	0x20007198
 800d6ac:	0800d629 	.word	0x0800d629

0800d6b0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b086      	sub	sp, #24
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d6bc:	2006      	movs	r0, #6
 800d6be:	f7f8 fe91 	bl	80063e4 <memp_malloc>
 800d6c2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d109      	bne.n	800d6de <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d151      	bne.n	800d774 <sys_timeout_abs+0xc4>
 800d6d0:	4b2a      	ldr	r3, [pc, #168]	; (800d77c <sys_timeout_abs+0xcc>)
 800d6d2:	22be      	movs	r2, #190	; 0xbe
 800d6d4:	492a      	ldr	r1, [pc, #168]	; (800d780 <sys_timeout_abs+0xd0>)
 800d6d6:	482b      	ldr	r0, [pc, #172]	; (800d784 <sys_timeout_abs+0xd4>)
 800d6d8:	f004 ff46 	bl	8012568 <iprintf>
    return;
 800d6dc:	e04a      	b.n	800d774 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	68ba      	ldr	r2, [r7, #8]
 800d6e8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	68fa      	ldr	r2, [r7, #12]
 800d6f4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d6f6:	4b24      	ldr	r3, [pc, #144]	; (800d788 <sys_timeout_abs+0xd8>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d103      	bne.n	800d706 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d6fe:	4a22      	ldr	r2, [pc, #136]	; (800d788 <sys_timeout_abs+0xd8>)
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	6013      	str	r3, [r2, #0]
    return;
 800d704:	e037      	b.n	800d776 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	685a      	ldr	r2, [r3, #4]
 800d70a:	4b1f      	ldr	r3, [pc, #124]	; (800d788 <sys_timeout_abs+0xd8>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	1ad3      	subs	r3, r2, r3
 800d712:	0fdb      	lsrs	r3, r3, #31
 800d714:	f003 0301 	and.w	r3, r3, #1
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d007      	beq.n	800d72e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d71e:	4b1a      	ldr	r3, [pc, #104]	; (800d788 <sys_timeout_abs+0xd8>)
 800d720:	681a      	ldr	r2, [r3, #0]
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d726:	4a18      	ldr	r2, [pc, #96]	; (800d788 <sys_timeout_abs+0xd8>)
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	6013      	str	r3, [r2, #0]
 800d72c:	e023      	b.n	800d776 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d72e:	4b16      	ldr	r3, [pc, #88]	; (800d788 <sys_timeout_abs+0xd8>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	617b      	str	r3, [r7, #20]
 800d734:	e01a      	b.n	800d76c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d00b      	beq.n	800d756 <sys_timeout_abs+0xa6>
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	685a      	ldr	r2, [r3, #4]
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	1ad3      	subs	r3, r2, r3
 800d74a:	0fdb      	lsrs	r3, r3, #31
 800d74c:	f003 0301 	and.w	r3, r3, #1
 800d750:	b2db      	uxtb	r3, r3
 800d752:	2b00      	cmp	r3, #0
 800d754:	d007      	beq.n	800d766 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	693a      	ldr	r2, [r7, #16]
 800d762:	601a      	str	r2, [r3, #0]
        break;
 800d764:	e007      	b.n	800d776 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	617b      	str	r3, [r7, #20]
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d1e1      	bne.n	800d736 <sys_timeout_abs+0x86>
 800d772:	e000      	b.n	800d776 <sys_timeout_abs+0xc6>
    return;
 800d774:	bf00      	nop
      }
    }
  }
}
 800d776:	3718      	adds	r7, #24
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	08015540 	.word	0x08015540
 800d780:	08015574 	.word	0x08015574
 800d784:	080155b4 	.word	0x080155b4
 800d788:	20000550 	.word	0x20000550

0800d78c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b086      	sub	sp, #24
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	4798      	blx	r3

  now = sys_now();
 800d79e:	f7f7 fa9d 	bl	8004cdc <sys_now>
 800d7a2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	4b0f      	ldr	r3, [pc, #60]	; (800d7e8 <lwip_cyclic_timer+0x5c>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d7b0:	68fa      	ldr	r2, [r7, #12]
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	1ad3      	subs	r3, r2, r3
 800d7b6:	0fdb      	lsrs	r3, r3, #31
 800d7b8:	f003 0301 	and.w	r3, r3, #1
 800d7bc:	b2db      	uxtb	r3, r3
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d009      	beq.n	800d7d6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	687a      	ldr	r2, [r7, #4]
 800d7cc:	4907      	ldr	r1, [pc, #28]	; (800d7ec <lwip_cyclic_timer+0x60>)
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7ff ff6e 	bl	800d6b0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d7d4:	e004      	b.n	800d7e0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	4904      	ldr	r1, [pc, #16]	; (800d7ec <lwip_cyclic_timer+0x60>)
 800d7da:	68f8      	ldr	r0, [r7, #12]
 800d7dc:	f7ff ff68 	bl	800d6b0 <sys_timeout_abs>
}
 800d7e0:	bf00      	nop
 800d7e2:	3718      	adds	r7, #24
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	20000554 	.word	0x20000554
 800d7ec:	0800d78d 	.word	0x0800d78d

0800d7f0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	607b      	str	r3, [r7, #4]
 800d7fa:	e00e      	b.n	800d81a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d7fc:	4a0a      	ldr	r2, [pc, #40]	; (800d828 <sys_timeouts_init+0x38>)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	00db      	lsls	r3, r3, #3
 800d808:	4a07      	ldr	r2, [pc, #28]	; (800d828 <sys_timeouts_init+0x38>)
 800d80a:	4413      	add	r3, r2
 800d80c:	461a      	mov	r2, r3
 800d80e:	4907      	ldr	r1, [pc, #28]	; (800d82c <sys_timeouts_init+0x3c>)
 800d810:	f000 f80e 	bl	800d830 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	3301      	adds	r3, #1
 800d818:	607b      	str	r3, [r7, #4]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2b04      	cmp	r3, #4
 800d81e:	d9ed      	bls.n	800d7fc <sys_timeouts_init+0xc>
  }
}
 800d820:	bf00      	nop
 800d822:	3708      	adds	r7, #8
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	08016a74 	.word	0x08016a74
 800d82c:	0800d78d 	.word	0x0800d78d

0800d830 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b086      	sub	sp, #24
 800d834:	af00      	add	r7, sp, #0
 800d836:	60f8      	str	r0, [r7, #12]
 800d838:	60b9      	str	r1, [r7, #8]
 800d83a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d842:	d306      	bcc.n	800d852 <sys_timeout+0x22>
 800d844:	4b0a      	ldr	r3, [pc, #40]	; (800d870 <sys_timeout+0x40>)
 800d846:	f240 1229 	movw	r2, #297	; 0x129
 800d84a:	490a      	ldr	r1, [pc, #40]	; (800d874 <sys_timeout+0x44>)
 800d84c:	480a      	ldr	r0, [pc, #40]	; (800d878 <sys_timeout+0x48>)
 800d84e:	f004 fe8b 	bl	8012568 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d852:	f7f7 fa43 	bl	8004cdc <sys_now>
 800d856:	4602      	mov	r2, r0
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	4413      	add	r3, r2
 800d85c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	68b9      	ldr	r1, [r7, #8]
 800d862:	6978      	ldr	r0, [r7, #20]
 800d864:	f7ff ff24 	bl	800d6b0 <sys_timeout_abs>
#endif
}
 800d868:	bf00      	nop
 800d86a:	3718      	adds	r7, #24
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	08015540 	.word	0x08015540
 800d874:	080155dc 	.word	0x080155dc
 800d878:	080155b4 	.word	0x080155b4

0800d87c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d882:	f7f7 fa2b 	bl	8004cdc <sys_now>
 800d886:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d888:	4b1a      	ldr	r3, [pc, #104]	; (800d8f4 <sys_check_timeouts+0x78>)
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d001      	beq.n	800d896 <sys_check_timeouts+0x1a>
 800d892:	f7f9 f8bd 	bl	8006a10 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d896:	4b18      	ldr	r3, [pc, #96]	; (800d8f8 <sys_check_timeouts+0x7c>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d022      	beq.n	800d8e8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	68fa      	ldr	r2, [r7, #12]
 800d8a8:	1ad3      	subs	r3, r2, r3
 800d8aa:	0fdb      	lsrs	r3, r3, #31
 800d8ac:	f003 0301 	and.w	r3, r3, #1
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d11a      	bne.n	800d8ec <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	4a0f      	ldr	r2, [pc, #60]	; (800d8f8 <sys_check_timeouts+0x7c>)
 800d8bc:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	689b      	ldr	r3, [r3, #8]
 800d8c2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	4a0b      	ldr	r2, [pc, #44]	; (800d8fc <sys_check_timeouts+0x80>)
 800d8d0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d8d2:	68b9      	ldr	r1, [r7, #8]
 800d8d4:	2006      	movs	r0, #6
 800d8d6:	f7f8 fdd1 	bl	800647c <memp_free>
    if (handler != NULL) {
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d0d3      	beq.n	800d888 <sys_check_timeouts+0xc>
      handler(arg);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6838      	ldr	r0, [r7, #0]
 800d8e4:	4798      	blx	r3
  do {
 800d8e6:	e7cf      	b.n	800d888 <sys_check_timeouts+0xc>
      return;
 800d8e8:	bf00      	nop
 800d8ea:	e000      	b.n	800d8ee <sys_check_timeouts+0x72>
      return;
 800d8ec:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d8ee:	3710      	adds	r7, #16
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	20007180 	.word	0x20007180
 800d8f8:	20000550 	.word	0x20000550
 800d8fc:	20000554 	.word	0x20000554

0800d900 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d904:	f004 fe48 	bl	8012598 <rand>
 800d908:	4603      	mov	r3, r0
 800d90a:	b29b      	uxth	r3, r3
 800d90c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d910:	b29b      	uxth	r3, r3
 800d912:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d916:	b29a      	uxth	r2, r3
 800d918:	4b01      	ldr	r3, [pc, #4]	; (800d920 <udp_init+0x20>)
 800d91a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d91c:	bf00      	nop
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	20000010 	.word	0x20000010

0800d924 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800d92a:	2300      	movs	r3, #0
 800d92c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d92e:	4b17      	ldr	r3, [pc, #92]	; (800d98c <udp_new_port+0x68>)
 800d930:	881b      	ldrh	r3, [r3, #0]
 800d932:	1c5a      	adds	r2, r3, #1
 800d934:	b291      	uxth	r1, r2
 800d936:	4a15      	ldr	r2, [pc, #84]	; (800d98c <udp_new_port+0x68>)
 800d938:	8011      	strh	r1, [r2, #0]
 800d93a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d93e:	4293      	cmp	r3, r2
 800d940:	d103      	bne.n	800d94a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d942:	4b12      	ldr	r3, [pc, #72]	; (800d98c <udp_new_port+0x68>)
 800d944:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d948:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d94a:	4b11      	ldr	r3, [pc, #68]	; (800d990 <udp_new_port+0x6c>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	603b      	str	r3, [r7, #0]
 800d950:	e011      	b.n	800d976 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	8a5a      	ldrh	r2, [r3, #18]
 800d956:	4b0d      	ldr	r3, [pc, #52]	; (800d98c <udp_new_port+0x68>)
 800d958:	881b      	ldrh	r3, [r3, #0]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d108      	bne.n	800d970 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d95e:	88fb      	ldrh	r3, [r7, #6]
 800d960:	3301      	adds	r3, #1
 800d962:	80fb      	strh	r3, [r7, #6]
 800d964:	88fb      	ldrh	r3, [r7, #6]
 800d966:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d96a:	d3e0      	bcc.n	800d92e <udp_new_port+0xa>
        return 0;
 800d96c:	2300      	movs	r3, #0
 800d96e:	e007      	b.n	800d980 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	603b      	str	r3, [r7, #0]
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d1ea      	bne.n	800d952 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800d97c:	4b03      	ldr	r3, [pc, #12]	; (800d98c <udp_new_port+0x68>)
 800d97e:	881b      	ldrh	r3, [r3, #0]
}
 800d980:	4618      	mov	r0, r3
 800d982:	370c      	adds	r7, #12
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr
 800d98c:	20000010 	.word	0x20000010
 800d990:	200071a0 	.word	0x200071a0

0800d994 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	4613      	mov	r3, r2
 800d9a0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d105      	bne.n	800d9b4 <udp_input_local_match+0x20>
 800d9a8:	4b27      	ldr	r3, [pc, #156]	; (800da48 <udp_input_local_match+0xb4>)
 800d9aa:	2287      	movs	r2, #135	; 0x87
 800d9ac:	4927      	ldr	r1, [pc, #156]	; (800da4c <udp_input_local_match+0xb8>)
 800d9ae:	4828      	ldr	r0, [pc, #160]	; (800da50 <udp_input_local_match+0xbc>)
 800d9b0:	f004 fdda 	bl	8012568 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d105      	bne.n	800d9c6 <udp_input_local_match+0x32>
 800d9ba:	4b23      	ldr	r3, [pc, #140]	; (800da48 <udp_input_local_match+0xb4>)
 800d9bc:	2288      	movs	r2, #136	; 0x88
 800d9be:	4925      	ldr	r1, [pc, #148]	; (800da54 <udp_input_local_match+0xc0>)
 800d9c0:	4823      	ldr	r0, [pc, #140]	; (800da50 <udp_input_local_match+0xbc>)
 800d9c2:	f004 fdd1 	bl	8012568 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	7a1b      	ldrb	r3, [r3, #8]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00b      	beq.n	800d9e6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	7a1a      	ldrb	r2, [r3, #8]
 800d9d2:	4b21      	ldr	r3, [pc, #132]	; (800da58 <udp_input_local_match+0xc4>)
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9da:	3301      	adds	r3, #1
 800d9dc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d9de:	429a      	cmp	r2, r3
 800d9e0:	d001      	beq.n	800d9e6 <udp_input_local_match+0x52>
    return 0;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	e02b      	b.n	800da3e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d9e6:	79fb      	ldrb	r3, [r7, #7]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d018      	beq.n	800da1e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d013      	beq.n	800da1a <udp_input_local_match+0x86>
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d00f      	beq.n	800da1a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d9fa:	4b17      	ldr	r3, [pc, #92]	; (800da58 <udp_input_local_match+0xc4>)
 800d9fc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d9fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da02:	d00a      	beq.n	800da1a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681a      	ldr	r2, [r3, #0]
 800da08:	4b13      	ldr	r3, [pc, #76]	; (800da58 <udp_input_local_match+0xc4>)
 800da0a:	695b      	ldr	r3, [r3, #20]
 800da0c:	405a      	eors	r2, r3
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	3308      	adds	r3, #8
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800da16:	2b00      	cmp	r3, #0
 800da18:	d110      	bne.n	800da3c <udp_input_local_match+0xa8>
          return 1;
 800da1a:	2301      	movs	r3, #1
 800da1c:	e00f      	b.n	800da3e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d009      	beq.n	800da38 <udp_input_local_match+0xa4>
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d005      	beq.n	800da38 <udp_input_local_match+0xa4>
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681a      	ldr	r2, [r3, #0]
 800da30:	4b09      	ldr	r3, [pc, #36]	; (800da58 <udp_input_local_match+0xc4>)
 800da32:	695b      	ldr	r3, [r3, #20]
 800da34:	429a      	cmp	r2, r3
 800da36:	d101      	bne.n	800da3c <udp_input_local_match+0xa8>
        return 1;
 800da38:	2301      	movs	r3, #1
 800da3a:	e000      	b.n	800da3e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800da3c:	2300      	movs	r3, #0
}
 800da3e:	4618      	mov	r0, r3
 800da40:	3710      	adds	r7, #16
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	08015628 	.word	0x08015628
 800da4c:	08015658 	.word	0x08015658
 800da50:	0801567c 	.word	0x0801567c
 800da54:	080156a4 	.word	0x080156a4
 800da58:	20003c24 	.word	0x20003c24

0800da5c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800da5c:	b590      	push	{r4, r7, lr}
 800da5e:	b08d      	sub	sp, #52	; 0x34
 800da60:	af02      	add	r7, sp, #8
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800da66:	2300      	movs	r3, #0
 800da68:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d105      	bne.n	800da7c <udp_input+0x20>
 800da70:	4b7c      	ldr	r3, [pc, #496]	; (800dc64 <udp_input+0x208>)
 800da72:	22cf      	movs	r2, #207	; 0xcf
 800da74:	497c      	ldr	r1, [pc, #496]	; (800dc68 <udp_input+0x20c>)
 800da76:	487d      	ldr	r0, [pc, #500]	; (800dc6c <udp_input+0x210>)
 800da78:	f004 fd76 	bl	8012568 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d105      	bne.n	800da8e <udp_input+0x32>
 800da82:	4b78      	ldr	r3, [pc, #480]	; (800dc64 <udp_input+0x208>)
 800da84:	22d0      	movs	r2, #208	; 0xd0
 800da86:	497a      	ldr	r1, [pc, #488]	; (800dc70 <udp_input+0x214>)
 800da88:	4878      	ldr	r0, [pc, #480]	; (800dc6c <udp_input+0x210>)
 800da8a:	f004 fd6d 	bl	8012568 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	895b      	ldrh	r3, [r3, #10]
 800da92:	2b07      	cmp	r3, #7
 800da94:	d803      	bhi.n	800da9e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f7f9 faf0 	bl	800707c <pbuf_free>
    goto end;
 800da9c:	e0de      	b.n	800dc5c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800daa4:	4b73      	ldr	r3, [pc, #460]	; (800dc74 <udp_input+0x218>)
 800daa6:	695a      	ldr	r2, [r3, #20]
 800daa8:	4b72      	ldr	r3, [pc, #456]	; (800dc74 <udp_input+0x218>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4619      	mov	r1, r3
 800daae:	4610      	mov	r0, r2
 800dab0:	f003 fdc8 	bl	8011644 <ip4_addr_isbroadcast_u32>
 800dab4:	4603      	mov	r3, r0
 800dab6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	881b      	ldrh	r3, [r3, #0]
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7f8 f804 	bl	8005acc <lwip_htons>
 800dac4:	4603      	mov	r3, r0
 800dac6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	885b      	ldrh	r3, [r3, #2]
 800dacc:	b29b      	uxth	r3, r3
 800dace:	4618      	mov	r0, r3
 800dad0:	f7f7 fffc 	bl	8005acc <lwip_htons>
 800dad4:	4603      	mov	r3, r0
 800dad6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800dad8:	2300      	movs	r3, #0
 800dada:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800dadc:	2300      	movs	r3, #0
 800dade:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800dae0:	2300      	movs	r3, #0
 800dae2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800dae4:	4b64      	ldr	r3, [pc, #400]	; (800dc78 <udp_input+0x21c>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	627b      	str	r3, [r7, #36]	; 0x24
 800daea:	e054      	b.n	800db96 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800daec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daee:	8a5b      	ldrh	r3, [r3, #18]
 800daf0:	89fa      	ldrh	r2, [r7, #14]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d14a      	bne.n	800db8c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800daf6:	7cfb      	ldrb	r3, [r7, #19]
 800daf8:	461a      	mov	r2, r3
 800dafa:	6839      	ldr	r1, [r7, #0]
 800dafc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dafe:	f7ff ff49 	bl	800d994 <udp_input_local_match>
 800db02:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800db04:	2b00      	cmp	r3, #0
 800db06:	d041      	beq.n	800db8c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800db08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db0a:	7c1b      	ldrb	r3, [r3, #16]
 800db0c:	f003 0304 	and.w	r3, r3, #4
 800db10:	2b00      	cmp	r3, #0
 800db12:	d11d      	bne.n	800db50 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800db14:	69fb      	ldr	r3, [r7, #28]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d102      	bne.n	800db20 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800db1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1c:	61fb      	str	r3, [r7, #28]
 800db1e:	e017      	b.n	800db50 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800db20:	7cfb      	ldrb	r3, [r7, #19]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d014      	beq.n	800db50 <udp_input+0xf4>
 800db26:	4b53      	ldr	r3, [pc, #332]	; (800dc74 <udp_input+0x218>)
 800db28:	695b      	ldr	r3, [r3, #20]
 800db2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db2e:	d10f      	bne.n	800db50 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800db30:	69fb      	ldr	r3, [r7, #28]
 800db32:	681a      	ldr	r2, [r3, #0]
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	3304      	adds	r3, #4
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	d008      	beq.n	800db50 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800db3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	3304      	adds	r3, #4
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d101      	bne.n	800db50 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800db4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800db50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db52:	8a9b      	ldrh	r3, [r3, #20]
 800db54:	8a3a      	ldrh	r2, [r7, #16]
 800db56:	429a      	cmp	r2, r3
 800db58:	d118      	bne.n	800db8c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800db5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d005      	beq.n	800db6e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800db62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db64:	685a      	ldr	r2, [r3, #4]
 800db66:	4b43      	ldr	r3, [pc, #268]	; (800dc74 <udp_input+0x218>)
 800db68:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d10e      	bne.n	800db8c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800db6e:	6a3b      	ldr	r3, [r7, #32]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d014      	beq.n	800db9e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800db74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db76:	68da      	ldr	r2, [r3, #12]
 800db78:	6a3b      	ldr	r3, [r7, #32]
 800db7a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800db7c:	4b3e      	ldr	r3, [pc, #248]	; (800dc78 <udp_input+0x21c>)
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db82:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800db84:	4a3c      	ldr	r2, [pc, #240]	; (800dc78 <udp_input+0x21c>)
 800db86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db88:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800db8a:	e008      	b.n	800db9e <udp_input+0x142>
      }
    }

    prev = pcb;
 800db8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800db90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db92:	68db      	ldr	r3, [r3, #12]
 800db94:	627b      	str	r3, [r7, #36]	; 0x24
 800db96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d1a7      	bne.n	800daec <udp_input+0x90>
 800db9c:	e000      	b.n	800dba0 <udp_input+0x144>
        break;
 800db9e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800dba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d101      	bne.n	800dbaa <udp_input+0x14e>
    pcb = uncon_pcb;
 800dba6:	69fb      	ldr	r3, [r7, #28]
 800dba8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800dbaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d002      	beq.n	800dbb6 <udp_input+0x15a>
    for_us = 1;
 800dbb0:	2301      	movs	r3, #1
 800dbb2:	76fb      	strb	r3, [r7, #27]
 800dbb4:	e00a      	b.n	800dbcc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	3304      	adds	r3, #4
 800dbba:	681a      	ldr	r2, [r3, #0]
 800dbbc:	4b2d      	ldr	r3, [pc, #180]	; (800dc74 <udp_input+0x218>)
 800dbbe:	695b      	ldr	r3, [r3, #20]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	bf0c      	ite	eq
 800dbc4:	2301      	moveq	r3, #1
 800dbc6:	2300      	movne	r3, #0
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800dbcc:	7efb      	ldrb	r3, [r7, #27]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d041      	beq.n	800dc56 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800dbd2:	2108      	movs	r1, #8
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7f9 f9cb 	bl	8006f70 <pbuf_remove_header>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d00a      	beq.n	800dbf6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800dbe0:	4b20      	ldr	r3, [pc, #128]	; (800dc64 <udp_input+0x208>)
 800dbe2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800dbe6:	4925      	ldr	r1, [pc, #148]	; (800dc7c <udp_input+0x220>)
 800dbe8:	4820      	ldr	r0, [pc, #128]	; (800dc6c <udp_input+0x210>)
 800dbea:	f004 fcbd 	bl	8012568 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f7f9 fa44 	bl	800707c <pbuf_free>
      goto end;
 800dbf4:	e032      	b.n	800dc5c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800dbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d012      	beq.n	800dc22 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800dbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfe:	699b      	ldr	r3, [r3, #24]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d00a      	beq.n	800dc1a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800dc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc06:	699c      	ldr	r4, [r3, #24]
 800dc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc0a:	69d8      	ldr	r0, [r3, #28]
 800dc0c:	8a3b      	ldrh	r3, [r7, #16]
 800dc0e:	9300      	str	r3, [sp, #0]
 800dc10:	4b1b      	ldr	r3, [pc, #108]	; (800dc80 <udp_input+0x224>)
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc16:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800dc18:	e021      	b.n	800dc5e <udp_input+0x202>
        pbuf_free(p);
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f7f9 fa2e 	bl	800707c <pbuf_free>
        goto end;
 800dc20:	e01c      	b.n	800dc5c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800dc22:	7cfb      	ldrb	r3, [r7, #19]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d112      	bne.n	800dc4e <udp_input+0x1f2>
 800dc28:	4b12      	ldr	r3, [pc, #72]	; (800dc74 <udp_input+0x218>)
 800dc2a:	695b      	ldr	r3, [r3, #20]
 800dc2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc30:	2be0      	cmp	r3, #224	; 0xe0
 800dc32:	d00c      	beq.n	800dc4e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800dc34:	4b0f      	ldr	r3, [pc, #60]	; (800dc74 <udp_input+0x218>)
 800dc36:	899b      	ldrh	r3, [r3, #12]
 800dc38:	3308      	adds	r3, #8
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	b21b      	sxth	r3, r3
 800dc3e:	4619      	mov	r1, r3
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f7f9 fa08 	bl	8007056 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800dc46:	2103      	movs	r1, #3
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f003 f9bf 	bl	8010fcc <icmp_dest_unreach>
      pbuf_free(p);
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f7f9 fa14 	bl	800707c <pbuf_free>
  return;
 800dc54:	e003      	b.n	800dc5e <udp_input+0x202>
    pbuf_free(p);
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f7f9 fa10 	bl	800707c <pbuf_free>
  return;
 800dc5c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800dc5e:	372c      	adds	r7, #44	; 0x2c
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd90      	pop	{r4, r7, pc}
 800dc64:	08015628 	.word	0x08015628
 800dc68:	080156cc 	.word	0x080156cc
 800dc6c:	0801567c 	.word	0x0801567c
 800dc70:	080156e4 	.word	0x080156e4
 800dc74:	20003c24 	.word	0x20003c24
 800dc78:	200071a0 	.word	0x200071a0
 800dc7c:	08015700 	.word	0x08015700
 800dc80:	20003c34 	.word	0x20003c34

0800dc84 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b088      	sub	sp, #32
 800dc88:	af02      	add	r7, sp, #8
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
 800dc90:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d109      	bne.n	800dcac <udp_sendto_if+0x28>
 800dc98:	4b2e      	ldr	r3, [pc, #184]	; (800dd54 <udp_sendto_if+0xd0>)
 800dc9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc9e:	492e      	ldr	r1, [pc, #184]	; (800dd58 <udp_sendto_if+0xd4>)
 800dca0:	482e      	ldr	r0, [pc, #184]	; (800dd5c <udp_sendto_if+0xd8>)
 800dca2:	f004 fc61 	bl	8012568 <iprintf>
 800dca6:	f06f 030f 	mvn.w	r3, #15
 800dcaa:	e04f      	b.n	800dd4c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d109      	bne.n	800dcc6 <udp_sendto_if+0x42>
 800dcb2:	4b28      	ldr	r3, [pc, #160]	; (800dd54 <udp_sendto_if+0xd0>)
 800dcb4:	f240 2281 	movw	r2, #641	; 0x281
 800dcb8:	4929      	ldr	r1, [pc, #164]	; (800dd60 <udp_sendto_if+0xdc>)
 800dcba:	4828      	ldr	r0, [pc, #160]	; (800dd5c <udp_sendto_if+0xd8>)
 800dcbc:	f004 fc54 	bl	8012568 <iprintf>
 800dcc0:	f06f 030f 	mvn.w	r3, #15
 800dcc4:	e042      	b.n	800dd4c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d109      	bne.n	800dce0 <udp_sendto_if+0x5c>
 800dccc:	4b21      	ldr	r3, [pc, #132]	; (800dd54 <udp_sendto_if+0xd0>)
 800dcce:	f240 2282 	movw	r2, #642	; 0x282
 800dcd2:	4924      	ldr	r1, [pc, #144]	; (800dd64 <udp_sendto_if+0xe0>)
 800dcd4:	4821      	ldr	r0, [pc, #132]	; (800dd5c <udp_sendto_if+0xd8>)
 800dcd6:	f004 fc47 	bl	8012568 <iprintf>
 800dcda:	f06f 030f 	mvn.w	r3, #15
 800dcde:	e035      	b.n	800dd4c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800dce0:	6a3b      	ldr	r3, [r7, #32]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d109      	bne.n	800dcfa <udp_sendto_if+0x76>
 800dce6:	4b1b      	ldr	r3, [pc, #108]	; (800dd54 <udp_sendto_if+0xd0>)
 800dce8:	f240 2283 	movw	r2, #643	; 0x283
 800dcec:	491e      	ldr	r1, [pc, #120]	; (800dd68 <udp_sendto_if+0xe4>)
 800dcee:	481b      	ldr	r0, [pc, #108]	; (800dd5c <udp_sendto_if+0xd8>)
 800dcf0:	f004 fc3a 	bl	8012568 <iprintf>
 800dcf4:	f06f 030f 	mvn.w	r3, #15
 800dcf8:	e028      	b.n	800dd4c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d009      	beq.n	800dd14 <udp_sendto_if+0x90>
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d005      	beq.n	800dd14 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800dd10:	2be0      	cmp	r3, #224	; 0xe0
 800dd12:	d103      	bne.n	800dd1c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800dd14:	6a3b      	ldr	r3, [r7, #32]
 800dd16:	3304      	adds	r3, #4
 800dd18:	617b      	str	r3, [r7, #20]
 800dd1a:	e00b      	b.n	800dd34 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	6a3b      	ldr	r3, [r7, #32]
 800dd22:	3304      	adds	r3, #4
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d002      	beq.n	800dd30 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800dd2a:	f06f 0303 	mvn.w	r3, #3
 800dd2e:	e00d      	b.n	800dd4c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800dd34:	887a      	ldrh	r2, [r7, #2]
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	9301      	str	r3, [sp, #4]
 800dd3a:	6a3b      	ldr	r3, [r7, #32]
 800dd3c:	9300      	str	r3, [sp, #0]
 800dd3e:	4613      	mov	r3, r2
 800dd40:	687a      	ldr	r2, [r7, #4]
 800dd42:	68b9      	ldr	r1, [r7, #8]
 800dd44:	68f8      	ldr	r0, [r7, #12]
 800dd46:	f000 f811 	bl	800dd6c <udp_sendto_if_src>
 800dd4a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3718      	adds	r7, #24
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}
 800dd54:	08015628 	.word	0x08015628
 800dd58:	0801579c 	.word	0x0801579c
 800dd5c:	0801567c 	.word	0x0801567c
 800dd60:	080157b8 	.word	0x080157b8
 800dd64:	080157d4 	.word	0x080157d4
 800dd68:	080157f4 	.word	0x080157f4

0800dd6c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b08c      	sub	sp, #48	; 0x30
 800dd70:	af04      	add	r7, sp, #16
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	607a      	str	r2, [r7, #4]
 800dd78:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d109      	bne.n	800dd94 <udp_sendto_if_src+0x28>
 800dd80:	4b65      	ldr	r3, [pc, #404]	; (800df18 <udp_sendto_if_src+0x1ac>)
 800dd82:	f240 22d1 	movw	r2, #721	; 0x2d1
 800dd86:	4965      	ldr	r1, [pc, #404]	; (800df1c <udp_sendto_if_src+0x1b0>)
 800dd88:	4865      	ldr	r0, [pc, #404]	; (800df20 <udp_sendto_if_src+0x1b4>)
 800dd8a:	f004 fbed 	bl	8012568 <iprintf>
 800dd8e:	f06f 030f 	mvn.w	r3, #15
 800dd92:	e0bc      	b.n	800df0e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d109      	bne.n	800ddae <udp_sendto_if_src+0x42>
 800dd9a:	4b5f      	ldr	r3, [pc, #380]	; (800df18 <udp_sendto_if_src+0x1ac>)
 800dd9c:	f240 22d2 	movw	r2, #722	; 0x2d2
 800dda0:	4960      	ldr	r1, [pc, #384]	; (800df24 <udp_sendto_if_src+0x1b8>)
 800dda2:	485f      	ldr	r0, [pc, #380]	; (800df20 <udp_sendto_if_src+0x1b4>)
 800dda4:	f004 fbe0 	bl	8012568 <iprintf>
 800dda8:	f06f 030f 	mvn.w	r3, #15
 800ddac:	e0af      	b.n	800df0e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d109      	bne.n	800ddc8 <udp_sendto_if_src+0x5c>
 800ddb4:	4b58      	ldr	r3, [pc, #352]	; (800df18 <udp_sendto_if_src+0x1ac>)
 800ddb6:	f240 22d3 	movw	r2, #723	; 0x2d3
 800ddba:	495b      	ldr	r1, [pc, #364]	; (800df28 <udp_sendto_if_src+0x1bc>)
 800ddbc:	4858      	ldr	r0, [pc, #352]	; (800df20 <udp_sendto_if_src+0x1b4>)
 800ddbe:	f004 fbd3 	bl	8012568 <iprintf>
 800ddc2:	f06f 030f 	mvn.w	r3, #15
 800ddc6:	e0a2      	b.n	800df0e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800ddc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d109      	bne.n	800dde2 <udp_sendto_if_src+0x76>
 800ddce:	4b52      	ldr	r3, [pc, #328]	; (800df18 <udp_sendto_if_src+0x1ac>)
 800ddd0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800ddd4:	4955      	ldr	r1, [pc, #340]	; (800df2c <udp_sendto_if_src+0x1c0>)
 800ddd6:	4852      	ldr	r0, [pc, #328]	; (800df20 <udp_sendto_if_src+0x1b4>)
 800ddd8:	f004 fbc6 	bl	8012568 <iprintf>
 800dddc:	f06f 030f 	mvn.w	r3, #15
 800dde0:	e095      	b.n	800df0e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800dde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d109      	bne.n	800ddfc <udp_sendto_if_src+0x90>
 800dde8:	4b4b      	ldr	r3, [pc, #300]	; (800df18 <udp_sendto_if_src+0x1ac>)
 800ddea:	f240 22d5 	movw	r2, #725	; 0x2d5
 800ddee:	4950      	ldr	r1, [pc, #320]	; (800df30 <udp_sendto_if_src+0x1c4>)
 800ddf0:	484b      	ldr	r0, [pc, #300]	; (800df20 <udp_sendto_if_src+0x1b4>)
 800ddf2:	f004 fbb9 	bl	8012568 <iprintf>
 800ddf6:	f06f 030f 	mvn.w	r3, #15
 800ddfa:	e088      	b.n	800df0e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	8a5b      	ldrh	r3, [r3, #18]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d10f      	bne.n	800de24 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800de04:	68f9      	ldr	r1, [r7, #12]
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	8a5b      	ldrh	r3, [r3, #18]
 800de0a:	461a      	mov	r2, r3
 800de0c:	68f8      	ldr	r0, [r7, #12]
 800de0e:	f000 f893 	bl	800df38 <udp_bind>
 800de12:	4603      	mov	r3, r0
 800de14:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800de16:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d002      	beq.n	800de24 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800de1e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800de22:	e074      	b.n	800df0e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	891b      	ldrh	r3, [r3, #8]
 800de28:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d902      	bls.n	800de36 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800de30:	f04f 33ff 	mov.w	r3, #4294967295
 800de34:	e06b      	b.n	800df0e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800de36:	2108      	movs	r1, #8
 800de38:	68b8      	ldr	r0, [r7, #8]
 800de3a:	f7f9 f889 	bl	8006f50 <pbuf_add_header>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d015      	beq.n	800de70 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800de44:	f44f 7220 	mov.w	r2, #640	; 0x280
 800de48:	2108      	movs	r1, #8
 800de4a:	2022      	movs	r0, #34	; 0x22
 800de4c:	f7f8 fe36 	bl	8006abc <pbuf_alloc>
 800de50:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d102      	bne.n	800de5e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800de58:	f04f 33ff 	mov.w	r3, #4294967295
 800de5c:	e057      	b.n	800df0e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	891b      	ldrh	r3, [r3, #8]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d006      	beq.n	800de74 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800de66:	68b9      	ldr	r1, [r7, #8]
 800de68:	69f8      	ldr	r0, [r7, #28]
 800de6a:	f7f9 fa1f 	bl	80072ac <pbuf_chain>
 800de6e:	e001      	b.n	800de74 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800de74:	69fb      	ldr	r3, [r7, #28]
 800de76:	895b      	ldrh	r3, [r3, #10]
 800de78:	2b07      	cmp	r3, #7
 800de7a:	d806      	bhi.n	800de8a <udp_sendto_if_src+0x11e>
 800de7c:	4b26      	ldr	r3, [pc, #152]	; (800df18 <udp_sendto_if_src+0x1ac>)
 800de7e:	f240 320e 	movw	r2, #782	; 0x30e
 800de82:	492c      	ldr	r1, [pc, #176]	; (800df34 <udp_sendto_if_src+0x1c8>)
 800de84:	4826      	ldr	r0, [pc, #152]	; (800df20 <udp_sendto_if_src+0x1b4>)
 800de86:	f004 fb6f 	bl	8012568 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800de8a:	69fb      	ldr	r3, [r7, #28]
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	8a5b      	ldrh	r3, [r3, #18]
 800de94:	4618      	mov	r0, r3
 800de96:	f7f7 fe19 	bl	8005acc <lwip_htons>
 800de9a:	4603      	mov	r3, r0
 800de9c:	461a      	mov	r2, r3
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800dea2:	887b      	ldrh	r3, [r7, #2]
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7f7 fe11 	bl	8005acc <lwip_htons>
 800deaa:	4603      	mov	r3, r0
 800deac:	461a      	mov	r2, r3
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	2200      	movs	r2, #0
 800deb6:	719a      	strb	r2, [r3, #6]
 800deb8:	2200      	movs	r2, #0
 800deba:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800debc:	69fb      	ldr	r3, [r7, #28]
 800debe:	891b      	ldrh	r3, [r3, #8]
 800dec0:	4618      	mov	r0, r3
 800dec2:	f7f7 fe03 	bl	8005acc <lwip_htons>
 800dec6:	4603      	mov	r3, r0
 800dec8:	461a      	mov	r2, r3
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800dece:	2311      	movs	r3, #17
 800ded0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	7adb      	ldrb	r3, [r3, #11]
 800ded6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	7a9b      	ldrb	r3, [r3, #10]
 800dedc:	7cb9      	ldrb	r1, [r7, #18]
 800dede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dee0:	9202      	str	r2, [sp, #8]
 800dee2:	7cfa      	ldrb	r2, [r7, #19]
 800dee4:	9201      	str	r2, [sp, #4]
 800dee6:	9300      	str	r3, [sp, #0]
 800dee8:	460b      	mov	r3, r1
 800deea:	687a      	ldr	r2, [r7, #4]
 800deec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800deee:	69f8      	ldr	r0, [r7, #28]
 800def0:	f003 fafa 	bl	80114e8 <ip4_output_if_src>
 800def4:	4603      	mov	r3, r0
 800def6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800def8:	69fa      	ldr	r2, [r7, #28]
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	429a      	cmp	r2, r3
 800defe:	d004      	beq.n	800df0a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800df00:	69f8      	ldr	r0, [r7, #28]
 800df02:	f7f9 f8bb 	bl	800707c <pbuf_free>
    q = NULL;
 800df06:	2300      	movs	r3, #0
 800df08:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800df0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3720      	adds	r7, #32
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	08015628 	.word	0x08015628
 800df1c:	08015814 	.word	0x08015814
 800df20:	0801567c 	.word	0x0801567c
 800df24:	08015834 	.word	0x08015834
 800df28:	08015854 	.word	0x08015854
 800df2c:	08015878 	.word	0x08015878
 800df30:	0801589c 	.word	0x0801589c
 800df34:	080158c0 	.word	0x080158c0

0800df38 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	4613      	mov	r3, r2
 800df44:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d101      	bne.n	800df50 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800df4c:	4b39      	ldr	r3, [pc, #228]	; (800e034 <udp_bind+0xfc>)
 800df4e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d109      	bne.n	800df6a <udp_bind+0x32>
 800df56:	4b38      	ldr	r3, [pc, #224]	; (800e038 <udp_bind+0x100>)
 800df58:	f240 32b7 	movw	r2, #951	; 0x3b7
 800df5c:	4937      	ldr	r1, [pc, #220]	; (800e03c <udp_bind+0x104>)
 800df5e:	4838      	ldr	r0, [pc, #224]	; (800e040 <udp_bind+0x108>)
 800df60:	f004 fb02 	bl	8012568 <iprintf>
 800df64:	f06f 030f 	mvn.w	r3, #15
 800df68:	e060      	b.n	800e02c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800df6a:	2300      	movs	r3, #0
 800df6c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800df6e:	4b35      	ldr	r3, [pc, #212]	; (800e044 <udp_bind+0x10c>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	617b      	str	r3, [r7, #20]
 800df74:	e009      	b.n	800df8a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d102      	bne.n	800df84 <udp_bind+0x4c>
      rebind = 1;
 800df7e:	2301      	movs	r3, #1
 800df80:	74fb      	strb	r3, [r7, #19]
      break;
 800df82:	e005      	b.n	800df90 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	617b      	str	r3, [r7, #20]
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d1f2      	bne.n	800df76 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800df90:	88fb      	ldrh	r3, [r7, #6]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d109      	bne.n	800dfaa <udp_bind+0x72>
    port = udp_new_port();
 800df96:	f7ff fcc5 	bl	800d924 <udp_new_port>
 800df9a:	4603      	mov	r3, r0
 800df9c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800df9e:	88fb      	ldrh	r3, [r7, #6]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d12c      	bne.n	800dffe <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800dfa4:	f06f 0307 	mvn.w	r3, #7
 800dfa8:	e040      	b.n	800e02c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dfaa:	4b26      	ldr	r3, [pc, #152]	; (800e044 <udp_bind+0x10c>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	617b      	str	r3, [r7, #20]
 800dfb0:	e022      	b.n	800dff8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800dfb2:	68fa      	ldr	r2, [r7, #12]
 800dfb4:	697b      	ldr	r3, [r7, #20]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d01b      	beq.n	800dff2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	8a5b      	ldrh	r3, [r3, #18]
 800dfbe:	88fa      	ldrh	r2, [r7, #6]
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d116      	bne.n	800dff2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	681a      	ldr	r2, [r3, #0]
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d00d      	beq.n	800dfec <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d00a      	beq.n	800dfec <udp_bind+0xb4>
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d006      	beq.n	800dfec <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800dfde:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d003      	beq.n	800dfec <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d102      	bne.n	800dff2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800dfec:	f06f 0307 	mvn.w	r3, #7
 800dff0:	e01c      	b.n	800e02c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	617b      	str	r3, [r7, #20]
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d1d9      	bne.n	800dfb2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d002      	beq.n	800e00a <udp_bind+0xd2>
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	e000      	b.n	800e00c <udp_bind+0xd4>
 800e00a:	2300      	movs	r3, #0
 800e00c:	68fa      	ldr	r2, [r7, #12]
 800e00e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	88fa      	ldrh	r2, [r7, #6]
 800e014:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800e016:	7cfb      	ldrb	r3, [r7, #19]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d106      	bne.n	800e02a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800e01c:	4b09      	ldr	r3, [pc, #36]	; (800e044 <udp_bind+0x10c>)
 800e01e:	681a      	ldr	r2, [r3, #0]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800e024:	4a07      	ldr	r2, [pc, #28]	; (800e044 <udp_bind+0x10c>)
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800e02a:	2300      	movs	r3, #0
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3718      	adds	r7, #24
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	08016a9c 	.word	0x08016a9c
 800e038:	08015628 	.word	0x08015628
 800e03c:	080158f0 	.word	0x080158f0
 800e040:	0801567c 	.word	0x0801567c
 800e044:	200071a0 	.word	0x200071a0

0800e048 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b086      	sub	sp, #24
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	4613      	mov	r3, r2
 800e054:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d109      	bne.n	800e070 <udp_connect+0x28>
 800e05c:	4b2c      	ldr	r3, [pc, #176]	; (800e110 <udp_connect+0xc8>)
 800e05e:	f240 4235 	movw	r2, #1077	; 0x435
 800e062:	492c      	ldr	r1, [pc, #176]	; (800e114 <udp_connect+0xcc>)
 800e064:	482c      	ldr	r0, [pc, #176]	; (800e118 <udp_connect+0xd0>)
 800e066:	f004 fa7f 	bl	8012568 <iprintf>
 800e06a:	f06f 030f 	mvn.w	r3, #15
 800e06e:	e04b      	b.n	800e108 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d109      	bne.n	800e08a <udp_connect+0x42>
 800e076:	4b26      	ldr	r3, [pc, #152]	; (800e110 <udp_connect+0xc8>)
 800e078:	f240 4236 	movw	r2, #1078	; 0x436
 800e07c:	4927      	ldr	r1, [pc, #156]	; (800e11c <udp_connect+0xd4>)
 800e07e:	4826      	ldr	r0, [pc, #152]	; (800e118 <udp_connect+0xd0>)
 800e080:	f004 fa72 	bl	8012568 <iprintf>
 800e084:	f06f 030f 	mvn.w	r3, #15
 800e088:	e03e      	b.n	800e108 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	8a5b      	ldrh	r3, [r3, #18]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d10f      	bne.n	800e0b2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800e092:	68f9      	ldr	r1, [r7, #12]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	8a5b      	ldrh	r3, [r3, #18]
 800e098:	461a      	mov	r2, r3
 800e09a:	68f8      	ldr	r0, [r7, #12]
 800e09c:	f7ff ff4c 	bl	800df38 <udp_bind>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e0a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d002      	beq.n	800e0b2 <udp_connect+0x6a>
      return err;
 800e0ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e0b0:	e02a      	b.n	800e108 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d002      	beq.n	800e0be <udp_connect+0x76>
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	e000      	b.n	800e0c0 <udp_connect+0x78>
 800e0be:	2300      	movs	r3, #0
 800e0c0:	68fa      	ldr	r2, [r7, #12]
 800e0c2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	88fa      	ldrh	r2, [r7, #6]
 800e0c8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	7c1b      	ldrb	r3, [r3, #16]
 800e0ce:	f043 0304 	orr.w	r3, r3, #4
 800e0d2:	b2da      	uxtb	r2, r3
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e0d8:	4b11      	ldr	r3, [pc, #68]	; (800e120 <udp_connect+0xd8>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	617b      	str	r3, [r7, #20]
 800e0de:	e008      	b.n	800e0f2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d101      	bne.n	800e0ec <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	e00d      	b.n	800e108 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	617b      	str	r3, [r7, #20]
 800e0f2:	697b      	ldr	r3, [r7, #20]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d1f3      	bne.n	800e0e0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800e0f8:	4b09      	ldr	r3, [pc, #36]	; (800e120 <udp_connect+0xd8>)
 800e0fa:	681a      	ldr	r2, [r3, #0]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800e100:	4a07      	ldr	r2, [pc, #28]	; (800e120 <udp_connect+0xd8>)
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800e106:	2300      	movs	r3, #0
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3718      	adds	r7, #24
 800e10c:	46bd      	mov	sp, r7
 800e10e:	bd80      	pop	{r7, pc}
 800e110:	08015628 	.word	0x08015628
 800e114:	08015908 	.word	0x08015908
 800e118:	0801567c 	.word	0x0801567c
 800e11c:	08015924 	.word	0x08015924
 800e120:	200071a0 	.word	0x200071a0

0800e124 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b084      	sub	sp, #16
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d107      	bne.n	800e146 <udp_recv+0x22>
 800e136:	4b08      	ldr	r3, [pc, #32]	; (800e158 <udp_recv+0x34>)
 800e138:	f240 428a 	movw	r2, #1162	; 0x48a
 800e13c:	4907      	ldr	r1, [pc, #28]	; (800e15c <udp_recv+0x38>)
 800e13e:	4808      	ldr	r0, [pc, #32]	; (800e160 <udp_recv+0x3c>)
 800e140:	f004 fa12 	bl	8012568 <iprintf>
 800e144:	e005      	b.n	800e152 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	68ba      	ldr	r2, [r7, #8]
 800e14a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	61da      	str	r2, [r3, #28]
}
 800e152:	3710      	adds	r7, #16
 800e154:	46bd      	mov	sp, r7
 800e156:	bd80      	pop	{r7, pc}
 800e158:	08015628 	.word	0x08015628
 800e15c:	0801595c 	.word	0x0801595c
 800e160:	0801567c 	.word	0x0801567c

0800e164 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b084      	sub	sp, #16
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d107      	bne.n	800e182 <udp_remove+0x1e>
 800e172:	4b19      	ldr	r3, [pc, #100]	; (800e1d8 <udp_remove+0x74>)
 800e174:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800e178:	4918      	ldr	r1, [pc, #96]	; (800e1dc <udp_remove+0x78>)
 800e17a:	4819      	ldr	r0, [pc, #100]	; (800e1e0 <udp_remove+0x7c>)
 800e17c:	f004 f9f4 	bl	8012568 <iprintf>
 800e180:	e026      	b.n	800e1d0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800e182:	4b18      	ldr	r3, [pc, #96]	; (800e1e4 <udp_remove+0x80>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	429a      	cmp	r2, r3
 800e18a:	d105      	bne.n	800e198 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800e18c:	4b15      	ldr	r3, [pc, #84]	; (800e1e4 <udp_remove+0x80>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	68db      	ldr	r3, [r3, #12]
 800e192:	4a14      	ldr	r2, [pc, #80]	; (800e1e4 <udp_remove+0x80>)
 800e194:	6013      	str	r3, [r2, #0]
 800e196:	e017      	b.n	800e1c8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e198:	4b12      	ldr	r3, [pc, #72]	; (800e1e4 <udp_remove+0x80>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	60fb      	str	r3, [r7, #12]
 800e19e:	e010      	b.n	800e1c2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d009      	beq.n	800e1bc <udp_remove+0x58>
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	687a      	ldr	r2, [r7, #4]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d104      	bne.n	800e1bc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	68da      	ldr	r2, [r3, #12]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	60da      	str	r2, [r3, #12]
        break;
 800e1ba:	e005      	b.n	800e1c8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	68db      	ldr	r3, [r3, #12]
 800e1c0:	60fb      	str	r3, [r7, #12]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d1eb      	bne.n	800e1a0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800e1c8:	6879      	ldr	r1, [r7, #4]
 800e1ca:	2000      	movs	r0, #0
 800e1cc:	f7f8 f956 	bl	800647c <memp_free>
}
 800e1d0:	3710      	adds	r7, #16
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	08015628 	.word	0x08015628
 800e1dc:	08015974 	.word	0x08015974
 800e1e0:	0801567c 	.word	0x0801567c
 800e1e4:	200071a0 	.word	0x200071a0

0800e1e8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800e1ee:	2000      	movs	r0, #0
 800e1f0:	f7f8 f8f8 	bl	80063e4 <memp_malloc>
 800e1f4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d007      	beq.n	800e20c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800e1fc:	2220      	movs	r2, #32
 800e1fe:	2100      	movs	r1, #0
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f004 f9a9 	bl	8012558 <memset>
    pcb->ttl = UDP_TTL;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	22ff      	movs	r2, #255	; 0xff
 800e20a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800e20c:	687b      	ldr	r3, [r7, #4]
}
 800e20e:	4618      	mov	r0, r3
 800e210:	3708      	adds	r7, #8
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
	...

0800e218 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e218:	b480      	push	{r7}
 800e21a:	b085      	sub	sp, #20
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d01e      	beq.n	800e266 <udp_netif_ip_addr_changed+0x4e>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d01a      	beq.n	800e266 <udp_netif_ip_addr_changed+0x4e>
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d017      	beq.n	800e266 <udp_netif_ip_addr_changed+0x4e>
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d013      	beq.n	800e266 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e23e:	4b0d      	ldr	r3, [pc, #52]	; (800e274 <udp_netif_ip_addr_changed+0x5c>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	60fb      	str	r3, [r7, #12]
 800e244:	e00c      	b.n	800e260 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681a      	ldr	r2, [r3, #0]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d103      	bne.n	800e25a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	681a      	ldr	r2, [r3, #0]
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	60fb      	str	r3, [r7, #12]
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d1ef      	bne.n	800e246 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800e266:	bf00      	nop
 800e268:	3714      	adds	r7, #20
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr
 800e272:	bf00      	nop
 800e274:	200071a0 	.word	0x200071a0

0800e278 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800e27c:	4b20      	ldr	r3, [pc, #128]	; (800e300 <dhcp_inc_pcb_refcount+0x88>)
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d133      	bne.n	800e2ec <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800e284:	4b1f      	ldr	r3, [pc, #124]	; (800e304 <dhcp_inc_pcb_refcount+0x8c>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d005      	beq.n	800e298 <dhcp_inc_pcb_refcount+0x20>
 800e28c:	4b1e      	ldr	r3, [pc, #120]	; (800e308 <dhcp_inc_pcb_refcount+0x90>)
 800e28e:	22e5      	movs	r2, #229	; 0xe5
 800e290:	491e      	ldr	r1, [pc, #120]	; (800e30c <dhcp_inc_pcb_refcount+0x94>)
 800e292:	481f      	ldr	r0, [pc, #124]	; (800e310 <dhcp_inc_pcb_refcount+0x98>)
 800e294:	f004 f968 	bl	8012568 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800e298:	f7ff ffa6 	bl	800e1e8 <udp_new>
 800e29c:	4602      	mov	r2, r0
 800e29e:	4b19      	ldr	r3, [pc, #100]	; (800e304 <dhcp_inc_pcb_refcount+0x8c>)
 800e2a0:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800e2a2:	4b18      	ldr	r3, [pc, #96]	; (800e304 <dhcp_inc_pcb_refcount+0x8c>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d102      	bne.n	800e2b0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800e2aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ae:	e024      	b.n	800e2fa <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800e2b0:	4b14      	ldr	r3, [pc, #80]	; (800e304 <dhcp_inc_pcb_refcount+0x8c>)
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	7a5a      	ldrb	r2, [r3, #9]
 800e2b6:	4b13      	ldr	r3, [pc, #76]	; (800e304 <dhcp_inc_pcb_refcount+0x8c>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f042 0220 	orr.w	r2, r2, #32
 800e2be:	b2d2      	uxtb	r2, r2
 800e2c0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800e2c2:	4b10      	ldr	r3, [pc, #64]	; (800e304 <dhcp_inc_pcb_refcount+0x8c>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	2244      	movs	r2, #68	; 0x44
 800e2c8:	4912      	ldr	r1, [pc, #72]	; (800e314 <dhcp_inc_pcb_refcount+0x9c>)
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7ff fe34 	bl	800df38 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800e2d0:	4b0c      	ldr	r3, [pc, #48]	; (800e304 <dhcp_inc_pcb_refcount+0x8c>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2243      	movs	r2, #67	; 0x43
 800e2d6:	490f      	ldr	r1, [pc, #60]	; (800e314 <dhcp_inc_pcb_refcount+0x9c>)
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7ff feb5 	bl	800e048 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800e2de:	4b09      	ldr	r3, [pc, #36]	; (800e304 <dhcp_inc_pcb_refcount+0x8c>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	490c      	ldr	r1, [pc, #48]	; (800e318 <dhcp_inc_pcb_refcount+0xa0>)
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f7ff ff1c 	bl	800e124 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800e2ec:	4b04      	ldr	r3, [pc, #16]	; (800e300 <dhcp_inc_pcb_refcount+0x88>)
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	3301      	adds	r3, #1
 800e2f2:	b2da      	uxtb	r2, r3
 800e2f4:	4b02      	ldr	r3, [pc, #8]	; (800e300 <dhcp_inc_pcb_refcount+0x88>)
 800e2f6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800e2f8:	2300      	movs	r3, #0
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	20000560 	.word	0x20000560
 800e304:	2000055c 	.word	0x2000055c
 800e308:	0801598c 	.word	0x0801598c
 800e30c:	080159c4 	.word	0x080159c4
 800e310:	080159ec 	.word	0x080159ec
 800e314:	08016a9c 	.word	0x08016a9c
 800e318:	0800fb39 	.word	0x0800fb39

0800e31c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800e320:	4b0e      	ldr	r3, [pc, #56]	; (800e35c <dhcp_dec_pcb_refcount+0x40>)
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d105      	bne.n	800e334 <dhcp_dec_pcb_refcount+0x18>
 800e328:	4b0d      	ldr	r3, [pc, #52]	; (800e360 <dhcp_dec_pcb_refcount+0x44>)
 800e32a:	22ff      	movs	r2, #255	; 0xff
 800e32c:	490d      	ldr	r1, [pc, #52]	; (800e364 <dhcp_dec_pcb_refcount+0x48>)
 800e32e:	480e      	ldr	r0, [pc, #56]	; (800e368 <dhcp_dec_pcb_refcount+0x4c>)
 800e330:	f004 f91a 	bl	8012568 <iprintf>
  dhcp_pcb_refcount--;
 800e334:	4b09      	ldr	r3, [pc, #36]	; (800e35c <dhcp_dec_pcb_refcount+0x40>)
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	3b01      	subs	r3, #1
 800e33a:	b2da      	uxtb	r2, r3
 800e33c:	4b07      	ldr	r3, [pc, #28]	; (800e35c <dhcp_dec_pcb_refcount+0x40>)
 800e33e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800e340:	4b06      	ldr	r3, [pc, #24]	; (800e35c <dhcp_dec_pcb_refcount+0x40>)
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d107      	bne.n	800e358 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800e348:	4b08      	ldr	r3, [pc, #32]	; (800e36c <dhcp_dec_pcb_refcount+0x50>)
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7ff ff09 	bl	800e164 <udp_remove>
    dhcp_pcb = NULL;
 800e352:	4b06      	ldr	r3, [pc, #24]	; (800e36c <dhcp_dec_pcb_refcount+0x50>)
 800e354:	2200      	movs	r2, #0
 800e356:	601a      	str	r2, [r3, #0]
  }
}
 800e358:	bf00      	nop
 800e35a:	bd80      	pop	{r7, pc}
 800e35c:	20000560 	.word	0x20000560
 800e360:	0801598c 	.word	0x0801598c
 800e364:	08015a14 	.word	0x08015a14
 800e368:	080159ec 	.word	0x080159ec
 800e36c:	2000055c 	.word	0x2000055c

0800e370 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6a1b      	ldr	r3, [r3, #32]
 800e37c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e37e:	210c      	movs	r1, #12
 800e380:	68f8      	ldr	r0, [r7, #12]
 800e382:	f001 f81b 	bl	800f3bc <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e386:	4b06      	ldr	r3, [pc, #24]	; (800e3a0 <dhcp_handle_nak+0x30>)
 800e388:	4a05      	ldr	r2, [pc, #20]	; (800e3a0 <dhcp_handle_nak+0x30>)
 800e38a:	4905      	ldr	r1, [pc, #20]	; (800e3a0 <dhcp_handle_nak+0x30>)
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f7f8 fa13 	bl	80067b8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f000 fc0e 	bl	800ebb4 <dhcp_discover>
}
 800e398:	bf00      	nop
 800e39a:	3710      	adds	r7, #16
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	08016a9c 	.word	0x08016a9c

0800e3a4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b084      	sub	sp, #16
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6a1b      	ldr	r3, [r3, #32]
 800e3b0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800e3b2:	2108      	movs	r1, #8
 800e3b4:	68f8      	ldr	r0, [r7, #12]
 800e3b6:	f001 f801 	bl	800f3bc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	331c      	adds	r3, #28
 800e3be:	2200      	movs	r2, #0
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f002 fb00 	bl	80109c8 <etharp_query>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	799b      	ldrb	r3, [r3, #6]
 800e3d0:	2bff      	cmp	r3, #255	; 0xff
 800e3d2:	d005      	beq.n	800e3e0 <dhcp_check+0x3c>
    dhcp->tries++;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	799b      	ldrb	r3, [r3, #6]
 800e3d8:	3301      	adds	r3, #1
 800e3da:	b2da      	uxtb	r2, r3
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800e3e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800e3e4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e3e6:	893b      	ldrh	r3, [r7, #8]
 800e3e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e3ec:	4a06      	ldr	r2, [pc, #24]	; (800e408 <dhcp_check+0x64>)
 800e3ee:	fb82 1203 	smull	r1, r2, r2, r3
 800e3f2:	1152      	asrs	r2, r2, #5
 800e3f4:	17db      	asrs	r3, r3, #31
 800e3f6:	1ad3      	subs	r3, r2, r3
 800e3f8:	b29a      	uxth	r2, r3
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800e3fe:	bf00      	nop
 800e400:	3710      	adds	r7, #16
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	10624dd3 	.word	0x10624dd3

0800e40c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b084      	sub	sp, #16
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6a1b      	ldr	r3, [r3, #32]
 800e41a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800e41c:	4b0c      	ldr	r3, [pc, #48]	; (800e450 <dhcp_handle_offer+0x44>)
 800e41e:	789b      	ldrb	r3, [r3, #2]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d011      	beq.n	800e448 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2200      	movs	r2, #0
 800e428:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800e42a:	4b0a      	ldr	r3, [pc, #40]	; (800e454 <dhcp_handle_offer+0x48>)
 800e42c:	689b      	ldr	r3, [r3, #8]
 800e42e:	4618      	mov	r0, r3
 800e430:	f7f7 fb61 	bl	8005af6 <lwip_htonl>
 800e434:	4602      	mov	r2, r0
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	691a      	ldr	r2, [r3, #16]
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f000 f808 	bl	800e458 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800e448:	bf00      	nop
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}
 800e450:	200071a4 	.word	0x200071a4
 800e454:	200071ac 	.word	0x200071ac

0800e458 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800e458:	b5b0      	push	{r4, r5, r7, lr}
 800e45a:	b08a      	sub	sp, #40	; 0x28
 800e45c:	af02      	add	r7, sp, #8
 800e45e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d109      	bne.n	800e47a <dhcp_select+0x22>
 800e466:	4b71      	ldr	r3, [pc, #452]	; (800e62c <dhcp_select+0x1d4>)
 800e468:	f240 1277 	movw	r2, #375	; 0x177
 800e46c:	4970      	ldr	r1, [pc, #448]	; (800e630 <dhcp_select+0x1d8>)
 800e46e:	4871      	ldr	r0, [pc, #452]	; (800e634 <dhcp_select+0x1dc>)
 800e470:	f004 f87a 	bl	8012568 <iprintf>
 800e474:	f06f 030f 	mvn.w	r3, #15
 800e478:	e0d3      	b.n	800e622 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6a1b      	ldr	r3, [r3, #32]
 800e47e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800e480:	69bb      	ldr	r3, [r7, #24]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d109      	bne.n	800e49a <dhcp_select+0x42>
 800e486:	4b69      	ldr	r3, [pc, #420]	; (800e62c <dhcp_select+0x1d4>)
 800e488:	f240 1279 	movw	r2, #377	; 0x179
 800e48c:	496a      	ldr	r1, [pc, #424]	; (800e638 <dhcp_select+0x1e0>)
 800e48e:	4869      	ldr	r0, [pc, #420]	; (800e634 <dhcp_select+0x1dc>)
 800e490:	f004 f86a 	bl	8012568 <iprintf>
 800e494:	f06f 0305 	mvn.w	r3, #5
 800e498:	e0c3      	b.n	800e622 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800e49a:	2101      	movs	r1, #1
 800e49c:	69b8      	ldr	r0, [r7, #24]
 800e49e:	f000 ff8d 	bl	800f3bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800e4a2:	f107 030c 	add.w	r3, r7, #12
 800e4a6:	2203      	movs	r2, #3
 800e4a8:	69b9      	ldr	r1, [r7, #24]
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f001 fc10 	bl	800fcd0 <dhcp_create_msg>
 800e4b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	f000 8085 	beq.w	800e5c4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800e4ba:	697b      	ldr	r3, [r7, #20]
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e4c0:	89b8      	ldrh	r0, [r7, #12]
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e4c8:	2302      	movs	r3, #2
 800e4ca:	2239      	movs	r2, #57	; 0x39
 800e4cc:	f000 ff90 	bl	800f3f0 <dhcp_option>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800e4d4:	89b8      	ldrh	r0, [r7, #12]
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	f000 ffdf 	bl	800f4a4 <dhcp_option_short>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800e4ea:	89b8      	ldrh	r0, [r7, #12]
 800e4ec:	693b      	ldr	r3, [r7, #16]
 800e4ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e4f2:	2304      	movs	r3, #4
 800e4f4:	2232      	movs	r2, #50	; 0x32
 800e4f6:	f000 ff7b 	bl	800f3f0 <dhcp_option>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e4fe:	89bc      	ldrh	r4, [r7, #12]
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e506:	69bb      	ldr	r3, [r7, #24]
 800e508:	69db      	ldr	r3, [r3, #28]
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7f7 faf3 	bl	8005af6 <lwip_htonl>
 800e510:	4603      	mov	r3, r0
 800e512:	461a      	mov	r2, r3
 800e514:	4629      	mov	r1, r5
 800e516:	4620      	mov	r0, r4
 800e518:	f000 fff6 	bl	800f508 <dhcp_option_long>
 800e51c:	4603      	mov	r3, r0
 800e51e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800e520:	89b8      	ldrh	r0, [r7, #12]
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e528:	2304      	movs	r3, #4
 800e52a:	2236      	movs	r2, #54	; 0x36
 800e52c:	f000 ff60 	bl	800f3f0 <dhcp_option>
 800e530:	4603      	mov	r3, r0
 800e532:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800e534:	89bc      	ldrh	r4, [r7, #12]
 800e536:	693b      	ldr	r3, [r7, #16]
 800e538:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800e53c:	69bb      	ldr	r3, [r7, #24]
 800e53e:	699b      	ldr	r3, [r3, #24]
 800e540:	4618      	mov	r0, r3
 800e542:	f7f7 fad8 	bl	8005af6 <lwip_htonl>
 800e546:	4603      	mov	r3, r0
 800e548:	461a      	mov	r2, r3
 800e54a:	4629      	mov	r1, r5
 800e54c:	4620      	mov	r0, r4
 800e54e:	f000 ffdb 	bl	800f508 <dhcp_option_long>
 800e552:	4603      	mov	r3, r0
 800e554:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e556:	89b8      	ldrh	r0, [r7, #12]
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e55e:	2303      	movs	r3, #3
 800e560:	2237      	movs	r2, #55	; 0x37
 800e562:	f000 ff45 	bl	800f3f0 <dhcp_option>
 800e566:	4603      	mov	r3, r0
 800e568:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e56a:	2300      	movs	r3, #0
 800e56c:	77bb      	strb	r3, [r7, #30]
 800e56e:	e00e      	b.n	800e58e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800e570:	89b8      	ldrh	r0, [r7, #12]
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e578:	7fbb      	ldrb	r3, [r7, #30]
 800e57a:	4a30      	ldr	r2, [pc, #192]	; (800e63c <dhcp_select+0x1e4>)
 800e57c:	5cd3      	ldrb	r3, [r2, r3]
 800e57e:	461a      	mov	r2, r3
 800e580:	f000 ff6a 	bl	800f458 <dhcp_option_byte>
 800e584:	4603      	mov	r3, r0
 800e586:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800e588:	7fbb      	ldrb	r3, [r7, #30]
 800e58a:	3301      	adds	r3, #1
 800e58c:	77bb      	strb	r3, [r7, #30]
 800e58e:	7fbb      	ldrb	r3, [r7, #30]
 800e590:	2b02      	cmp	r3, #2
 800e592:	d9ed      	bls.n	800e570 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800e594:	89b8      	ldrh	r0, [r7, #12]
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	33f0      	adds	r3, #240	; 0xf0
 800e59a:	697a      	ldr	r2, [r7, #20]
 800e59c:	4619      	mov	r1, r3
 800e59e:	f001 fc6d 	bl	800fe7c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800e5a2:	4b27      	ldr	r3, [pc, #156]	; (800e640 <dhcp_select+0x1e8>)
 800e5a4:	6818      	ldr	r0, [r3, #0]
 800e5a6:	4b27      	ldr	r3, [pc, #156]	; (800e644 <dhcp_select+0x1ec>)
 800e5a8:	9301      	str	r3, [sp, #4]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	9300      	str	r3, [sp, #0]
 800e5ae:	2343      	movs	r3, #67	; 0x43
 800e5b0:	4a25      	ldr	r2, [pc, #148]	; (800e648 <dhcp_select+0x1f0>)
 800e5b2:	6979      	ldr	r1, [r7, #20]
 800e5b4:	f7ff fbda 	bl	800dd6c <udp_sendto_if_src>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800e5bc:	6978      	ldr	r0, [r7, #20]
 800e5be:	f7f8 fd5d 	bl	800707c <pbuf_free>
 800e5c2:	e001      	b.n	800e5c8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800e5c4:	23ff      	movs	r3, #255	; 0xff
 800e5c6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800e5c8:	69bb      	ldr	r3, [r7, #24]
 800e5ca:	799b      	ldrb	r3, [r3, #6]
 800e5cc:	2bff      	cmp	r3, #255	; 0xff
 800e5ce:	d005      	beq.n	800e5dc <dhcp_select+0x184>
    dhcp->tries++;
 800e5d0:	69bb      	ldr	r3, [r7, #24]
 800e5d2:	799b      	ldrb	r3, [r3, #6]
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	b2da      	uxtb	r2, r3
 800e5d8:	69bb      	ldr	r3, [r7, #24]
 800e5da:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800e5dc:	69bb      	ldr	r3, [r7, #24]
 800e5de:	799b      	ldrb	r3, [r3, #6]
 800e5e0:	2b05      	cmp	r3, #5
 800e5e2:	d80d      	bhi.n	800e600 <dhcp_select+0x1a8>
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	799b      	ldrb	r3, [r3, #6]
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	4093      	lsls	r3, r2
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	0152      	lsls	r2, r2, #5
 800e5f4:	1ad2      	subs	r2, r2, r3
 800e5f6:	0092      	lsls	r2, r2, #2
 800e5f8:	4413      	add	r3, r2
 800e5fa:	00db      	lsls	r3, r3, #3
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	e001      	b.n	800e604 <dhcp_select+0x1ac>
 800e600:	f64e 2360 	movw	r3, #60000	; 0xea60
 800e604:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800e606:	89fb      	ldrh	r3, [r7, #14]
 800e608:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e60c:	4a0f      	ldr	r2, [pc, #60]	; (800e64c <dhcp_select+0x1f4>)
 800e60e:	fb82 1203 	smull	r1, r2, r2, r3
 800e612:	1152      	asrs	r2, r2, #5
 800e614:	17db      	asrs	r3, r3, #31
 800e616:	1ad3      	subs	r3, r2, r3
 800e618:	b29a      	uxth	r2, r3
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800e61e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e622:	4618      	mov	r0, r3
 800e624:	3720      	adds	r7, #32
 800e626:	46bd      	mov	sp, r7
 800e628:	bdb0      	pop	{r4, r5, r7, pc}
 800e62a:	bf00      	nop
 800e62c:	0801598c 	.word	0x0801598c
 800e630:	08015a38 	.word	0x08015a38
 800e634:	080159ec 	.word	0x080159ec
 800e638:	08015a54 	.word	0x08015a54
 800e63c:	20000014 	.word	0x20000014
 800e640:	2000055c 	.word	0x2000055c
 800e644:	08016a9c 	.word	0x08016a9c
 800e648:	08016aa0 	.word	0x08016aa0
 800e64c:	10624dd3 	.word	0x10624dd3

0800e650 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b082      	sub	sp, #8
 800e654:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800e656:	4b27      	ldr	r3, [pc, #156]	; (800e6f4 <dhcp_coarse_tmr+0xa4>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	607b      	str	r3, [r7, #4]
 800e65c:	e042      	b.n	800e6e4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6a1b      	ldr	r3, [r3, #32]
 800e662:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d039      	beq.n	800e6de <dhcp_coarse_tmr+0x8e>
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	795b      	ldrb	r3, [r3, #5]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d035      	beq.n	800e6de <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	8a9b      	ldrh	r3, [r3, #20]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d012      	beq.n	800e6a0 <dhcp_coarse_tmr+0x50>
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	8a5b      	ldrh	r3, [r3, #18]
 800e67e:	3301      	adds	r3, #1
 800e680:	b29a      	uxth	r2, r3
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	825a      	strh	r2, [r3, #18]
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	8a5a      	ldrh	r2, [r3, #18]
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	8a9b      	ldrh	r3, [r3, #20]
 800e68e:	429a      	cmp	r2, r3
 800e690:	d106      	bne.n	800e6a0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f000 fdf8 	bl	800f288 <dhcp_release_and_stop>
        dhcp_start(netif);
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f000 f96b 	bl	800e974 <dhcp_start>
 800e69e:	e01e      	b.n	800e6de <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	8a1b      	ldrh	r3, [r3, #16]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d00b      	beq.n	800e6c0 <dhcp_coarse_tmr+0x70>
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	8a1b      	ldrh	r3, [r3, #16]
 800e6ac:	1e5a      	subs	r2, r3, #1
 800e6ae:	b291      	uxth	r1, r2
 800e6b0:	683a      	ldr	r2, [r7, #0]
 800e6b2:	8211      	strh	r1, [r2, #16]
 800e6b4:	2b01      	cmp	r3, #1
 800e6b6:	d103      	bne.n	800e6c0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f000 f8c7 	bl	800e84c <dhcp_t2_timeout>
 800e6be:	e00e      	b.n	800e6de <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	89db      	ldrh	r3, [r3, #14]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d00a      	beq.n	800e6de <dhcp_coarse_tmr+0x8e>
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	89db      	ldrh	r3, [r3, #14]
 800e6cc:	1e5a      	subs	r2, r3, #1
 800e6ce:	b291      	uxth	r1, r2
 800e6d0:	683a      	ldr	r2, [r7, #0]
 800e6d2:	81d1      	strh	r1, [r2, #14]
 800e6d4:	2b01      	cmp	r3, #1
 800e6d6:	d102      	bne.n	800e6de <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f000 f888 	bl	800e7ee <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	607b      	str	r3, [r7, #4]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d1b9      	bne.n	800e65e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800e6ea:	bf00      	nop
 800e6ec:	3708      	adds	r7, #8
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	20007178 	.word	0x20007178

0800e6f8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800e6fe:	4b16      	ldr	r3, [pc, #88]	; (800e758 <dhcp_fine_tmr+0x60>)
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	607b      	str	r3, [r7, #4]
 800e704:	e020      	b.n	800e748 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6a1b      	ldr	r3, [r3, #32]
 800e70a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d017      	beq.n	800e742 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	891b      	ldrh	r3, [r3, #8]
 800e716:	2b01      	cmp	r3, #1
 800e718:	d906      	bls.n	800e728 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	891b      	ldrh	r3, [r3, #8]
 800e71e:	3b01      	subs	r3, #1
 800e720:	b29a      	uxth	r2, r3
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	811a      	strh	r2, [r3, #8]
 800e726:	e00c      	b.n	800e742 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	891b      	ldrh	r3, [r3, #8]
 800e72c:	2b01      	cmp	r3, #1
 800e72e:	d108      	bne.n	800e742 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	891b      	ldrh	r3, [r3, #8]
 800e734:	3b01      	subs	r3, #1
 800e736:	b29a      	uxth	r2, r3
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 f80d 	bl	800e75c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	607b      	str	r3, [r7, #4]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d1db      	bne.n	800e706 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800e74e:	bf00      	nop
 800e750:	3708      	adds	r7, #8
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	20007178 	.word	0x20007178

0800e75c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b084      	sub	sp, #16
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6a1b      	ldr	r3, [r3, #32]
 800e768:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	795b      	ldrb	r3, [r3, #5]
 800e76e:	2b0c      	cmp	r3, #12
 800e770:	d003      	beq.n	800e77a <dhcp_timeout+0x1e>
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	795b      	ldrb	r3, [r3, #5]
 800e776:	2b06      	cmp	r3, #6
 800e778:	d103      	bne.n	800e782 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f000 fa1a 	bl	800ebb4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800e780:	e031      	b.n	800e7e6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	795b      	ldrb	r3, [r3, #5]
 800e786:	2b01      	cmp	r3, #1
 800e788:	d10e      	bne.n	800e7a8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	799b      	ldrb	r3, [r3, #6]
 800e78e:	2b05      	cmp	r3, #5
 800e790:	d803      	bhi.n	800e79a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f7ff fe60 	bl	800e458 <dhcp_select>
}
 800e798:	e025      	b.n	800e7e6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 fd74 	bl	800f288 <dhcp_release_and_stop>
      dhcp_start(netif);
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f000 f8e7 	bl	800e974 <dhcp_start>
}
 800e7a6:	e01e      	b.n	800e7e6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	795b      	ldrb	r3, [r3, #5]
 800e7ac:	2b08      	cmp	r3, #8
 800e7ae:	d10b      	bne.n	800e7c8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	799b      	ldrb	r3, [r3, #6]
 800e7b4:	2b01      	cmp	r3, #1
 800e7b6:	d803      	bhi.n	800e7c0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800e7b8:	6878      	ldr	r0, [r7, #4]
 800e7ba:	f7ff fdf3 	bl	800e3a4 <dhcp_check>
}
 800e7be:	e012      	b.n	800e7e6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800e7c0:	6878      	ldr	r0, [r7, #4]
 800e7c2:	f000 fa99 	bl	800ecf8 <dhcp_bind>
}
 800e7c6:	e00e      	b.n	800e7e6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	795b      	ldrb	r3, [r3, #5]
 800e7cc:	2b03      	cmp	r3, #3
 800e7ce:	d10a      	bne.n	800e7e6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	799b      	ldrb	r3, [r3, #6]
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d803      	bhi.n	800e7e0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f000 fc9f 	bl	800f11c <dhcp_reboot>
}
 800e7de:	e002      	b.n	800e7e6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f000 f9e7 	bl	800ebb4 <dhcp_discover>
}
 800e7e6:	bf00      	nop
 800e7e8:	3710      	adds	r7, #16
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}

0800e7ee <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800e7ee:	b580      	push	{r7, lr}
 800e7f0:	b084      	sub	sp, #16
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6a1b      	ldr	r3, [r3, #32]
 800e7fa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	795b      	ldrb	r3, [r3, #5]
 800e800:	2b01      	cmp	r3, #1
 800e802:	d007      	beq.n	800e814 <dhcp_t1_timeout+0x26>
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	795b      	ldrb	r3, [r3, #5]
 800e808:	2b0a      	cmp	r3, #10
 800e80a:	d003      	beq.n	800e814 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e810:	2b05      	cmp	r3, #5
 800e812:	d117      	bne.n	800e844 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 fb49 	bl	800eeac <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	899b      	ldrh	r3, [r3, #12]
 800e81e:	461a      	mov	r2, r3
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	8a5b      	ldrh	r3, [r3, #18]
 800e824:	1ad3      	subs	r3, r2, r3
 800e826:	2b01      	cmp	r3, #1
 800e828:	dd0c      	ble.n	800e844 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	899b      	ldrh	r3, [r3, #12]
 800e82e:	461a      	mov	r2, r3
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	8a5b      	ldrh	r3, [r3, #18]
 800e834:	1ad3      	subs	r3, r2, r3
 800e836:	2b00      	cmp	r3, #0
 800e838:	da00      	bge.n	800e83c <dhcp_t1_timeout+0x4e>
 800e83a:	3301      	adds	r3, #1
 800e83c:	105b      	asrs	r3, r3, #1
 800e83e:	b29a      	uxth	r2, r3
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800e844:	bf00      	nop
 800e846:	3710      	adds	r7, #16
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6a1b      	ldr	r3, [r3, #32]
 800e858:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	795b      	ldrb	r3, [r3, #5]
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d00b      	beq.n	800e87a <dhcp_t2_timeout+0x2e>
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	795b      	ldrb	r3, [r3, #5]
 800e866:	2b0a      	cmp	r3, #10
 800e868:	d007      	beq.n	800e87a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e86e:	2b05      	cmp	r3, #5
 800e870:	d003      	beq.n	800e87a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	795b      	ldrb	r3, [r3, #5]
 800e876:	2b04      	cmp	r3, #4
 800e878:	d117      	bne.n	800e8aa <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f000 fbb2 	bl	800efe4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	8a9b      	ldrh	r3, [r3, #20]
 800e884:	461a      	mov	r2, r3
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	8a5b      	ldrh	r3, [r3, #18]
 800e88a:	1ad3      	subs	r3, r2, r3
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	dd0c      	ble.n	800e8aa <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	8a9b      	ldrh	r3, [r3, #20]
 800e894:	461a      	mov	r2, r3
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	8a5b      	ldrh	r3, [r3, #18]
 800e89a:	1ad3      	subs	r3, r2, r3
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	da00      	bge.n	800e8a2 <dhcp_t2_timeout+0x56>
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	105b      	asrs	r3, r3, #1
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800e8aa:	bf00      	nop
 800e8ac:	3710      	adds	r7, #16
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
	...

0800e8b4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b084      	sub	sp, #16
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
 800e8bc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6a1b      	ldr	r3, [r3, #32]
 800e8c2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2200      	movs	r2, #0
 800e8c8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800e8d0:	4b26      	ldr	r3, [pc, #152]	; (800e96c <dhcp_handle_ack+0xb8>)
 800e8d2:	78db      	ldrb	r3, [r3, #3]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d003      	beq.n	800e8e0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800e8d8:	4b25      	ldr	r3, [pc, #148]	; (800e970 <dhcp_handle_ack+0xbc>)
 800e8da:	68da      	ldr	r2, [r3, #12]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800e8e0:	4b22      	ldr	r3, [pc, #136]	; (800e96c <dhcp_handle_ack+0xb8>)
 800e8e2:	791b      	ldrb	r3, [r3, #4]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d004      	beq.n	800e8f2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800e8e8:	4b21      	ldr	r3, [pc, #132]	; (800e970 <dhcp_handle_ack+0xbc>)
 800e8ea:	691a      	ldr	r2, [r3, #16]
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	62da      	str	r2, [r3, #44]	; 0x2c
 800e8f0:	e004      	b.n	800e8fc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8f6:	085a      	lsrs	r2, r3, #1
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800e8fc:	4b1b      	ldr	r3, [pc, #108]	; (800e96c <dhcp_handle_ack+0xb8>)
 800e8fe:	795b      	ldrb	r3, [r3, #5]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d004      	beq.n	800e90e <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800e904:	4b1a      	ldr	r3, [pc, #104]	; (800e970 <dhcp_handle_ack+0xbc>)
 800e906:	695a      	ldr	r2, [r3, #20]
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	631a      	str	r2, [r3, #48]	; 0x30
 800e90c:	e007      	b.n	800e91e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e912:	4613      	mov	r3, r2
 800e914:	00db      	lsls	r3, r3, #3
 800e916:	1a9b      	subs	r3, r3, r2
 800e918:	08da      	lsrs	r2, r3, #3
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	691a      	ldr	r2, [r3, #16]
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800e926:	4b11      	ldr	r3, [pc, #68]	; (800e96c <dhcp_handle_ack+0xb8>)
 800e928:	799b      	ldrb	r3, [r3, #6]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d00b      	beq.n	800e946 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800e92e:	4b10      	ldr	r3, [pc, #64]	; (800e970 <dhcp_handle_ack+0xbc>)
 800e930:	699b      	ldr	r3, [r3, #24]
 800e932:	4618      	mov	r0, r3
 800e934:	f7f7 f8df 	bl	8005af6 <lwip_htonl>
 800e938:	4602      	mov	r2, r0
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2201      	movs	r2, #1
 800e942:	71da      	strb	r2, [r3, #7]
 800e944:	e002      	b.n	800e94c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2200      	movs	r2, #0
 800e94a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800e94c:	4b07      	ldr	r3, [pc, #28]	; (800e96c <dhcp_handle_ack+0xb8>)
 800e94e:	79db      	ldrb	r3, [r3, #7]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d007      	beq.n	800e964 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800e954:	4b06      	ldr	r3, [pc, #24]	; (800e970 <dhcp_handle_ack+0xbc>)
 800e956:	69db      	ldr	r3, [r3, #28]
 800e958:	4618      	mov	r0, r3
 800e95a:	f7f7 f8cc 	bl	8005af6 <lwip_htonl>
 800e95e:	4602      	mov	r2, r0
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800e964:	bf00      	nop
 800e966:	3710      	adds	r7, #16
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}
 800e96c:	200071a4 	.word	0x200071a4
 800e970:	200071ac 	.word	0x200071ac

0800e974 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d109      	bne.n	800e996 <dhcp_start+0x22>
 800e982:	4b37      	ldr	r3, [pc, #220]	; (800ea60 <dhcp_start+0xec>)
 800e984:	f240 22e7 	movw	r2, #743	; 0x2e7
 800e988:	4936      	ldr	r1, [pc, #216]	; (800ea64 <dhcp_start+0xf0>)
 800e98a:	4837      	ldr	r0, [pc, #220]	; (800ea68 <dhcp_start+0xf4>)
 800e98c:	f003 fdec 	bl	8012568 <iprintf>
 800e990:	f06f 030f 	mvn.w	r3, #15
 800e994:	e060      	b.n	800ea58 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e99c:	f003 0301 	and.w	r3, r3, #1
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d109      	bne.n	800e9b8 <dhcp_start+0x44>
 800e9a4:	4b2e      	ldr	r3, [pc, #184]	; (800ea60 <dhcp_start+0xec>)
 800e9a6:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800e9aa:	4930      	ldr	r1, [pc, #192]	; (800ea6c <dhcp_start+0xf8>)
 800e9ac:	482e      	ldr	r0, [pc, #184]	; (800ea68 <dhcp_start+0xf4>)
 800e9ae:	f003 fddb 	bl	8012568 <iprintf>
 800e9b2:	f06f 030f 	mvn.w	r3, #15
 800e9b6:	e04f      	b.n	800ea58 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6a1b      	ldr	r3, [r3, #32]
 800e9bc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e9c2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800e9c6:	d202      	bcs.n	800e9ce <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800e9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e9cc:	e044      	b.n	800ea58 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d10d      	bne.n	800e9f0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800e9d4:	2034      	movs	r0, #52	; 0x34
 800e9d6:	f7f7 fb97 	bl	8006108 <mem_malloc>
 800e9da:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d102      	bne.n	800e9e8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800e9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800e9e6:	e037      	b.n	800ea58 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	68fa      	ldr	r2, [r7, #12]
 800e9ec:	621a      	str	r2, [r3, #32]
 800e9ee:	e005      	b.n	800e9fc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	791b      	ldrb	r3, [r3, #4]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d001      	beq.n	800e9fc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e9f8:	f7ff fc90 	bl	800e31c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800e9fc:	2234      	movs	r2, #52	; 0x34
 800e9fe:	2100      	movs	r1, #0
 800ea00:	68f8      	ldr	r0, [r7, #12]
 800ea02:	f003 fda9 	bl	8012558 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800ea06:	f7ff fc37 	bl	800e278 <dhcp_inc_pcb_refcount>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d002      	beq.n	800ea16 <dhcp_start+0xa2>
    return ERR_MEM;
 800ea10:	f04f 33ff 	mov.w	r3, #4294967295
 800ea14:	e020      	b.n	800ea58 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2201      	movs	r2, #1
 800ea1a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea22:	f003 0304 	and.w	r3, r3, #4
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d105      	bne.n	800ea36 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800ea2a:	2102      	movs	r1, #2
 800ea2c:	68f8      	ldr	r0, [r7, #12]
 800ea2e:	f000 fcc5 	bl	800f3bc <dhcp_set_state>
    return ERR_OK;
 800ea32:	2300      	movs	r3, #0
 800ea34:	e010      	b.n	800ea58 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f000 f8bc 	bl	800ebb4 <dhcp_discover>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800ea40:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d005      	beq.n	800ea54 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f000 fc1d 	bl	800f288 <dhcp_release_and_stop>
    return ERR_MEM;
 800ea4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ea52:	e001      	b.n	800ea58 <dhcp_start+0xe4>
  }
  return result;
 800ea54:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3710      	adds	r7, #16
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	0801598c 	.word	0x0801598c
 800ea64:	08015a70 	.word	0x08015a70
 800ea68:	080159ec 	.word	0x080159ec
 800ea6c:	08015ab4 	.word	0x08015ab4

0800ea70 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b084      	sub	sp, #16
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d107      	bne.n	800ea90 <dhcp_arp_reply+0x20>
 800ea80:	4b0e      	ldr	r3, [pc, #56]	; (800eabc <dhcp_arp_reply+0x4c>)
 800ea82:	f240 328b 	movw	r2, #907	; 0x38b
 800ea86:	490e      	ldr	r1, [pc, #56]	; (800eac0 <dhcp_arp_reply+0x50>)
 800ea88:	480e      	ldr	r0, [pc, #56]	; (800eac4 <dhcp_arp_reply+0x54>)
 800ea8a:	f003 fd6d 	bl	8012568 <iprintf>
 800ea8e:	e012      	b.n	800eab6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6a1b      	ldr	r3, [r3, #32]
 800ea94:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d00c      	beq.n	800eab6 <dhcp_arp_reply+0x46>
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	795b      	ldrb	r3, [r3, #5]
 800eaa0:	2b08      	cmp	r3, #8
 800eaa2:	d108      	bne.n	800eab6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	681a      	ldr	r2, [r3, #0]
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	69db      	ldr	r3, [r3, #28]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d102      	bne.n	800eab6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 f809 	bl	800eac8 <dhcp_decline>
    }
  }
}
 800eab6:	3710      	adds	r7, #16
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}
 800eabc:	0801598c 	.word	0x0801598c
 800eac0:	08015a70 	.word	0x08015a70
 800eac4:	080159ec 	.word	0x080159ec

0800eac8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800eac8:	b5b0      	push	{r4, r5, r7, lr}
 800eaca:	b08a      	sub	sp, #40	; 0x28
 800eacc:	af02      	add	r7, sp, #8
 800eace:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6a1b      	ldr	r3, [r3, #32]
 800ead4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800ead6:	210c      	movs	r1, #12
 800ead8:	69b8      	ldr	r0, [r7, #24]
 800eada:	f000 fc6f 	bl	800f3bc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800eade:	f107 030c 	add.w	r3, r7, #12
 800eae2:	2204      	movs	r2, #4
 800eae4:	69b9      	ldr	r1, [r7, #24]
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f001 f8f2 	bl	800fcd0 <dhcp_create_msg>
 800eaec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d035      	beq.n	800eb60 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800eafa:	89b8      	ldrh	r0, [r7, #12]
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eb02:	2304      	movs	r3, #4
 800eb04:	2232      	movs	r2, #50	; 0x32
 800eb06:	f000 fc73 	bl	800f3f0 <dhcp_option>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800eb0e:	89bc      	ldrh	r4, [r7, #12]
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800eb16:	69bb      	ldr	r3, [r7, #24]
 800eb18:	69db      	ldr	r3, [r3, #28]
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7f6 ffeb 	bl	8005af6 <lwip_htonl>
 800eb20:	4603      	mov	r3, r0
 800eb22:	461a      	mov	r2, r3
 800eb24:	4629      	mov	r1, r5
 800eb26:	4620      	mov	r0, r4
 800eb28:	f000 fcee 	bl	800f508 <dhcp_option_long>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800eb30:	89b8      	ldrh	r0, [r7, #12]
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	33f0      	adds	r3, #240	; 0xf0
 800eb36:	697a      	ldr	r2, [r7, #20]
 800eb38:	4619      	mov	r1, r3
 800eb3a:	f001 f99f 	bl	800fe7c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800eb3e:	4b19      	ldr	r3, [pc, #100]	; (800eba4 <dhcp_decline+0xdc>)
 800eb40:	6818      	ldr	r0, [r3, #0]
 800eb42:	4b19      	ldr	r3, [pc, #100]	; (800eba8 <dhcp_decline+0xe0>)
 800eb44:	9301      	str	r3, [sp, #4]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	9300      	str	r3, [sp, #0]
 800eb4a:	2343      	movs	r3, #67	; 0x43
 800eb4c:	4a17      	ldr	r2, [pc, #92]	; (800ebac <dhcp_decline+0xe4>)
 800eb4e:	6979      	ldr	r1, [r7, #20]
 800eb50:	f7ff f90c 	bl	800dd6c <udp_sendto_if_src>
 800eb54:	4603      	mov	r3, r0
 800eb56:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800eb58:	6978      	ldr	r0, [r7, #20]
 800eb5a:	f7f8 fa8f 	bl	800707c <pbuf_free>
 800eb5e:	e001      	b.n	800eb64 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800eb60:	23ff      	movs	r3, #255	; 0xff
 800eb62:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800eb64:	69bb      	ldr	r3, [r7, #24]
 800eb66:	799b      	ldrb	r3, [r3, #6]
 800eb68:	2bff      	cmp	r3, #255	; 0xff
 800eb6a:	d005      	beq.n	800eb78 <dhcp_decline+0xb0>
    dhcp->tries++;
 800eb6c:	69bb      	ldr	r3, [r7, #24]
 800eb6e:	799b      	ldrb	r3, [r3, #6]
 800eb70:	3301      	adds	r3, #1
 800eb72:	b2da      	uxtb	r2, r3
 800eb74:	69bb      	ldr	r3, [r7, #24]
 800eb76:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800eb78:	f242 7310 	movw	r3, #10000	; 0x2710
 800eb7c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800eb7e:	89fb      	ldrh	r3, [r7, #14]
 800eb80:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800eb84:	4a0a      	ldr	r2, [pc, #40]	; (800ebb0 <dhcp_decline+0xe8>)
 800eb86:	fb82 1203 	smull	r1, r2, r2, r3
 800eb8a:	1152      	asrs	r2, r2, #5
 800eb8c:	17db      	asrs	r3, r3, #31
 800eb8e:	1ad3      	subs	r3, r2, r3
 800eb90:	b29a      	uxth	r2, r3
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800eb96:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3720      	adds	r7, #32
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bdb0      	pop	{r4, r5, r7, pc}
 800eba2:	bf00      	nop
 800eba4:	2000055c 	.word	0x2000055c
 800eba8:	08016a9c 	.word	0x08016a9c
 800ebac:	08016aa0 	.word	0x08016aa0
 800ebb0:	10624dd3 	.word	0x10624dd3

0800ebb4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b08a      	sub	sp, #40	; 0x28
 800ebb8:	af02      	add	r7, sp, #8
 800ebba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6a1b      	ldr	r3, [r3, #32]
 800ebc0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800ebc6:	69bb      	ldr	r3, [r7, #24]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800ebcc:	2106      	movs	r1, #6
 800ebce:	69b8      	ldr	r0, [r7, #24]
 800ebd0:	f000 fbf4 	bl	800f3bc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800ebd4:	f107 0308 	add.w	r3, r7, #8
 800ebd8:	2201      	movs	r2, #1
 800ebda:	69b9      	ldr	r1, [r7, #24]
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f001 f877 	bl	800fcd0 <dhcp_create_msg>
 800ebe2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d04b      	beq.n	800ec82 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ebea:	693b      	ldr	r3, [r7, #16]
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ebf0:	8938      	ldrh	r0, [r7, #8]
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ebf8:	2302      	movs	r3, #2
 800ebfa:	2239      	movs	r2, #57	; 0x39
 800ebfc:	f000 fbf8 	bl	800f3f0 <dhcp_option>
 800ec00:	4603      	mov	r3, r0
 800ec02:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ec04:	8938      	ldrh	r0, [r7, #8]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ec10:	461a      	mov	r2, r3
 800ec12:	f000 fc47 	bl	800f4a4 <dhcp_option_short>
 800ec16:	4603      	mov	r3, r0
 800ec18:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ec1a:	8938      	ldrh	r0, [r7, #8]
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ec22:	2303      	movs	r3, #3
 800ec24:	2237      	movs	r2, #55	; 0x37
 800ec26:	f000 fbe3 	bl	800f3f0 <dhcp_option>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ec2e:	2300      	movs	r3, #0
 800ec30:	77fb      	strb	r3, [r7, #31]
 800ec32:	e00e      	b.n	800ec52 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ec34:	8938      	ldrh	r0, [r7, #8]
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ec3c:	7ffb      	ldrb	r3, [r7, #31]
 800ec3e:	4a29      	ldr	r2, [pc, #164]	; (800ece4 <dhcp_discover+0x130>)
 800ec40:	5cd3      	ldrb	r3, [r2, r3]
 800ec42:	461a      	mov	r2, r3
 800ec44:	f000 fc08 	bl	800f458 <dhcp_option_byte>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ec4c:	7ffb      	ldrb	r3, [r7, #31]
 800ec4e:	3301      	adds	r3, #1
 800ec50:	77fb      	strb	r3, [r7, #31]
 800ec52:	7ffb      	ldrb	r3, [r7, #31]
 800ec54:	2b02      	cmp	r3, #2
 800ec56:	d9ed      	bls.n	800ec34 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ec58:	8938      	ldrh	r0, [r7, #8]
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	33f0      	adds	r3, #240	; 0xf0
 800ec5e:	693a      	ldr	r2, [r7, #16]
 800ec60:	4619      	mov	r1, r3
 800ec62:	f001 f90b 	bl	800fe7c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ec66:	4b20      	ldr	r3, [pc, #128]	; (800ece8 <dhcp_discover+0x134>)
 800ec68:	6818      	ldr	r0, [r3, #0]
 800ec6a:	4b20      	ldr	r3, [pc, #128]	; (800ecec <dhcp_discover+0x138>)
 800ec6c:	9301      	str	r3, [sp, #4]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	9300      	str	r3, [sp, #0]
 800ec72:	2343      	movs	r3, #67	; 0x43
 800ec74:	4a1e      	ldr	r2, [pc, #120]	; (800ecf0 <dhcp_discover+0x13c>)
 800ec76:	6939      	ldr	r1, [r7, #16]
 800ec78:	f7ff f878 	bl	800dd6c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800ec7c:	6938      	ldr	r0, [r7, #16]
 800ec7e:	f7f8 f9fd 	bl	800707c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	799b      	ldrb	r3, [r3, #6]
 800ec86:	2bff      	cmp	r3, #255	; 0xff
 800ec88:	d005      	beq.n	800ec96 <dhcp_discover+0xe2>
    dhcp->tries++;
 800ec8a:	69bb      	ldr	r3, [r7, #24]
 800ec8c:	799b      	ldrb	r3, [r3, #6]
 800ec8e:	3301      	adds	r3, #1
 800ec90:	b2da      	uxtb	r2, r3
 800ec92:	69bb      	ldr	r3, [r7, #24]
 800ec94:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800ec96:	69bb      	ldr	r3, [r7, #24]
 800ec98:	799b      	ldrb	r3, [r3, #6]
 800ec9a:	2b05      	cmp	r3, #5
 800ec9c:	d80d      	bhi.n	800ecba <dhcp_discover+0x106>
 800ec9e:	69bb      	ldr	r3, [r7, #24]
 800eca0:	799b      	ldrb	r3, [r3, #6]
 800eca2:	461a      	mov	r2, r3
 800eca4:	2301      	movs	r3, #1
 800eca6:	4093      	lsls	r3, r2
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	461a      	mov	r2, r3
 800ecac:	0152      	lsls	r2, r2, #5
 800ecae:	1ad2      	subs	r2, r2, r3
 800ecb0:	0092      	lsls	r2, r2, #2
 800ecb2:	4413      	add	r3, r2
 800ecb4:	00db      	lsls	r3, r3, #3
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	e001      	b.n	800ecbe <dhcp_discover+0x10a>
 800ecba:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ecbe:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ecc0:	897b      	ldrh	r3, [r7, #10]
 800ecc2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ecc6:	4a0b      	ldr	r2, [pc, #44]	; (800ecf4 <dhcp_discover+0x140>)
 800ecc8:	fb82 1203 	smull	r1, r2, r2, r3
 800eccc:	1152      	asrs	r2, r2, #5
 800ecce:	17db      	asrs	r3, r3, #31
 800ecd0:	1ad3      	subs	r3, r2, r3
 800ecd2:	b29a      	uxth	r2, r3
 800ecd4:	69bb      	ldr	r3, [r7, #24]
 800ecd6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ecd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3720      	adds	r7, #32
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	20000014 	.word	0x20000014
 800ece8:	2000055c 	.word	0x2000055c
 800ecec:	08016a9c 	.word	0x08016a9c
 800ecf0:	08016aa0 	.word	0x08016aa0
 800ecf4:	10624dd3 	.word	0x10624dd3

0800ecf8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b088      	sub	sp, #32
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d107      	bne.n	800ed16 <dhcp_bind+0x1e>
 800ed06:	4b64      	ldr	r3, [pc, #400]	; (800ee98 <dhcp_bind+0x1a0>)
 800ed08:	f240 4215 	movw	r2, #1045	; 0x415
 800ed0c:	4963      	ldr	r1, [pc, #396]	; (800ee9c <dhcp_bind+0x1a4>)
 800ed0e:	4864      	ldr	r0, [pc, #400]	; (800eea0 <dhcp_bind+0x1a8>)
 800ed10:	f003 fc2a 	bl	8012568 <iprintf>
 800ed14:	e0bc      	b.n	800ee90 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6a1b      	ldr	r3, [r3, #32]
 800ed1a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800ed1c:	69bb      	ldr	r3, [r7, #24]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d107      	bne.n	800ed32 <dhcp_bind+0x3a>
 800ed22:	4b5d      	ldr	r3, [pc, #372]	; (800ee98 <dhcp_bind+0x1a0>)
 800ed24:	f240 4217 	movw	r2, #1047	; 0x417
 800ed28:	495e      	ldr	r1, [pc, #376]	; (800eea4 <dhcp_bind+0x1ac>)
 800ed2a:	485d      	ldr	r0, [pc, #372]	; (800eea0 <dhcp_bind+0x1a8>)
 800ed2c:	f003 fc1c 	bl	8012568 <iprintf>
 800ed30:	e0ae      	b.n	800ee90 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800ed32:	69bb      	ldr	r3, [r7, #24]
 800ed34:	2200      	movs	r2, #0
 800ed36:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800ed38:	69bb      	ldr	r3, [r7, #24]
 800ed3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed40:	d019      	beq.n	800ed76 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ed42:	69bb      	ldr	r3, [r7, #24]
 800ed44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed46:	331e      	adds	r3, #30
 800ed48:	4a57      	ldr	r2, [pc, #348]	; (800eea8 <dhcp_bind+0x1b0>)
 800ed4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed4e:	095b      	lsrs	r3, r3, #5
 800ed50:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ed52:	69fb      	ldr	r3, [r7, #28]
 800ed54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed58:	d302      	bcc.n	800ed60 <dhcp_bind+0x68>
      timeout = 0xffff;
 800ed5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed5e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	b29a      	uxth	r2, r3
 800ed64:	69bb      	ldr	r3, [r7, #24]
 800ed66:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800ed68:	69bb      	ldr	r3, [r7, #24]
 800ed6a:	8a9b      	ldrh	r3, [r3, #20]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d102      	bne.n	800ed76 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	2201      	movs	r2, #1
 800ed74:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed7e:	d01d      	beq.n	800edbc <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ed80:	69bb      	ldr	r3, [r7, #24]
 800ed82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed84:	331e      	adds	r3, #30
 800ed86:	4a48      	ldr	r2, [pc, #288]	; (800eea8 <dhcp_bind+0x1b0>)
 800ed88:	fba2 2303 	umull	r2, r3, r2, r3
 800ed8c:	095b      	lsrs	r3, r3, #5
 800ed8e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed96:	d302      	bcc.n	800ed9e <dhcp_bind+0xa6>
      timeout = 0xffff;
 800ed98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed9c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800ed9e:	69fb      	ldr	r3, [r7, #28]
 800eda0:	b29a      	uxth	r2, r3
 800eda2:	69bb      	ldr	r3, [r7, #24]
 800eda4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800eda6:	69bb      	ldr	r3, [r7, #24]
 800eda8:	895b      	ldrh	r3, [r3, #10]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d102      	bne.n	800edb4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800edae:	69bb      	ldr	r3, [r7, #24]
 800edb0:	2201      	movs	r2, #1
 800edb2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800edb4:	69bb      	ldr	r3, [r7, #24]
 800edb6:	895a      	ldrh	r2, [r3, #10]
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800edbc:	69bb      	ldr	r3, [r7, #24]
 800edbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edc4:	d01d      	beq.n	800ee02 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edca:	331e      	adds	r3, #30
 800edcc:	4a36      	ldr	r2, [pc, #216]	; (800eea8 <dhcp_bind+0x1b0>)
 800edce:	fba2 2303 	umull	r2, r3, r2, r3
 800edd2:	095b      	lsrs	r3, r3, #5
 800edd4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800edd6:	69fb      	ldr	r3, [r7, #28]
 800edd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eddc:	d302      	bcc.n	800ede4 <dhcp_bind+0xec>
      timeout = 0xffff;
 800edde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ede2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	b29a      	uxth	r2, r3
 800ede8:	69bb      	ldr	r3, [r7, #24]
 800edea:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800edec:	69bb      	ldr	r3, [r7, #24]
 800edee:	899b      	ldrh	r3, [r3, #12]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d102      	bne.n	800edfa <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800edf4:	69bb      	ldr	r3, [r7, #24]
 800edf6:	2201      	movs	r2, #1
 800edf8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	899a      	ldrh	r2, [r3, #12]
 800edfe:	69bb      	ldr	r3, [r7, #24]
 800ee00:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800ee02:	69bb      	ldr	r3, [r7, #24]
 800ee04:	895a      	ldrh	r2, [r3, #10]
 800ee06:	69bb      	ldr	r3, [r7, #24]
 800ee08:	899b      	ldrh	r3, [r3, #12]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d306      	bcc.n	800ee1c <dhcp_bind+0x124>
 800ee0e:	69bb      	ldr	r3, [r7, #24]
 800ee10:	899b      	ldrh	r3, [r3, #12]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d002      	beq.n	800ee1c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800ee16:	69bb      	ldr	r3, [r7, #24]
 800ee18:	2200      	movs	r2, #0
 800ee1a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	79db      	ldrb	r3, [r3, #7]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d003      	beq.n	800ee2c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800ee24:	69bb      	ldr	r3, [r7, #24]
 800ee26:	6a1b      	ldr	r3, [r3, #32]
 800ee28:	613b      	str	r3, [r7, #16]
 800ee2a:	e014      	b.n	800ee56 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	331c      	adds	r3, #28
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800ee34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	db02      	blt.n	800ee42 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800ee3c:	23ff      	movs	r3, #255	; 0xff
 800ee3e:	613b      	str	r3, [r7, #16]
 800ee40:	e009      	b.n	800ee56 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800ee42:	7dfb      	ldrb	r3, [r7, #23]
 800ee44:	2bbf      	cmp	r3, #191	; 0xbf
 800ee46:	d903      	bls.n	800ee50 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800ee48:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800ee4c:	613b      	str	r3, [r7, #16]
 800ee4e:	e002      	b.n	800ee56 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800ee50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ee54:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800ee56:	69bb      	ldr	r3, [r7, #24]
 800ee58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee5a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d108      	bne.n	800ee74 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800ee62:	69bb      	ldr	r3, [r7, #24]
 800ee64:	69da      	ldr	r2, [r3, #28]
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	4013      	ands	r3, r2
 800ee6a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ee72:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800ee74:	210a      	movs	r1, #10
 800ee76:	69b8      	ldr	r0, [r7, #24]
 800ee78:	f000 faa0 	bl	800f3bc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	f103 011c 	add.w	r1, r3, #28
 800ee82:	f107 030c 	add.w	r3, r7, #12
 800ee86:	f107 0210 	add.w	r2, r7, #16
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f7f7 fc94 	bl	80067b8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800ee90:	3720      	adds	r7, #32
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}
 800ee96:	bf00      	nop
 800ee98:	0801598c 	.word	0x0801598c
 800ee9c:	08015aec 	.word	0x08015aec
 800eea0:	080159ec 	.word	0x080159ec
 800eea4:	08015b08 	.word	0x08015b08
 800eea8:	88888889 	.word	0x88888889

0800eeac <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b08a      	sub	sp, #40	; 0x28
 800eeb0:	af02      	add	r7, sp, #8
 800eeb2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6a1b      	ldr	r3, [r3, #32]
 800eeb8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800eeba:	2105      	movs	r1, #5
 800eebc:	69b8      	ldr	r0, [r7, #24]
 800eebe:	f000 fa7d 	bl	800f3bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800eec2:	f107 030c 	add.w	r3, r7, #12
 800eec6:	2203      	movs	r2, #3
 800eec8:	69b9      	ldr	r1, [r7, #24]
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f000 ff00 	bl	800fcd0 <dhcp_create_msg>
 800eed0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d04e      	beq.n	800ef76 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	685b      	ldr	r3, [r3, #4]
 800eedc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800eede:	89b8      	ldrh	r0, [r7, #12]
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eee6:	2302      	movs	r3, #2
 800eee8:	2239      	movs	r2, #57	; 0x39
 800eeea:	f000 fa81 	bl	800f3f0 <dhcp_option>
 800eeee:	4603      	mov	r3, r0
 800eef0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800eef2:	89b8      	ldrh	r0, [r7, #12]
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eefe:	461a      	mov	r2, r3
 800ef00:	f000 fad0 	bl	800f4a4 <dhcp_option_short>
 800ef04:	4603      	mov	r3, r0
 800ef06:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ef08:	89b8      	ldrh	r0, [r7, #12]
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ef10:	2303      	movs	r3, #3
 800ef12:	2237      	movs	r2, #55	; 0x37
 800ef14:	f000 fa6c 	bl	800f3f0 <dhcp_option>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	77bb      	strb	r3, [r7, #30]
 800ef20:	e00e      	b.n	800ef40 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ef22:	89b8      	ldrh	r0, [r7, #12]
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ef2a:	7fbb      	ldrb	r3, [r7, #30]
 800ef2c:	4a2a      	ldr	r2, [pc, #168]	; (800efd8 <dhcp_renew+0x12c>)
 800ef2e:	5cd3      	ldrb	r3, [r2, r3]
 800ef30:	461a      	mov	r2, r3
 800ef32:	f000 fa91 	bl	800f458 <dhcp_option_byte>
 800ef36:	4603      	mov	r3, r0
 800ef38:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ef3a:	7fbb      	ldrb	r3, [r7, #30]
 800ef3c:	3301      	adds	r3, #1
 800ef3e:	77bb      	strb	r3, [r7, #30]
 800ef40:	7fbb      	ldrb	r3, [r7, #30]
 800ef42:	2b02      	cmp	r3, #2
 800ef44:	d9ed      	bls.n	800ef22 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ef46:	89b8      	ldrh	r0, [r7, #12]
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	33f0      	adds	r3, #240	; 0xf0
 800ef4c:	697a      	ldr	r2, [r7, #20]
 800ef4e:	4619      	mov	r1, r3
 800ef50:	f000 ff94 	bl	800fe7c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800ef54:	4b21      	ldr	r3, [pc, #132]	; (800efdc <dhcp_renew+0x130>)
 800ef56:	6818      	ldr	r0, [r3, #0]
 800ef58:	69bb      	ldr	r3, [r7, #24]
 800ef5a:	f103 0218 	add.w	r2, r3, #24
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	9300      	str	r3, [sp, #0]
 800ef62:	2343      	movs	r3, #67	; 0x43
 800ef64:	6979      	ldr	r1, [r7, #20]
 800ef66:	f7fe fe8d 	bl	800dc84 <udp_sendto_if>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800ef6e:	6978      	ldr	r0, [r7, #20]
 800ef70:	f7f8 f884 	bl	800707c <pbuf_free>
 800ef74:	e001      	b.n	800ef7a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800ef76:	23ff      	movs	r3, #255	; 0xff
 800ef78:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800ef7a:	69bb      	ldr	r3, [r7, #24]
 800ef7c:	799b      	ldrb	r3, [r3, #6]
 800ef7e:	2bff      	cmp	r3, #255	; 0xff
 800ef80:	d005      	beq.n	800ef8e <dhcp_renew+0xe2>
    dhcp->tries++;
 800ef82:	69bb      	ldr	r3, [r7, #24]
 800ef84:	799b      	ldrb	r3, [r3, #6]
 800ef86:	3301      	adds	r3, #1
 800ef88:	b2da      	uxtb	r2, r3
 800ef8a:	69bb      	ldr	r3, [r7, #24]
 800ef8c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	799b      	ldrb	r3, [r3, #6]
 800ef92:	2b09      	cmp	r3, #9
 800ef94:	d80a      	bhi.n	800efac <dhcp_renew+0x100>
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	799b      	ldrb	r3, [r3, #6]
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	0152      	lsls	r2, r2, #5
 800efa0:	1ad2      	subs	r2, r2, r3
 800efa2:	0092      	lsls	r2, r2, #2
 800efa4:	4413      	add	r3, r2
 800efa6:	011b      	lsls	r3, r3, #4
 800efa8:	b29b      	uxth	r3, r3
 800efaa:	e001      	b.n	800efb0 <dhcp_renew+0x104>
 800efac:	f644 6320 	movw	r3, #20000	; 0x4e20
 800efb0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800efb2:	89fb      	ldrh	r3, [r7, #14]
 800efb4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800efb8:	4a09      	ldr	r2, [pc, #36]	; (800efe0 <dhcp_renew+0x134>)
 800efba:	fb82 1203 	smull	r1, r2, r2, r3
 800efbe:	1152      	asrs	r2, r2, #5
 800efc0:	17db      	asrs	r3, r3, #31
 800efc2:	1ad3      	subs	r3, r2, r3
 800efc4:	b29a      	uxth	r2, r3
 800efc6:	69bb      	ldr	r3, [r7, #24]
 800efc8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800efca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3720      	adds	r7, #32
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
 800efd6:	bf00      	nop
 800efd8:	20000014 	.word	0x20000014
 800efdc:	2000055c 	.word	0x2000055c
 800efe0:	10624dd3 	.word	0x10624dd3

0800efe4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b08a      	sub	sp, #40	; 0x28
 800efe8:	af02      	add	r7, sp, #8
 800efea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6a1b      	ldr	r3, [r3, #32]
 800eff0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800eff2:	2104      	movs	r1, #4
 800eff4:	69b8      	ldr	r0, [r7, #24]
 800eff6:	f000 f9e1 	bl	800f3bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800effa:	f107 030c 	add.w	r3, r7, #12
 800effe:	2203      	movs	r2, #3
 800f000:	69b9      	ldr	r1, [r7, #24]
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f000 fe64 	bl	800fcd0 <dhcp_create_msg>
 800f008:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d04c      	beq.n	800f0aa <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f016:	89b8      	ldrh	r0, [r7, #12]
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f01e:	2302      	movs	r3, #2
 800f020:	2239      	movs	r2, #57	; 0x39
 800f022:	f000 f9e5 	bl	800f3f0 <dhcp_option>
 800f026:	4603      	mov	r3, r0
 800f028:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f02a:	89b8      	ldrh	r0, [r7, #12]
 800f02c:	693b      	ldr	r3, [r7, #16]
 800f02e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f036:	461a      	mov	r2, r3
 800f038:	f000 fa34 	bl	800f4a4 <dhcp_option_short>
 800f03c:	4603      	mov	r3, r0
 800f03e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f040:	89b8      	ldrh	r0, [r7, #12]
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f048:	2303      	movs	r3, #3
 800f04a:	2237      	movs	r2, #55	; 0x37
 800f04c:	f000 f9d0 	bl	800f3f0 <dhcp_option>
 800f050:	4603      	mov	r3, r0
 800f052:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f054:	2300      	movs	r3, #0
 800f056:	77bb      	strb	r3, [r7, #30]
 800f058:	e00e      	b.n	800f078 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f05a:	89b8      	ldrh	r0, [r7, #12]
 800f05c:	693b      	ldr	r3, [r7, #16]
 800f05e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f062:	7fbb      	ldrb	r3, [r7, #30]
 800f064:	4a29      	ldr	r2, [pc, #164]	; (800f10c <dhcp_rebind+0x128>)
 800f066:	5cd3      	ldrb	r3, [r2, r3]
 800f068:	461a      	mov	r2, r3
 800f06a:	f000 f9f5 	bl	800f458 <dhcp_option_byte>
 800f06e:	4603      	mov	r3, r0
 800f070:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f072:	7fbb      	ldrb	r3, [r7, #30]
 800f074:	3301      	adds	r3, #1
 800f076:	77bb      	strb	r3, [r7, #30]
 800f078:	7fbb      	ldrb	r3, [r7, #30]
 800f07a:	2b02      	cmp	r3, #2
 800f07c:	d9ed      	bls.n	800f05a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f07e:	89b8      	ldrh	r0, [r7, #12]
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	33f0      	adds	r3, #240	; 0xf0
 800f084:	697a      	ldr	r2, [r7, #20]
 800f086:	4619      	mov	r1, r3
 800f088:	f000 fef8 	bl	800fe7c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f08c:	4b20      	ldr	r3, [pc, #128]	; (800f110 <dhcp_rebind+0x12c>)
 800f08e:	6818      	ldr	r0, [r3, #0]
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	9300      	str	r3, [sp, #0]
 800f094:	2343      	movs	r3, #67	; 0x43
 800f096:	4a1f      	ldr	r2, [pc, #124]	; (800f114 <dhcp_rebind+0x130>)
 800f098:	6979      	ldr	r1, [r7, #20]
 800f09a:	f7fe fdf3 	bl	800dc84 <udp_sendto_if>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f0a2:	6978      	ldr	r0, [r7, #20]
 800f0a4:	f7f7 ffea 	bl	800707c <pbuf_free>
 800f0a8:	e001      	b.n	800f0ae <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f0aa:	23ff      	movs	r3, #255	; 0xff
 800f0ac:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f0ae:	69bb      	ldr	r3, [r7, #24]
 800f0b0:	799b      	ldrb	r3, [r3, #6]
 800f0b2:	2bff      	cmp	r3, #255	; 0xff
 800f0b4:	d005      	beq.n	800f0c2 <dhcp_rebind+0xde>
    dhcp->tries++;
 800f0b6:	69bb      	ldr	r3, [r7, #24]
 800f0b8:	799b      	ldrb	r3, [r3, #6]
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	b2da      	uxtb	r2, r3
 800f0be:	69bb      	ldr	r3, [r7, #24]
 800f0c0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f0c2:	69bb      	ldr	r3, [r7, #24]
 800f0c4:	799b      	ldrb	r3, [r3, #6]
 800f0c6:	2b09      	cmp	r3, #9
 800f0c8:	d80a      	bhi.n	800f0e0 <dhcp_rebind+0xfc>
 800f0ca:	69bb      	ldr	r3, [r7, #24]
 800f0cc:	799b      	ldrb	r3, [r3, #6]
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	0152      	lsls	r2, r2, #5
 800f0d4:	1ad2      	subs	r2, r2, r3
 800f0d6:	0092      	lsls	r2, r2, #2
 800f0d8:	4413      	add	r3, r2
 800f0da:	00db      	lsls	r3, r3, #3
 800f0dc:	b29b      	uxth	r3, r3
 800f0de:	e001      	b.n	800f0e4 <dhcp_rebind+0x100>
 800f0e0:	f242 7310 	movw	r3, #10000	; 0x2710
 800f0e4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f0e6:	89fb      	ldrh	r3, [r7, #14]
 800f0e8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f0ec:	4a0a      	ldr	r2, [pc, #40]	; (800f118 <dhcp_rebind+0x134>)
 800f0ee:	fb82 1203 	smull	r1, r2, r2, r3
 800f0f2:	1152      	asrs	r2, r2, #5
 800f0f4:	17db      	asrs	r3, r3, #31
 800f0f6:	1ad3      	subs	r3, r2, r3
 800f0f8:	b29a      	uxth	r2, r3
 800f0fa:	69bb      	ldr	r3, [r7, #24]
 800f0fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f0fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f102:	4618      	mov	r0, r3
 800f104:	3720      	adds	r7, #32
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	bf00      	nop
 800f10c:	20000014 	.word	0x20000014
 800f110:	2000055c 	.word	0x2000055c
 800f114:	08016aa0 	.word	0x08016aa0
 800f118:	10624dd3 	.word	0x10624dd3

0800f11c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800f11c:	b5b0      	push	{r4, r5, r7, lr}
 800f11e:	b08a      	sub	sp, #40	; 0x28
 800f120:	af02      	add	r7, sp, #8
 800f122:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6a1b      	ldr	r3, [r3, #32]
 800f128:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800f12a:	2103      	movs	r1, #3
 800f12c:	69b8      	ldr	r0, [r7, #24]
 800f12e:	f000 f945 	bl	800f3bc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f132:	f107 030c 	add.w	r3, r7, #12
 800f136:	2203      	movs	r2, #3
 800f138:	69b9      	ldr	r1, [r7, #24]
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f000 fdc8 	bl	800fcd0 <dhcp_create_msg>
 800f140:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d066      	beq.n	800f216 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	685b      	ldr	r3, [r3, #4]
 800f14c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f14e:	89b8      	ldrh	r0, [r7, #12]
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f156:	2302      	movs	r3, #2
 800f158:	2239      	movs	r2, #57	; 0x39
 800f15a:	f000 f949 	bl	800f3f0 <dhcp_option>
 800f15e:	4603      	mov	r3, r0
 800f160:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800f162:	89b8      	ldrh	r0, [r7, #12]
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	33f0      	adds	r3, #240	; 0xf0
 800f168:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f16c:	4619      	mov	r1, r3
 800f16e:	f000 f999 	bl	800f4a4 <dhcp_option_short>
 800f172:	4603      	mov	r3, r0
 800f174:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f176:	89b8      	ldrh	r0, [r7, #12]
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f17e:	2304      	movs	r3, #4
 800f180:	2232      	movs	r2, #50	; 0x32
 800f182:	f000 f935 	bl	800f3f0 <dhcp_option>
 800f186:	4603      	mov	r3, r0
 800f188:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f18a:	89bc      	ldrh	r4, [r7, #12]
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f192:	69bb      	ldr	r3, [r7, #24]
 800f194:	69db      	ldr	r3, [r3, #28]
 800f196:	4618      	mov	r0, r3
 800f198:	f7f6 fcad 	bl	8005af6 <lwip_htonl>
 800f19c:	4603      	mov	r3, r0
 800f19e:	461a      	mov	r2, r3
 800f1a0:	4629      	mov	r1, r5
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	f000 f9b0 	bl	800f508 <dhcp_option_long>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f1ac:	89b8      	ldrh	r0, [r7, #12]
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f1b4:	2303      	movs	r3, #3
 800f1b6:	2237      	movs	r2, #55	; 0x37
 800f1b8:	f000 f91a 	bl	800f3f0 <dhcp_option>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	77bb      	strb	r3, [r7, #30]
 800f1c4:	e00e      	b.n	800f1e4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f1c6:	89b8      	ldrh	r0, [r7, #12]
 800f1c8:	693b      	ldr	r3, [r7, #16]
 800f1ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f1ce:	7fbb      	ldrb	r3, [r7, #30]
 800f1d0:	4a29      	ldr	r2, [pc, #164]	; (800f278 <dhcp_reboot+0x15c>)
 800f1d2:	5cd3      	ldrb	r3, [r2, r3]
 800f1d4:	461a      	mov	r2, r3
 800f1d6:	f000 f93f 	bl	800f458 <dhcp_option_byte>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f1de:	7fbb      	ldrb	r3, [r7, #30]
 800f1e0:	3301      	adds	r3, #1
 800f1e2:	77bb      	strb	r3, [r7, #30]
 800f1e4:	7fbb      	ldrb	r3, [r7, #30]
 800f1e6:	2b02      	cmp	r3, #2
 800f1e8:	d9ed      	bls.n	800f1c6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f1ea:	89b8      	ldrh	r0, [r7, #12]
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	33f0      	adds	r3, #240	; 0xf0
 800f1f0:	697a      	ldr	r2, [r7, #20]
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	f000 fe42 	bl	800fe7c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f1f8:	4b20      	ldr	r3, [pc, #128]	; (800f27c <dhcp_reboot+0x160>)
 800f1fa:	6818      	ldr	r0, [r3, #0]
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	9300      	str	r3, [sp, #0]
 800f200:	2343      	movs	r3, #67	; 0x43
 800f202:	4a1f      	ldr	r2, [pc, #124]	; (800f280 <dhcp_reboot+0x164>)
 800f204:	6979      	ldr	r1, [r7, #20]
 800f206:	f7fe fd3d 	bl	800dc84 <udp_sendto_if>
 800f20a:	4603      	mov	r3, r0
 800f20c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f20e:	6978      	ldr	r0, [r7, #20]
 800f210:	f7f7 ff34 	bl	800707c <pbuf_free>
 800f214:	e001      	b.n	800f21a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f216:	23ff      	movs	r3, #255	; 0xff
 800f218:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f21a:	69bb      	ldr	r3, [r7, #24]
 800f21c:	799b      	ldrb	r3, [r3, #6]
 800f21e:	2bff      	cmp	r3, #255	; 0xff
 800f220:	d005      	beq.n	800f22e <dhcp_reboot+0x112>
    dhcp->tries++;
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	799b      	ldrb	r3, [r3, #6]
 800f226:	3301      	adds	r3, #1
 800f228:	b2da      	uxtb	r2, r3
 800f22a:	69bb      	ldr	r3, [r7, #24]
 800f22c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800f22e:	69bb      	ldr	r3, [r7, #24]
 800f230:	799b      	ldrb	r3, [r3, #6]
 800f232:	2b09      	cmp	r3, #9
 800f234:	d80a      	bhi.n	800f24c <dhcp_reboot+0x130>
 800f236:	69bb      	ldr	r3, [r7, #24]
 800f238:	799b      	ldrb	r3, [r3, #6]
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	461a      	mov	r2, r3
 800f23e:	0152      	lsls	r2, r2, #5
 800f240:	1ad2      	subs	r2, r2, r3
 800f242:	0092      	lsls	r2, r2, #2
 800f244:	4413      	add	r3, r2
 800f246:	00db      	lsls	r3, r3, #3
 800f248:	b29b      	uxth	r3, r3
 800f24a:	e001      	b.n	800f250 <dhcp_reboot+0x134>
 800f24c:	f242 7310 	movw	r3, #10000	; 0x2710
 800f250:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f252:	89fb      	ldrh	r3, [r7, #14]
 800f254:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f258:	4a0a      	ldr	r2, [pc, #40]	; (800f284 <dhcp_reboot+0x168>)
 800f25a:	fb82 1203 	smull	r1, r2, r2, r3
 800f25e:	1152      	asrs	r2, r2, #5
 800f260:	17db      	asrs	r3, r3, #31
 800f262:	1ad3      	subs	r3, r2, r3
 800f264:	b29a      	uxth	r2, r3
 800f266:	69bb      	ldr	r3, [r7, #24]
 800f268:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f26a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3720      	adds	r7, #32
 800f272:	46bd      	mov	sp, r7
 800f274:	bdb0      	pop	{r4, r5, r7, pc}
 800f276:	bf00      	nop
 800f278:	20000014 	.word	0x20000014
 800f27c:	2000055c 	.word	0x2000055c
 800f280:	08016aa0 	.word	0x08016aa0
 800f284:	10624dd3 	.word	0x10624dd3

0800f288 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800f288:	b5b0      	push	{r4, r5, r7, lr}
 800f28a:	b08a      	sub	sp, #40	; 0x28
 800f28c:	af02      	add	r7, sp, #8
 800f28e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6a1b      	ldr	r3, [r3, #32]
 800f294:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800f296:	69fb      	ldr	r3, [r7, #28]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	f000 8084 	beq.w	800f3a6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	795b      	ldrb	r3, [r3, #5]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	f000 8081 	beq.w	800f3aa <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	699b      	ldr	r3, [r3, #24]
 800f2ac:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800f2b4:	69fb      	ldr	r3, [r7, #28]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f2ba:	69fb      	ldr	r3, [r7, #28]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f2c0:	69fb      	ldr	r3, [r7, #28]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	631a      	str	r2, [r3, #48]	; 0x30
 800f2cc:	69fb      	ldr	r3, [r7, #28]
 800f2ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2d0:	69fb      	ldr	r3, [r7, #28]
 800f2d2:	62da      	str	r2, [r3, #44]	; 0x2c
 800f2d4:	69fb      	ldr	r3, [r7, #28]
 800f2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f2d8:	69fb      	ldr	r3, [r7, #28]
 800f2da:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	829a      	strh	r2, [r3, #20]
 800f2e2:	69fb      	ldr	r3, [r7, #28]
 800f2e4:	8a9a      	ldrh	r2, [r3, #20]
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	825a      	strh	r2, [r3, #18]
 800f2ea:	69fb      	ldr	r3, [r7, #28]
 800f2ec:	8a5a      	ldrh	r2, [r3, #18]
 800f2ee:	69fb      	ldr	r3, [r7, #28]
 800f2f0:	821a      	strh	r2, [r3, #16]
 800f2f2:	69fb      	ldr	r3, [r7, #28]
 800f2f4:	8a1a      	ldrh	r2, [r3, #16]
 800f2f6:	69fb      	ldr	r3, [r7, #28]
 800f2f8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	f000 fdec 	bl	800fed8 <dhcp_supplied_address>
 800f300:	4603      	mov	r3, r0
 800f302:	2b00      	cmp	r3, #0
 800f304:	d03b      	beq.n	800f37e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800f306:	f107 030e 	add.w	r3, r7, #14
 800f30a:	2207      	movs	r2, #7
 800f30c:	69f9      	ldr	r1, [r7, #28]
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 fcde 	bl	800fcd0 <dhcp_create_msg>
 800f314:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800f316:	69bb      	ldr	r3, [r7, #24]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d030      	beq.n	800f37e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f31c:	69bb      	ldr	r3, [r7, #24]
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800f322:	89f8      	ldrh	r0, [r7, #14]
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f32a:	2304      	movs	r3, #4
 800f32c:	2236      	movs	r2, #54	; 0x36
 800f32e:	f000 f85f 	bl	800f3f0 <dhcp_option>
 800f332:	4603      	mov	r3, r0
 800f334:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800f336:	89fc      	ldrh	r4, [r7, #14]
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	4618      	mov	r0, r3
 800f342:	f7f6 fbd8 	bl	8005af6 <lwip_htonl>
 800f346:	4603      	mov	r3, r0
 800f348:	461a      	mov	r2, r3
 800f34a:	4629      	mov	r1, r5
 800f34c:	4620      	mov	r0, r4
 800f34e:	f000 f8db 	bl	800f508 <dhcp_option_long>
 800f352:	4603      	mov	r3, r0
 800f354:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f356:	89f8      	ldrh	r0, [r7, #14]
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	33f0      	adds	r3, #240	; 0xf0
 800f35c:	69ba      	ldr	r2, [r7, #24]
 800f35e:	4619      	mov	r1, r3
 800f360:	f000 fd8c 	bl	800fe7c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800f364:	4b13      	ldr	r3, [pc, #76]	; (800f3b4 <dhcp_release_and_stop+0x12c>)
 800f366:	6818      	ldr	r0, [r3, #0]
 800f368:	f107 0210 	add.w	r2, r7, #16
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	9300      	str	r3, [sp, #0]
 800f370:	2343      	movs	r3, #67	; 0x43
 800f372:	69b9      	ldr	r1, [r7, #24]
 800f374:	f7fe fc86 	bl	800dc84 <udp_sendto_if>
      pbuf_free(p_out);
 800f378:	69b8      	ldr	r0, [r7, #24]
 800f37a:	f7f7 fe7f 	bl	800707c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f37e:	4b0e      	ldr	r3, [pc, #56]	; (800f3b8 <dhcp_release_and_stop+0x130>)
 800f380:	4a0d      	ldr	r2, [pc, #52]	; (800f3b8 <dhcp_release_and_stop+0x130>)
 800f382:	490d      	ldr	r1, [pc, #52]	; (800f3b8 <dhcp_release_and_stop+0x130>)
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f7f7 fa17 	bl	80067b8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800f38a:	2100      	movs	r1, #0
 800f38c:	69f8      	ldr	r0, [r7, #28]
 800f38e:	f000 f815 	bl	800f3bc <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	791b      	ldrb	r3, [r3, #4]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d008      	beq.n	800f3ac <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f39a:	f7fe ffbf 	bl	800e31c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800f39e:	69fb      	ldr	r3, [r7, #28]
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	711a      	strb	r2, [r3, #4]
 800f3a4:	e002      	b.n	800f3ac <dhcp_release_and_stop+0x124>
    return;
 800f3a6:	bf00      	nop
 800f3a8:	e000      	b.n	800f3ac <dhcp_release_and_stop+0x124>
    return;
 800f3aa:	bf00      	nop
  }
}
 800f3ac:	3720      	adds	r7, #32
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bdb0      	pop	{r4, r5, r7, pc}
 800f3b2:	bf00      	nop
 800f3b4:	2000055c 	.word	0x2000055c
 800f3b8:	08016a9c 	.word	0x08016a9c

0800f3bc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b083      	sub	sp, #12
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	795b      	ldrb	r3, [r3, #5]
 800f3cc:	78fa      	ldrb	r2, [r7, #3]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d008      	beq.n	800f3e4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	78fa      	ldrb	r2, [r7, #3]
 800f3d6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	811a      	strh	r2, [r3, #8]
  }
}
 800f3e4:	bf00      	nop
 800f3e6:	370c      	adds	r7, #12
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ee:	4770      	bx	lr

0800f3f0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6039      	str	r1, [r7, #0]
 800f3f8:	4611      	mov	r1, r2
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	80fb      	strh	r3, [r7, #6]
 800f400:	460b      	mov	r3, r1
 800f402:	717b      	strb	r3, [r7, #5]
 800f404:	4613      	mov	r3, r2
 800f406:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800f408:	88fa      	ldrh	r2, [r7, #6]
 800f40a:	793b      	ldrb	r3, [r7, #4]
 800f40c:	4413      	add	r3, r2
 800f40e:	3302      	adds	r3, #2
 800f410:	2b44      	cmp	r3, #68	; 0x44
 800f412:	d906      	bls.n	800f422 <dhcp_option+0x32>
 800f414:	4b0d      	ldr	r3, [pc, #52]	; (800f44c <dhcp_option+0x5c>)
 800f416:	f240 529a 	movw	r2, #1434	; 0x59a
 800f41a:	490d      	ldr	r1, [pc, #52]	; (800f450 <dhcp_option+0x60>)
 800f41c:	480d      	ldr	r0, [pc, #52]	; (800f454 <dhcp_option+0x64>)
 800f41e:	f003 f8a3 	bl	8012568 <iprintf>
  options[options_out_len++] = option_type;
 800f422:	88fb      	ldrh	r3, [r7, #6]
 800f424:	1c5a      	adds	r2, r3, #1
 800f426:	80fa      	strh	r2, [r7, #6]
 800f428:	461a      	mov	r2, r3
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	4413      	add	r3, r2
 800f42e:	797a      	ldrb	r2, [r7, #5]
 800f430:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800f432:	88fb      	ldrh	r3, [r7, #6]
 800f434:	1c5a      	adds	r2, r3, #1
 800f436:	80fa      	strh	r2, [r7, #6]
 800f438:	461a      	mov	r2, r3
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	4413      	add	r3, r2
 800f43e:	793a      	ldrb	r2, [r7, #4]
 800f440:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f442:	88fb      	ldrh	r3, [r7, #6]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3708      	adds	r7, #8
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd80      	pop	{r7, pc}
 800f44c:	0801598c 	.word	0x0801598c
 800f450:	08015b20 	.word	0x08015b20
 800f454:	080159ec 	.word	0x080159ec

0800f458 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	4603      	mov	r3, r0
 800f460:	6039      	str	r1, [r7, #0]
 800f462:	80fb      	strh	r3, [r7, #6]
 800f464:	4613      	mov	r3, r2
 800f466:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800f468:	88fb      	ldrh	r3, [r7, #6]
 800f46a:	2b43      	cmp	r3, #67	; 0x43
 800f46c:	d906      	bls.n	800f47c <dhcp_option_byte+0x24>
 800f46e:	4b0a      	ldr	r3, [pc, #40]	; (800f498 <dhcp_option_byte+0x40>)
 800f470:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800f474:	4909      	ldr	r1, [pc, #36]	; (800f49c <dhcp_option_byte+0x44>)
 800f476:	480a      	ldr	r0, [pc, #40]	; (800f4a0 <dhcp_option_byte+0x48>)
 800f478:	f003 f876 	bl	8012568 <iprintf>
  options[options_out_len++] = value;
 800f47c:	88fb      	ldrh	r3, [r7, #6]
 800f47e:	1c5a      	adds	r2, r3, #1
 800f480:	80fa      	strh	r2, [r7, #6]
 800f482:	461a      	mov	r2, r3
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	4413      	add	r3, r2
 800f488:	797a      	ldrb	r2, [r7, #5]
 800f48a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f48c:	88fb      	ldrh	r3, [r7, #6]
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3708      	adds	r7, #8
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	0801598c 	.word	0x0801598c
 800f49c:	08015b64 	.word	0x08015b64
 800f4a0:	080159ec 	.word	0x080159ec

0800f4a4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	6039      	str	r1, [r7, #0]
 800f4ae:	80fb      	strh	r3, [r7, #6]
 800f4b0:	4613      	mov	r3, r2
 800f4b2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800f4b4:	88fb      	ldrh	r3, [r7, #6]
 800f4b6:	3302      	adds	r3, #2
 800f4b8:	2b44      	cmp	r3, #68	; 0x44
 800f4ba:	d906      	bls.n	800f4ca <dhcp_option_short+0x26>
 800f4bc:	4b0f      	ldr	r3, [pc, #60]	; (800f4fc <dhcp_option_short+0x58>)
 800f4be:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800f4c2:	490f      	ldr	r1, [pc, #60]	; (800f500 <dhcp_option_short+0x5c>)
 800f4c4:	480f      	ldr	r0, [pc, #60]	; (800f504 <dhcp_option_short+0x60>)
 800f4c6:	f003 f84f 	bl	8012568 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800f4ca:	88bb      	ldrh	r3, [r7, #4]
 800f4cc:	0a1b      	lsrs	r3, r3, #8
 800f4ce:	b29a      	uxth	r2, r3
 800f4d0:	88fb      	ldrh	r3, [r7, #6]
 800f4d2:	1c59      	adds	r1, r3, #1
 800f4d4:	80f9      	strh	r1, [r7, #6]
 800f4d6:	4619      	mov	r1, r3
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	440b      	add	r3, r1
 800f4dc:	b2d2      	uxtb	r2, r2
 800f4de:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800f4e0:	88fb      	ldrh	r3, [r7, #6]
 800f4e2:	1c5a      	adds	r2, r3, #1
 800f4e4:	80fa      	strh	r2, [r7, #6]
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	88ba      	ldrh	r2, [r7, #4]
 800f4ee:	b2d2      	uxtb	r2, r2
 800f4f0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f4f2:	88fb      	ldrh	r3, [r7, #6]
}
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	3708      	adds	r7, #8
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}
 800f4fc:	0801598c 	.word	0x0801598c
 800f500:	08015b9c 	.word	0x08015b9c
 800f504:	080159ec 	.word	0x080159ec

0800f508 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b084      	sub	sp, #16
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	4603      	mov	r3, r0
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	607a      	str	r2, [r7, #4]
 800f514:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800f516:	89fb      	ldrh	r3, [r7, #14]
 800f518:	3304      	adds	r3, #4
 800f51a:	2b44      	cmp	r3, #68	; 0x44
 800f51c:	d906      	bls.n	800f52c <dhcp_option_long+0x24>
 800f51e:	4b19      	ldr	r3, [pc, #100]	; (800f584 <dhcp_option_long+0x7c>)
 800f520:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800f524:	4918      	ldr	r1, [pc, #96]	; (800f588 <dhcp_option_long+0x80>)
 800f526:	4819      	ldr	r0, [pc, #100]	; (800f58c <dhcp_option_long+0x84>)
 800f528:	f003 f81e 	bl	8012568 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	0e1a      	lsrs	r2, r3, #24
 800f530:	89fb      	ldrh	r3, [r7, #14]
 800f532:	1c59      	adds	r1, r3, #1
 800f534:	81f9      	strh	r1, [r7, #14]
 800f536:	4619      	mov	r1, r3
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	440b      	add	r3, r1
 800f53c:	b2d2      	uxtb	r2, r2
 800f53e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	0c1a      	lsrs	r2, r3, #16
 800f544:	89fb      	ldrh	r3, [r7, #14]
 800f546:	1c59      	adds	r1, r3, #1
 800f548:	81f9      	strh	r1, [r7, #14]
 800f54a:	4619      	mov	r1, r3
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	440b      	add	r3, r1
 800f550:	b2d2      	uxtb	r2, r2
 800f552:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	0a1a      	lsrs	r2, r3, #8
 800f558:	89fb      	ldrh	r3, [r7, #14]
 800f55a:	1c59      	adds	r1, r3, #1
 800f55c:	81f9      	strh	r1, [r7, #14]
 800f55e:	4619      	mov	r1, r3
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	440b      	add	r3, r1
 800f564:	b2d2      	uxtb	r2, r2
 800f566:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800f568:	89fb      	ldrh	r3, [r7, #14]
 800f56a:	1c5a      	adds	r2, r3, #1
 800f56c:	81fa      	strh	r2, [r7, #14]
 800f56e:	461a      	mov	r2, r3
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	4413      	add	r3, r2
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	b2d2      	uxtb	r2, r2
 800f578:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800f57a:	89fb      	ldrh	r3, [r7, #14]
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3710      	adds	r7, #16
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	0801598c 	.word	0x0801598c
 800f588:	08015bd8 	.word	0x08015bd8
 800f58c:	080159ec 	.word	0x080159ec

0800f590 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b090      	sub	sp, #64	; 0x40
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
 800f598:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800f59a:	2300      	movs	r3, #0
 800f59c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800f5a2:	2208      	movs	r2, #8
 800f5a4:	2100      	movs	r1, #0
 800f5a6:	48be      	ldr	r0, [pc, #760]	; (800f8a0 <dhcp_parse_reply+0x310>)
 800f5a8:	f002 ffd6 	bl	8012558 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	895b      	ldrh	r3, [r3, #10]
 800f5b0:	2b2b      	cmp	r3, #43	; 0x2b
 800f5b2:	d802      	bhi.n	800f5ba <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800f5b4:	f06f 0301 	mvn.w	r3, #1
 800f5b8:	e2a8      	b.n	800fb0c <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	685b      	ldr	r3, [r3, #4]
 800f5be:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800f5c0:	23f0      	movs	r3, #240	; 0xf0
 800f5c2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	891b      	ldrh	r3, [r3, #8]
 800f5c8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800f5ce:	e00c      	b.n	800f5ea <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800f5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d2:	895b      	ldrh	r3, [r3, #10]
 800f5d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f5d6:	1ad3      	subs	r3, r2, r3
 800f5d8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800f5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5dc:	895b      	ldrh	r3, [r3, #10]
 800f5de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800f5e0:	1ad3      	subs	r3, r2, r3
 800f5e2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800f5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800f5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d004      	beq.n	800f5fa <dhcp_parse_reply+0x6a>
 800f5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5f2:	895b      	ldrh	r3, [r3, #10]
 800f5f4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d2ea      	bcs.n	800f5d0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800f5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d102      	bne.n	800f606 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800f600:	f06f 0301 	mvn.w	r3, #1
 800f604:	e282      	b.n	800fb0c <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 800f606:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f608:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800f60a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f60c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800f60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800f614:	e23a      	b.n	800fa8c <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 800f616:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f61a:	4413      	add	r3, r2
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800f620:	2300      	movs	r3, #0
 800f622:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800f626:	f04f 33ff 	mov.w	r3, #4294967295
 800f62a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800f62c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f62e:	3302      	adds	r3, #2
 800f630:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800f632:	8bfa      	ldrh	r2, [r7, #30]
 800f634:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f636:	429a      	cmp	r2, r3
 800f638:	d202      	bcs.n	800f640 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800f63a:	f06f 0301 	mvn.w	r3, #1
 800f63e:	e265      	b.n	800fb0c <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800f640:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f642:	3301      	adds	r3, #1
 800f644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f646:	8952      	ldrh	r2, [r2, #10]
 800f648:	4293      	cmp	r3, r2
 800f64a:	da07      	bge.n	800f65c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800f64c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f64e:	3301      	adds	r3, #1
 800f650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f652:	4413      	add	r3, r2
 800f654:	781b      	ldrb	r3, [r3, #0]
 800f656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f65a:	e00b      	b.n	800f674 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800f65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d004      	beq.n	800f66e <dhcp_parse_reply+0xde>
 800f664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	685b      	ldr	r3, [r3, #4]
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	e000      	b.n	800f670 <dhcp_parse_reply+0xe0>
 800f66e:	2300      	movs	r3, #0
 800f670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800f674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f678:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800f67c:	7dfb      	ldrb	r3, [r7, #23]
 800f67e:	2b3b      	cmp	r3, #59	; 0x3b
 800f680:	f200 812d 	bhi.w	800f8de <dhcp_parse_reply+0x34e>
 800f684:	a201      	add	r2, pc, #4	; (adr r2, 800f68c <dhcp_parse_reply+0xfc>)
 800f686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f68a:	bf00      	nop
 800f68c:	0800f77d 	.word	0x0800f77d
 800f690:	0800f78d 	.word	0x0800f78d
 800f694:	0800f8df 	.word	0x0800f8df
 800f698:	0800f7af 	.word	0x0800f7af
 800f69c:	0800f8df 	.word	0x0800f8df
 800f6a0:	0800f8df 	.word	0x0800f8df
 800f6a4:	0800f8df 	.word	0x0800f8df
 800f6a8:	0800f8df 	.word	0x0800f8df
 800f6ac:	0800f8df 	.word	0x0800f8df
 800f6b0:	0800f8df 	.word	0x0800f8df
 800f6b4:	0800f8df 	.word	0x0800f8df
 800f6b8:	0800f8df 	.word	0x0800f8df
 800f6bc:	0800f8df 	.word	0x0800f8df
 800f6c0:	0800f8df 	.word	0x0800f8df
 800f6c4:	0800f8df 	.word	0x0800f8df
 800f6c8:	0800f8df 	.word	0x0800f8df
 800f6cc:	0800f8df 	.word	0x0800f8df
 800f6d0:	0800f8df 	.word	0x0800f8df
 800f6d4:	0800f8df 	.word	0x0800f8df
 800f6d8:	0800f8df 	.word	0x0800f8df
 800f6dc:	0800f8df 	.word	0x0800f8df
 800f6e0:	0800f8df 	.word	0x0800f8df
 800f6e4:	0800f8df 	.word	0x0800f8df
 800f6e8:	0800f8df 	.word	0x0800f8df
 800f6ec:	0800f8df 	.word	0x0800f8df
 800f6f0:	0800f8df 	.word	0x0800f8df
 800f6f4:	0800f8df 	.word	0x0800f8df
 800f6f8:	0800f8df 	.word	0x0800f8df
 800f6fc:	0800f8df 	.word	0x0800f8df
 800f700:	0800f8df 	.word	0x0800f8df
 800f704:	0800f8df 	.word	0x0800f8df
 800f708:	0800f8df 	.word	0x0800f8df
 800f70c:	0800f8df 	.word	0x0800f8df
 800f710:	0800f8df 	.word	0x0800f8df
 800f714:	0800f8df 	.word	0x0800f8df
 800f718:	0800f8df 	.word	0x0800f8df
 800f71c:	0800f8df 	.word	0x0800f8df
 800f720:	0800f8df 	.word	0x0800f8df
 800f724:	0800f8df 	.word	0x0800f8df
 800f728:	0800f8df 	.word	0x0800f8df
 800f72c:	0800f8df 	.word	0x0800f8df
 800f730:	0800f8df 	.word	0x0800f8df
 800f734:	0800f8df 	.word	0x0800f8df
 800f738:	0800f8df 	.word	0x0800f8df
 800f73c:	0800f8df 	.word	0x0800f8df
 800f740:	0800f8df 	.word	0x0800f8df
 800f744:	0800f8df 	.word	0x0800f8df
 800f748:	0800f8df 	.word	0x0800f8df
 800f74c:	0800f8df 	.word	0x0800f8df
 800f750:	0800f8df 	.word	0x0800f8df
 800f754:	0800f8df 	.word	0x0800f8df
 800f758:	0800f7db 	.word	0x0800f7db
 800f75c:	0800f7fd 	.word	0x0800f7fd
 800f760:	0800f839 	.word	0x0800f839
 800f764:	0800f85b 	.word	0x0800f85b
 800f768:	0800f8df 	.word	0x0800f8df
 800f76c:	0800f8df 	.word	0x0800f8df
 800f770:	0800f8df 	.word	0x0800f8df
 800f774:	0800f87d 	.word	0x0800f87d
 800f778:	0800f8bd 	.word	0x0800f8bd
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800f77c:	2300      	movs	r3, #0
 800f77e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f786:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800f78a:	e0ac      	b.n	800f8e6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f78c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f790:	2b04      	cmp	r3, #4
 800f792:	d009      	beq.n	800f7a8 <dhcp_parse_reply+0x218>
 800f794:	4b43      	ldr	r3, [pc, #268]	; (800f8a4 <dhcp_parse_reply+0x314>)
 800f796:	f240 622e 	movw	r2, #1582	; 0x62e
 800f79a:	4943      	ldr	r1, [pc, #268]	; (800f8a8 <dhcp_parse_reply+0x318>)
 800f79c:	4843      	ldr	r0, [pc, #268]	; (800f8ac <dhcp_parse_reply+0x31c>)
 800f79e:	f002 fee3 	bl	8012568 <iprintf>
 800f7a2:	f06f 0305 	mvn.w	r3, #5
 800f7a6:	e1b1      	b.n	800fb0c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800f7a8:	2306      	movs	r3, #6
 800f7aa:	623b      	str	r3, [r7, #32]
        break;
 800f7ac:	e09b      	b.n	800f8e6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800f7ae:	2304      	movs	r3, #4
 800f7b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800f7b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f7b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d209      	bcs.n	800f7d4 <dhcp_parse_reply+0x244>
 800f7c0:	4b38      	ldr	r3, [pc, #224]	; (800f8a4 <dhcp_parse_reply+0x314>)
 800f7c2:	f240 6233 	movw	r2, #1587	; 0x633
 800f7c6:	493a      	ldr	r1, [pc, #232]	; (800f8b0 <dhcp_parse_reply+0x320>)
 800f7c8:	4838      	ldr	r0, [pc, #224]	; (800f8ac <dhcp_parse_reply+0x31c>)
 800f7ca:	f002 fecd 	bl	8012568 <iprintf>
 800f7ce:	f06f 0305 	mvn.w	r3, #5
 800f7d2:	e19b      	b.n	800fb0c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800f7d4:	2307      	movs	r3, #7
 800f7d6:	623b      	str	r3, [r7, #32]
        break;
 800f7d8:	e085      	b.n	800f8e6 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f7da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7de:	2b04      	cmp	r3, #4
 800f7e0:	d009      	beq.n	800f7f6 <dhcp_parse_reply+0x266>
 800f7e2:	4b30      	ldr	r3, [pc, #192]	; (800f8a4 <dhcp_parse_reply+0x314>)
 800f7e4:	f240 6241 	movw	r2, #1601	; 0x641
 800f7e8:	492f      	ldr	r1, [pc, #188]	; (800f8a8 <dhcp_parse_reply+0x318>)
 800f7ea:	4830      	ldr	r0, [pc, #192]	; (800f8ac <dhcp_parse_reply+0x31c>)
 800f7ec:	f002 febc 	bl	8012568 <iprintf>
 800f7f0:	f06f 0305 	mvn.w	r3, #5
 800f7f4:	e18a      	b.n	800fb0c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800f7f6:	2303      	movs	r3, #3
 800f7f8:	623b      	str	r3, [r7, #32]
        break;
 800f7fa:	e074      	b.n	800f8e6 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f800:	2b01      	cmp	r3, #1
 800f802:	d009      	beq.n	800f818 <dhcp_parse_reply+0x288>
 800f804:	4b27      	ldr	r3, [pc, #156]	; (800f8a4 <dhcp_parse_reply+0x314>)
 800f806:	f240 624f 	movw	r2, #1615	; 0x64f
 800f80a:	492a      	ldr	r1, [pc, #168]	; (800f8b4 <dhcp_parse_reply+0x324>)
 800f80c:	4827      	ldr	r0, [pc, #156]	; (800f8ac <dhcp_parse_reply+0x31c>)
 800f80e:	f002 feab 	bl	8012568 <iprintf>
 800f812:	f06f 0305 	mvn.w	r3, #5
 800f816:	e179      	b.n	800fb0c <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800f818:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f81a:	2bf0      	cmp	r3, #240	; 0xf0
 800f81c:	d009      	beq.n	800f832 <dhcp_parse_reply+0x2a2>
 800f81e:	4b21      	ldr	r3, [pc, #132]	; (800f8a4 <dhcp_parse_reply+0x314>)
 800f820:	f240 6251 	movw	r2, #1617	; 0x651
 800f824:	4924      	ldr	r1, [pc, #144]	; (800f8b8 <dhcp_parse_reply+0x328>)
 800f826:	4821      	ldr	r0, [pc, #132]	; (800f8ac <dhcp_parse_reply+0x31c>)
 800f828:	f002 fe9e 	bl	8012568 <iprintf>
 800f82c:	f06f 0305 	mvn.w	r3, #5
 800f830:	e16c      	b.n	800fb0c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800f832:	2300      	movs	r3, #0
 800f834:	623b      	str	r3, [r7, #32]
        break;
 800f836:	e056      	b.n	800f8e6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800f838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f83c:	2b01      	cmp	r3, #1
 800f83e:	d009      	beq.n	800f854 <dhcp_parse_reply+0x2c4>
 800f840:	4b18      	ldr	r3, [pc, #96]	; (800f8a4 <dhcp_parse_reply+0x314>)
 800f842:	f240 6255 	movw	r2, #1621	; 0x655
 800f846:	491b      	ldr	r1, [pc, #108]	; (800f8b4 <dhcp_parse_reply+0x324>)
 800f848:	4818      	ldr	r0, [pc, #96]	; (800f8ac <dhcp_parse_reply+0x31c>)
 800f84a:	f002 fe8d 	bl	8012568 <iprintf>
 800f84e:	f06f 0305 	mvn.w	r3, #5
 800f852:	e15b      	b.n	800fb0c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800f854:	2301      	movs	r3, #1
 800f856:	623b      	str	r3, [r7, #32]
        break;
 800f858:	e045      	b.n	800f8e6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f85a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f85e:	2b04      	cmp	r3, #4
 800f860:	d009      	beq.n	800f876 <dhcp_parse_reply+0x2e6>
 800f862:	4b10      	ldr	r3, [pc, #64]	; (800f8a4 <dhcp_parse_reply+0x314>)
 800f864:	f240 6259 	movw	r2, #1625	; 0x659
 800f868:	490f      	ldr	r1, [pc, #60]	; (800f8a8 <dhcp_parse_reply+0x318>)
 800f86a:	4810      	ldr	r0, [pc, #64]	; (800f8ac <dhcp_parse_reply+0x31c>)
 800f86c:	f002 fe7c 	bl	8012568 <iprintf>
 800f870:	f06f 0305 	mvn.w	r3, #5
 800f874:	e14a      	b.n	800fb0c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800f876:	2302      	movs	r3, #2
 800f878:	623b      	str	r3, [r7, #32]
        break;
 800f87a:	e034      	b.n	800f8e6 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f87c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f880:	2b04      	cmp	r3, #4
 800f882:	d009      	beq.n	800f898 <dhcp_parse_reply+0x308>
 800f884:	4b07      	ldr	r3, [pc, #28]	; (800f8a4 <dhcp_parse_reply+0x314>)
 800f886:	f240 625d 	movw	r2, #1629	; 0x65d
 800f88a:	4907      	ldr	r1, [pc, #28]	; (800f8a8 <dhcp_parse_reply+0x318>)
 800f88c:	4807      	ldr	r0, [pc, #28]	; (800f8ac <dhcp_parse_reply+0x31c>)
 800f88e:	f002 fe6b 	bl	8012568 <iprintf>
 800f892:	f06f 0305 	mvn.w	r3, #5
 800f896:	e139      	b.n	800fb0c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 800f898:	2304      	movs	r3, #4
 800f89a:	623b      	str	r3, [r7, #32]
        break;
 800f89c:	e023      	b.n	800f8e6 <dhcp_parse_reply+0x356>
 800f89e:	bf00      	nop
 800f8a0:	200071a4 	.word	0x200071a4
 800f8a4:	0801598c 	.word	0x0801598c
 800f8a8:	08015c14 	.word	0x08015c14
 800f8ac:	080159ec 	.word	0x080159ec
 800f8b0:	08015c20 	.word	0x08015c20
 800f8b4:	08015c34 	.word	0x08015c34
 800f8b8:	08015c40 	.word	0x08015c40
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800f8bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8c0:	2b04      	cmp	r3, #4
 800f8c2:	d009      	beq.n	800f8d8 <dhcp_parse_reply+0x348>
 800f8c4:	4b93      	ldr	r3, [pc, #588]	; (800fb14 <dhcp_parse_reply+0x584>)
 800f8c6:	f240 6261 	movw	r2, #1633	; 0x661
 800f8ca:	4993      	ldr	r1, [pc, #588]	; (800fb18 <dhcp_parse_reply+0x588>)
 800f8cc:	4893      	ldr	r0, [pc, #588]	; (800fb1c <dhcp_parse_reply+0x58c>)
 800f8ce:	f002 fe4b 	bl	8012568 <iprintf>
 800f8d2:	f06f 0305 	mvn.w	r3, #5
 800f8d6:	e119      	b.n	800fb0c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 800f8d8:	2305      	movs	r3, #5
 800f8da:	623b      	str	r3, [r7, #32]
        break;
 800f8dc:	e003      	b.n	800f8e6 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800f8e4:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800f8e6:	7dfb      	ldrb	r3, [r7, #23]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d103      	bne.n	800f8f4 <dhcp_parse_reply+0x364>
      offset++;
 800f8ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	877b      	strh	r3, [r7, #58]	; 0x3a
 800f8f2:	e0a1      	b.n	800fa38 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800f8f4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800f8f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8fa:	4413      	add	r3, r2
 800f8fc:	3302      	adds	r3, #2
 800f8fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f902:	db02      	blt.n	800f90a <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 800f904:	f06f 0301 	mvn.w	r3, #1
 800f908:	e100      	b.n	800fb0c <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 800f90a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f90e:	b29a      	uxth	r2, r3
 800f910:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f912:	4413      	add	r3, r2
 800f914:	b29b      	uxth	r3, r3
 800f916:	3302      	adds	r3, #2
 800f918:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800f91a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f91e:	2b00      	cmp	r3, #0
 800f920:	f000 808a 	beq.w	800fa38 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 800f924:	2300      	movs	r3, #0
 800f926:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800f928:	6a3b      	ldr	r3, [r7, #32]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	db02      	blt.n	800f934 <dhcp_parse_reply+0x3a4>
 800f92e:	6a3b      	ldr	r3, [r7, #32]
 800f930:	2b07      	cmp	r3, #7
 800f932:	dd06      	ble.n	800f942 <dhcp_parse_reply+0x3b2>
 800f934:	4b77      	ldr	r3, [pc, #476]	; (800fb14 <dhcp_parse_reply+0x584>)
 800f936:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800f93a:	4979      	ldr	r1, [pc, #484]	; (800fb20 <dhcp_parse_reply+0x590>)
 800f93c:	4877      	ldr	r0, [pc, #476]	; (800fb1c <dhcp_parse_reply+0x58c>)
 800f93e:	f002 fe13 	bl	8012568 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800f942:	4a78      	ldr	r2, [pc, #480]	; (800fb24 <dhcp_parse_reply+0x594>)
 800f944:	6a3b      	ldr	r3, [r7, #32]
 800f946:	4413      	add	r3, r2
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d174      	bne.n	800fa38 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 800f94e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f952:	2b04      	cmp	r3, #4
 800f954:	bf28      	it	cs
 800f956:	2304      	movcs	r3, #4
 800f958:	b2db      	uxtb	r3, r3
 800f95a:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800f95c:	8bfb      	ldrh	r3, [r7, #30]
 800f95e:	8aba      	ldrh	r2, [r7, #20]
 800f960:	f107 0108 	add.w	r1, r7, #8
 800f964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f966:	f7f7 fd83 	bl	8007470 <pbuf_copy_partial>
 800f96a:	4603      	mov	r3, r0
 800f96c:	461a      	mov	r2, r3
 800f96e:	8abb      	ldrh	r3, [r7, #20]
 800f970:	4293      	cmp	r3, r2
 800f972:	d002      	beq.n	800f97a <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 800f974:	f06f 0301 	mvn.w	r3, #1
 800f978:	e0c8      	b.n	800fb0c <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 800f97a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f97e:	2b04      	cmp	r3, #4
 800f980:	d933      	bls.n	800f9ea <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800f982:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f986:	f003 0303 	and.w	r3, r3, #3
 800f98a:	b2db      	uxtb	r3, r3
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d009      	beq.n	800f9a4 <dhcp_parse_reply+0x414>
 800f990:	4b60      	ldr	r3, [pc, #384]	; (800fb14 <dhcp_parse_reply+0x584>)
 800f992:	f240 6281 	movw	r2, #1665	; 0x681
 800f996:	4964      	ldr	r1, [pc, #400]	; (800fb28 <dhcp_parse_reply+0x598>)
 800f998:	4860      	ldr	r0, [pc, #384]	; (800fb1c <dhcp_parse_reply+0x58c>)
 800f99a:	f002 fde5 	bl	8012568 <iprintf>
 800f99e:	f06f 0305 	mvn.w	r3, #5
 800f9a2:	e0b3      	b.n	800fb0c <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 800f9a4:	4a5f      	ldr	r2, [pc, #380]	; (800fb24 <dhcp_parse_reply+0x594>)
 800f9a6:	6a3b      	ldr	r3, [r7, #32]
 800f9a8:	4413      	add	r3, r2
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	f7f6 f8a0 	bl	8005af6 <lwip_htonl>
 800f9b6:	4601      	mov	r1, r0
 800f9b8:	4a5c      	ldr	r2, [pc, #368]	; (800fb2c <dhcp_parse_reply+0x59c>)
 800f9ba:	6a3b      	ldr	r3, [r7, #32]
 800f9bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800f9c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f9c4:	3b04      	subs	r3, #4
 800f9c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800f9ca:	8bfb      	ldrh	r3, [r7, #30]
 800f9cc:	3304      	adds	r3, #4
 800f9ce:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800f9d0:	8a7a      	ldrh	r2, [r7, #18]
 800f9d2:	8bfb      	ldrh	r3, [r7, #30]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d202      	bcs.n	800f9de <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 800f9d8:	f06f 0301 	mvn.w	r3, #1
 800f9dc:	e096      	b.n	800fb0c <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 800f9de:	8a7b      	ldrh	r3, [r7, #18]
 800f9e0:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800f9e2:	6a3b      	ldr	r3, [r7, #32]
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800f9e8:	e79e      	b.n	800f928 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 800f9ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f9ee:	2b04      	cmp	r3, #4
 800f9f0:	d106      	bne.n	800fa00 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7f6 f87e 	bl	8005af6 <lwip_htonl>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	60bb      	str	r3, [r7, #8]
 800f9fe:	e011      	b.n	800fa24 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800fa00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	d009      	beq.n	800fa1c <dhcp_parse_reply+0x48c>
 800fa08:	4b42      	ldr	r3, [pc, #264]	; (800fb14 <dhcp_parse_reply+0x584>)
 800fa0a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800fa0e:	4948      	ldr	r1, [pc, #288]	; (800fb30 <dhcp_parse_reply+0x5a0>)
 800fa10:	4842      	ldr	r0, [pc, #264]	; (800fb1c <dhcp_parse_reply+0x58c>)
 800fa12:	f002 fda9 	bl	8012568 <iprintf>
 800fa16:	f06f 0305 	mvn.w	r3, #5
 800fa1a:	e077      	b.n	800fb0c <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 800fa1c:	f107 0308 	add.w	r3, r7, #8
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800fa24:	4a3f      	ldr	r2, [pc, #252]	; (800fb24 <dhcp_parse_reply+0x594>)
 800fa26:	6a3b      	ldr	r3, [r7, #32]
 800fa28:	4413      	add	r3, r2
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800fa2e:	68ba      	ldr	r2, [r7, #8]
 800fa30:	493e      	ldr	r1, [pc, #248]	; (800fb2c <dhcp_parse_reply+0x59c>)
 800fa32:	6a3b      	ldr	r3, [r7, #32]
 800fa34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800fa38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa3a:	895b      	ldrh	r3, [r3, #10]
 800fa3c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d324      	bcc.n	800fa8c <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 800fa42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa44:	895b      	ldrh	r3, [r3, #10]
 800fa46:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fa48:	1ad3      	subs	r3, r2, r3
 800fa4a:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800fa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa4e:	895b      	ldrh	r3, [r3, #10]
 800fa50:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800fa52:	1ad3      	subs	r3, r2, r3
 800fa54:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800fa56:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fa58:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d213      	bcs.n	800fa86 <dhcp_parse_reply+0x4f6>
        q = q->next;
 800fa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800fa64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d109      	bne.n	800fa7e <dhcp_parse_reply+0x4ee>
 800fa6a:	4b2a      	ldr	r3, [pc, #168]	; (800fb14 <dhcp_parse_reply+0x584>)
 800fa6c:	f240 629d 	movw	r2, #1693	; 0x69d
 800fa70:	4930      	ldr	r1, [pc, #192]	; (800fb34 <dhcp_parse_reply+0x5a4>)
 800fa72:	482a      	ldr	r0, [pc, #168]	; (800fb1c <dhcp_parse_reply+0x58c>)
 800fa74:	f002 fd78 	bl	8012568 <iprintf>
 800fa78:	f06f 0305 	mvn.w	r3, #5
 800fa7c:	e046      	b.n	800fb0c <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 800fa7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fa84:	e002      	b.n	800fa8c <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800fa86:	f06f 0301 	mvn.w	r3, #1
 800fa8a:	e03f      	b.n	800fb0c <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800fa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d00a      	beq.n	800faa8 <dhcp_parse_reply+0x518>
 800fa92:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fa94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d206      	bcs.n	800faa8 <dhcp_parse_reply+0x518>
 800fa9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fa9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fa9e:	4413      	add	r3, r2
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	2bff      	cmp	r3, #255	; 0xff
 800faa4:	f47f adb7 	bne.w	800f616 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800faa8:	4b1e      	ldr	r3, [pc, #120]	; (800fb24 <dhcp_parse_reply+0x594>)
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d018      	beq.n	800fae2 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800fab0:	4b1e      	ldr	r3, [pc, #120]	; (800fb2c <dhcp_parse_reply+0x59c>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800fab6:	4b1b      	ldr	r3, [pc, #108]	; (800fb24 <dhcp_parse_reply+0x594>)
 800fab8:	2200      	movs	r2, #0
 800faba:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	2b01      	cmp	r3, #1
 800fac0:	d102      	bne.n	800fac8 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 800fac2:	2301      	movs	r3, #1
 800fac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fac6:	e00c      	b.n	800fae2 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	2b02      	cmp	r3, #2
 800facc:	d102      	bne.n	800fad4 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 800face:	2301      	movs	r3, #1
 800fad0:	62bb      	str	r3, [r7, #40]	; 0x28
 800fad2:	e006      	b.n	800fae2 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	2b03      	cmp	r3, #3
 800fad8:	d103      	bne.n	800fae2 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 800fada:	2301      	movs	r3, #1
 800fadc:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800fade:	2301      	movs	r3, #1
 800fae0:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800fae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d006      	beq.n	800faf6 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800fae8:	2300      	movs	r3, #0
 800faea:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800faec:	236c      	movs	r3, #108	; 0x6c
 800faee:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800faf0:	23ec      	movs	r3, #236	; 0xec
 800faf2:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800faf4:	e569      	b.n	800f5ca <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800faf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d006      	beq.n	800fb0a <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 800fafc:	2300      	movs	r3, #0
 800fafe:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800fb00:	232c      	movs	r3, #44	; 0x2c
 800fb02:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800fb04:	236c      	movs	r3, #108	; 0x6c
 800fb06:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800fb08:	e55f      	b.n	800f5ca <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800fb0a:	2300      	movs	r3, #0
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3740      	adds	r7, #64	; 0x40
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bd80      	pop	{r7, pc}
 800fb14:	0801598c 	.word	0x0801598c
 800fb18:	08015c14 	.word	0x08015c14
 800fb1c:	080159ec 	.word	0x080159ec
 800fb20:	08015c58 	.word	0x08015c58
 800fb24:	200071a4 	.word	0x200071a4
 800fb28:	08015c6c 	.word	0x08015c6c
 800fb2c:	200071ac 	.word	0x200071ac
 800fb30:	08015c84 	.word	0x08015c84
 800fb34:	08015c98 	.word	0x08015c98

0800fb38 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b08a      	sub	sp, #40	; 0x28
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	60b9      	str	r1, [r7, #8]
 800fb42:	607a      	str	r2, [r7, #4]
 800fb44:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800fb46:	4b5f      	ldr	r3, [pc, #380]	; (800fcc4 <dhcp_recv+0x18c>)
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb4c:	6a3b      	ldr	r3, [r7, #32]
 800fb4e:	6a1b      	ldr	r3, [r3, #32]
 800fb50:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	685b      	ldr	r3, [r3, #4]
 800fb56:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800fb58:	69fb      	ldr	r3, [r7, #28]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	f000 809d 	beq.w	800fc9a <dhcp_recv+0x162>
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	791b      	ldrb	r3, [r3, #4]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	f000 8098 	beq.w	800fc9a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	895b      	ldrh	r3, [r3, #10]
 800fb6e:	2b2b      	cmp	r3, #43	; 0x2b
 800fb70:	f240 8095 	bls.w	800fc9e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800fb74:	69bb      	ldr	r3, [r7, #24]
 800fb76:	781b      	ldrb	r3, [r3, #0]
 800fb78:	2b02      	cmp	r3, #2
 800fb7a:	f040 8092 	bne.w	800fca2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fb7e:	2300      	movs	r3, #0
 800fb80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb84:	e012      	b.n	800fbac <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800fb86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb8a:	6a3a      	ldr	r2, [r7, #32]
 800fb8c:	4413      	add	r3, r2
 800fb8e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800fb92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb96:	69b9      	ldr	r1, [r7, #24]
 800fb98:	440b      	add	r3, r1
 800fb9a:	7f1b      	ldrb	r3, [r3, #28]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	f040 8082 	bne.w	800fca6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fba6:	3301      	adds	r3, #1
 800fba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fbac:	6a3b      	ldr	r3, [r7, #32]
 800fbae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fbb2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d203      	bcs.n	800fbc2 <dhcp_recv+0x8a>
 800fbba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbbe:	2b05      	cmp	r3, #5
 800fbc0:	d9e1      	bls.n	800fb86 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800fbc2:	69bb      	ldr	r3, [r7, #24]
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f7f5 ff95 	bl	8005af6 <lwip_htonl>
 800fbcc:	4602      	mov	r2, r0
 800fbce:	69fb      	ldr	r3, [r7, #28]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d169      	bne.n	800fcaa <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800fbd6:	69f9      	ldr	r1, [r7, #28]
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f7ff fcd9 	bl	800f590 <dhcp_parse_reply>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d164      	bne.n	800fcae <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800fbe4:	4b38      	ldr	r3, [pc, #224]	; (800fcc8 <dhcp_recv+0x190>)
 800fbe6:	785b      	ldrb	r3, [r3, #1]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d062      	beq.n	800fcb2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	685b      	ldr	r3, [r3, #4]
 800fbf0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800fbf2:	4b36      	ldr	r3, [pc, #216]	; (800fccc <dhcp_recv+0x194>)
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800fbf8:	7cfb      	ldrb	r3, [r7, #19]
 800fbfa:	2b05      	cmp	r3, #5
 800fbfc:	d12a      	bne.n	800fc54 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800fbfe:	69fb      	ldr	r3, [r7, #28]
 800fc00:	795b      	ldrb	r3, [r3, #5]
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	d112      	bne.n	800fc2c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800fc06:	6979      	ldr	r1, [r7, #20]
 800fc08:	6a38      	ldr	r0, [r7, #32]
 800fc0a:	f7fe fe53 	bl	800e8b4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800fc0e:	6a3b      	ldr	r3, [r7, #32]
 800fc10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc14:	f003 0308 	and.w	r3, r3, #8
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d003      	beq.n	800fc24 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800fc1c:	6a38      	ldr	r0, [r7, #32]
 800fc1e:	f7fe fbc1 	bl	800e3a4 <dhcp_check>
 800fc22:	e047      	b.n	800fcb4 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800fc24:	6a38      	ldr	r0, [r7, #32]
 800fc26:	f7ff f867 	bl	800ecf8 <dhcp_bind>
 800fc2a:	e043      	b.n	800fcb4 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800fc2c:	69fb      	ldr	r3, [r7, #28]
 800fc2e:	795b      	ldrb	r3, [r3, #5]
 800fc30:	2b03      	cmp	r3, #3
 800fc32:	d007      	beq.n	800fc44 <dhcp_recv+0x10c>
 800fc34:	69fb      	ldr	r3, [r7, #28]
 800fc36:	795b      	ldrb	r3, [r3, #5]
 800fc38:	2b04      	cmp	r3, #4
 800fc3a:	d003      	beq.n	800fc44 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800fc3c:	69fb      	ldr	r3, [r7, #28]
 800fc3e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800fc40:	2b05      	cmp	r3, #5
 800fc42:	d137      	bne.n	800fcb4 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 800fc44:	6979      	ldr	r1, [r7, #20]
 800fc46:	6a38      	ldr	r0, [r7, #32]
 800fc48:	f7fe fe34 	bl	800e8b4 <dhcp_handle_ack>
      dhcp_bind(netif);
 800fc4c:	6a38      	ldr	r0, [r7, #32]
 800fc4e:	f7ff f853 	bl	800ecf8 <dhcp_bind>
 800fc52:	e02f      	b.n	800fcb4 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800fc54:	7cfb      	ldrb	r3, [r7, #19]
 800fc56:	2b06      	cmp	r3, #6
 800fc58:	d113      	bne.n	800fc82 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800fc5a:	69fb      	ldr	r3, [r7, #28]
 800fc5c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800fc5e:	2b03      	cmp	r3, #3
 800fc60:	d00b      	beq.n	800fc7a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	795b      	ldrb	r3, [r3, #5]
 800fc66:	2b01      	cmp	r3, #1
 800fc68:	d007      	beq.n	800fc7a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800fc6a:	69fb      	ldr	r3, [r7, #28]
 800fc6c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800fc6e:	2b04      	cmp	r3, #4
 800fc70:	d003      	beq.n	800fc7a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	795b      	ldrb	r3, [r3, #5]
 800fc76:	2b05      	cmp	r3, #5
 800fc78:	d103      	bne.n	800fc82 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800fc7a:	6a38      	ldr	r0, [r7, #32]
 800fc7c:	f7fe fb78 	bl	800e370 <dhcp_handle_nak>
 800fc80:	e018      	b.n	800fcb4 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800fc82:	7cfb      	ldrb	r3, [r7, #19]
 800fc84:	2b02      	cmp	r3, #2
 800fc86:	d108      	bne.n	800fc9a <dhcp_recv+0x162>
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	795b      	ldrb	r3, [r3, #5]
 800fc8c:	2b06      	cmp	r3, #6
 800fc8e:	d104      	bne.n	800fc9a <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800fc90:	6979      	ldr	r1, [r7, #20]
 800fc92:	6a38      	ldr	r0, [r7, #32]
 800fc94:	f7fe fbba 	bl	800e40c <dhcp_handle_offer>
 800fc98:	e00c      	b.n	800fcb4 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 800fc9a:	bf00      	nop
 800fc9c:	e00a      	b.n	800fcb4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800fc9e:	bf00      	nop
 800fca0:	e008      	b.n	800fcb4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800fca2:	bf00      	nop
 800fca4:	e006      	b.n	800fcb4 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 800fca6:	bf00      	nop
 800fca8:	e004      	b.n	800fcb4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800fcaa:	bf00      	nop
 800fcac:	e002      	b.n	800fcb4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800fcae:	bf00      	nop
 800fcb0:	e000      	b.n	800fcb4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800fcb2:	bf00      	nop
  pbuf_free(p);
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f7f7 f9e1 	bl	800707c <pbuf_free>
}
 800fcba:	bf00      	nop
 800fcbc:	3728      	adds	r7, #40	; 0x28
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	20003c24 	.word	0x20003c24
 800fcc8:	200071a4 	.word	0x200071a4
 800fccc:	200071ac 	.word	0x200071ac

0800fcd0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b088      	sub	sp, #32
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	60f8      	str	r0, [r7, #12]
 800fcd8:	60b9      	str	r1, [r7, #8]
 800fcda:	603b      	str	r3, [r7, #0]
 800fcdc:	4613      	mov	r3, r2
 800fcde:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d108      	bne.n	800fcf8 <dhcp_create_msg+0x28>
 800fce6:	4b5f      	ldr	r3, [pc, #380]	; (800fe64 <dhcp_create_msg+0x194>)
 800fce8:	f240 7269 	movw	r2, #1897	; 0x769
 800fcec:	495e      	ldr	r1, [pc, #376]	; (800fe68 <dhcp_create_msg+0x198>)
 800fcee:	485f      	ldr	r0, [pc, #380]	; (800fe6c <dhcp_create_msg+0x19c>)
 800fcf0:	f002 fc3a 	bl	8012568 <iprintf>
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	e0b1      	b.n	800fe5c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d108      	bne.n	800fd10 <dhcp_create_msg+0x40>
 800fcfe:	4b59      	ldr	r3, [pc, #356]	; (800fe64 <dhcp_create_msg+0x194>)
 800fd00:	f240 726a 	movw	r2, #1898	; 0x76a
 800fd04:	495a      	ldr	r1, [pc, #360]	; (800fe70 <dhcp_create_msg+0x1a0>)
 800fd06:	4859      	ldr	r0, [pc, #356]	; (800fe6c <dhcp_create_msg+0x19c>)
 800fd08:	f002 fc2e 	bl	8012568 <iprintf>
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	e0a5      	b.n	800fe5c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800fd10:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fd14:	f44f 719a 	mov.w	r1, #308	; 0x134
 800fd18:	2036      	movs	r0, #54	; 0x36
 800fd1a:	f7f6 fecf 	bl	8006abc <pbuf_alloc>
 800fd1e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800fd20:	69bb      	ldr	r3, [r7, #24]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d101      	bne.n	800fd2a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800fd26:	2300      	movs	r3, #0
 800fd28:	e098      	b.n	800fe5c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800fd2a:	69bb      	ldr	r3, [r7, #24]
 800fd2c:	895b      	ldrh	r3, [r3, #10]
 800fd2e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800fd32:	d206      	bcs.n	800fd42 <dhcp_create_msg+0x72>
 800fd34:	4b4b      	ldr	r3, [pc, #300]	; (800fe64 <dhcp_create_msg+0x194>)
 800fd36:	f240 7272 	movw	r2, #1906	; 0x772
 800fd3a:	494e      	ldr	r1, [pc, #312]	; (800fe74 <dhcp_create_msg+0x1a4>)
 800fd3c:	484b      	ldr	r0, [pc, #300]	; (800fe6c <dhcp_create_msg+0x19c>)
 800fd3e:	f002 fc13 	bl	8012568 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800fd42:	79fb      	ldrb	r3, [r7, #7]
 800fd44:	2b03      	cmp	r3, #3
 800fd46:	d103      	bne.n	800fd50 <dhcp_create_msg+0x80>
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	795b      	ldrb	r3, [r3, #5]
 800fd4c:	2b03      	cmp	r3, #3
 800fd4e:	d10d      	bne.n	800fd6c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	799b      	ldrb	r3, [r3, #6]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d105      	bne.n	800fd64 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800fd58:	f002 fc1e 	bl	8012598 <rand>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	461a      	mov	r2, r3
 800fd60:	4b45      	ldr	r3, [pc, #276]	; (800fe78 <dhcp_create_msg+0x1a8>)
 800fd62:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800fd64:	4b44      	ldr	r3, [pc, #272]	; (800fe78 <dhcp_create_msg+0x1a8>)
 800fd66:	681a      	ldr	r2, [r3, #0]
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800fd6c:	69bb      	ldr	r3, [r7, #24]
 800fd6e:	685b      	ldr	r3, [r3, #4]
 800fd70:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800fd72:	f44f 729a 	mov.w	r2, #308	; 0x134
 800fd76:	2100      	movs	r1, #0
 800fd78:	6978      	ldr	r0, [r7, #20]
 800fd7a:	f002 fbed 	bl	8012558 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	2201      	movs	r2, #1
 800fd82:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	2201      	movs	r2, #1
 800fd88:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7f5 feac 	bl	8005af6 <lwip_htonl>
 800fd9e:	4602      	mov	r2, r0
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800fda4:	79fb      	ldrb	r3, [r7, #7]
 800fda6:	2b08      	cmp	r3, #8
 800fda8:	d010      	beq.n	800fdcc <dhcp_create_msg+0xfc>
 800fdaa:	79fb      	ldrb	r3, [r7, #7]
 800fdac:	2b04      	cmp	r3, #4
 800fdae:	d00d      	beq.n	800fdcc <dhcp_create_msg+0xfc>
 800fdb0:	79fb      	ldrb	r3, [r7, #7]
 800fdb2:	2b07      	cmp	r3, #7
 800fdb4:	d00a      	beq.n	800fdcc <dhcp_create_msg+0xfc>
 800fdb6:	79fb      	ldrb	r3, [r7, #7]
 800fdb8:	2b03      	cmp	r3, #3
 800fdba:	d10c      	bne.n	800fdd6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800fdc0:	2b05      	cmp	r3, #5
 800fdc2:	d003      	beq.n	800fdcc <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	795b      	ldrb	r3, [r3, #5]
 800fdc8:	2b04      	cmp	r3, #4
 800fdca:	d104      	bne.n	800fdd6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	3304      	adds	r3, #4
 800fdd0:	681a      	ldr	r2, [r3, #0]
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	83fb      	strh	r3, [r7, #30]
 800fdda:	e00c      	b.n	800fdf6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800fddc:	8bfa      	ldrh	r2, [r7, #30]
 800fdde:	8bfb      	ldrh	r3, [r7, #30]
 800fde0:	68f9      	ldr	r1, [r7, #12]
 800fde2:	440a      	add	r2, r1
 800fde4:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 800fde8:	697a      	ldr	r2, [r7, #20]
 800fdea:	4413      	add	r3, r2
 800fdec:	460a      	mov	r2, r1
 800fdee:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800fdf0:	8bfb      	ldrh	r3, [r7, #30]
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	83fb      	strh	r3, [r7, #30]
 800fdf6:	8bfb      	ldrh	r3, [r7, #30]
 800fdf8:	2b05      	cmp	r3, #5
 800fdfa:	d9ef      	bls.n	800fddc <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	2200      	movs	r2, #0
 800fe00:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800fe04:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800fe08:	2200      	movs	r2, #0
 800fe0a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800fe0e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800fe12:	2200      	movs	r2, #0
 800fe14:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800fe18:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800fe22:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	2235      	movs	r2, #53	; 0x35
 800fe30:	2000      	movs	r0, #0
 800fe32:	f7ff fadd 	bl	800f3f0 <dhcp_option>
 800fe36:	4603      	mov	r3, r0
 800fe38:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fe40:	79fa      	ldrb	r2, [r7, #7]
 800fe42:	8a7b      	ldrh	r3, [r7, #18]
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7ff fb07 	bl	800f458 <dhcp_option_byte>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d002      	beq.n	800fe5a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800fe54:	683b      	ldr	r3, [r7, #0]
 800fe56:	8a7a      	ldrh	r2, [r7, #18]
 800fe58:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800fe5a:	69bb      	ldr	r3, [r7, #24]
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3720      	adds	r7, #32
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}
 800fe64:	0801598c 	.word	0x0801598c
 800fe68:	08015cac 	.word	0x08015cac
 800fe6c:	080159ec 	.word	0x080159ec
 800fe70:	08015ccc 	.word	0x08015ccc
 800fe74:	08015cec 	.word	0x08015cec
 800fe78:	20000564 	.word	0x20000564

0800fe7c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b084      	sub	sp, #16
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	4603      	mov	r3, r0
 800fe84:	60b9      	str	r1, [r7, #8]
 800fe86:	607a      	str	r2, [r7, #4]
 800fe88:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800fe8a:	89fb      	ldrh	r3, [r7, #14]
 800fe8c:	1c5a      	adds	r2, r3, #1
 800fe8e:	81fa      	strh	r2, [r7, #14]
 800fe90:	461a      	mov	r2, r3
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	4413      	add	r3, r2
 800fe96:	22ff      	movs	r2, #255	; 0xff
 800fe98:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800fe9a:	e007      	b.n	800feac <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800fe9c:	89fb      	ldrh	r3, [r7, #14]
 800fe9e:	1c5a      	adds	r2, r3, #1
 800fea0:	81fa      	strh	r2, [r7, #14]
 800fea2:	461a      	mov	r2, r3
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	4413      	add	r3, r2
 800fea8:	2200      	movs	r2, #0
 800feaa:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800feac:	89fb      	ldrh	r3, [r7, #14]
 800feae:	2b43      	cmp	r3, #67	; 0x43
 800feb0:	d904      	bls.n	800febc <dhcp_option_trailer+0x40>
 800feb2:	89fb      	ldrh	r3, [r7, #14]
 800feb4:	f003 0303 	and.w	r3, r3, #3
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d002      	beq.n	800fec2 <dhcp_option_trailer+0x46>
 800febc:	89fb      	ldrh	r3, [r7, #14]
 800febe:	2b43      	cmp	r3, #67	; 0x43
 800fec0:	d9ec      	bls.n	800fe9c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800fec2:	89fb      	ldrh	r3, [r7, #14]
 800fec4:	33f0      	adds	r3, #240	; 0xf0
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	4619      	mov	r1, r3
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f7f6 ff50 	bl	8006d70 <pbuf_realloc>
}
 800fed0:	bf00      	nop
 800fed2:	3710      	adds	r7, #16
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800fed8:	b480      	push	{r7}
 800feda:	b085      	sub	sp, #20
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d017      	beq.n	800ff16 <dhcp_supplied_address+0x3e>
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6a1b      	ldr	r3, [r3, #32]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d013      	beq.n	800ff16 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6a1b      	ldr	r3, [r3, #32]
 800fef2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	795b      	ldrb	r3, [r3, #5]
 800fef8:	2b0a      	cmp	r3, #10
 800fefa:	d007      	beq.n	800ff0c <dhcp_supplied_address+0x34>
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	795b      	ldrb	r3, [r3, #5]
 800ff00:	2b05      	cmp	r3, #5
 800ff02:	d003      	beq.n	800ff0c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800ff08:	2b04      	cmp	r3, #4
 800ff0a:	d101      	bne.n	800ff10 <dhcp_supplied_address+0x38>
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	e000      	b.n	800ff12 <dhcp_supplied_address+0x3a>
 800ff10:	2300      	movs	r3, #0
 800ff12:	b2db      	uxtb	r3, r3
 800ff14:	e000      	b.n	800ff18 <dhcp_supplied_address+0x40>
  }
  return 0;
 800ff16:	2300      	movs	r3, #0
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3714      	adds	r7, #20
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr

0800ff24 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800ff2c:	4915      	ldr	r1, [pc, #84]	; (800ff84 <etharp_free_entry+0x60>)
 800ff2e:	687a      	ldr	r2, [r7, #4]
 800ff30:	4613      	mov	r3, r2
 800ff32:	005b      	lsls	r3, r3, #1
 800ff34:	4413      	add	r3, r2
 800ff36:	00db      	lsls	r3, r3, #3
 800ff38:	440b      	add	r3, r1
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d013      	beq.n	800ff68 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800ff40:	4910      	ldr	r1, [pc, #64]	; (800ff84 <etharp_free_entry+0x60>)
 800ff42:	687a      	ldr	r2, [r7, #4]
 800ff44:	4613      	mov	r3, r2
 800ff46:	005b      	lsls	r3, r3, #1
 800ff48:	4413      	add	r3, r2
 800ff4a:	00db      	lsls	r3, r3, #3
 800ff4c:	440b      	add	r3, r1
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7f7 f893 	bl	800707c <pbuf_free>
    arp_table[i].q = NULL;
 800ff56:	490b      	ldr	r1, [pc, #44]	; (800ff84 <etharp_free_entry+0x60>)
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	4613      	mov	r3, r2
 800ff5c:	005b      	lsls	r3, r3, #1
 800ff5e:	4413      	add	r3, r2
 800ff60:	00db      	lsls	r3, r3, #3
 800ff62:	440b      	add	r3, r1
 800ff64:	2200      	movs	r2, #0
 800ff66:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800ff68:	4906      	ldr	r1, [pc, #24]	; (800ff84 <etharp_free_entry+0x60>)
 800ff6a:	687a      	ldr	r2, [r7, #4]
 800ff6c:	4613      	mov	r3, r2
 800ff6e:	005b      	lsls	r3, r3, #1
 800ff70:	4413      	add	r3, r2
 800ff72:	00db      	lsls	r3, r3, #3
 800ff74:	440b      	add	r3, r1
 800ff76:	3314      	adds	r3, #20
 800ff78:	2200      	movs	r2, #0
 800ff7a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800ff7c:	bf00      	nop
 800ff7e:	3708      	adds	r7, #8
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}
 800ff84:	20000568 	.word	0x20000568

0800ff88 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ff8e:	2300      	movs	r3, #0
 800ff90:	607b      	str	r3, [r7, #4]
 800ff92:	e096      	b.n	80100c2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800ff94:	494f      	ldr	r1, [pc, #316]	; (80100d4 <etharp_tmr+0x14c>)
 800ff96:	687a      	ldr	r2, [r7, #4]
 800ff98:	4613      	mov	r3, r2
 800ff9a:	005b      	lsls	r3, r3, #1
 800ff9c:	4413      	add	r3, r2
 800ff9e:	00db      	lsls	r3, r3, #3
 800ffa0:	440b      	add	r3, r1
 800ffa2:	3314      	adds	r3, #20
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800ffa8:	78fb      	ldrb	r3, [r7, #3]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	f000 8086 	beq.w	80100bc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800ffb0:	4948      	ldr	r1, [pc, #288]	; (80100d4 <etharp_tmr+0x14c>)
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	4613      	mov	r3, r2
 800ffb6:	005b      	lsls	r3, r3, #1
 800ffb8:	4413      	add	r3, r2
 800ffba:	00db      	lsls	r3, r3, #3
 800ffbc:	440b      	add	r3, r1
 800ffbe:	3312      	adds	r3, #18
 800ffc0:	881b      	ldrh	r3, [r3, #0]
 800ffc2:	3301      	adds	r3, #1
 800ffc4:	b298      	uxth	r0, r3
 800ffc6:	4943      	ldr	r1, [pc, #268]	; (80100d4 <etharp_tmr+0x14c>)
 800ffc8:	687a      	ldr	r2, [r7, #4]
 800ffca:	4613      	mov	r3, r2
 800ffcc:	005b      	lsls	r3, r3, #1
 800ffce:	4413      	add	r3, r2
 800ffd0:	00db      	lsls	r3, r3, #3
 800ffd2:	440b      	add	r3, r1
 800ffd4:	3312      	adds	r3, #18
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ffda:	493e      	ldr	r1, [pc, #248]	; (80100d4 <etharp_tmr+0x14c>)
 800ffdc:	687a      	ldr	r2, [r7, #4]
 800ffde:	4613      	mov	r3, r2
 800ffe0:	005b      	lsls	r3, r3, #1
 800ffe2:	4413      	add	r3, r2
 800ffe4:	00db      	lsls	r3, r3, #3
 800ffe6:	440b      	add	r3, r1
 800ffe8:	3312      	adds	r3, #18
 800ffea:	881b      	ldrh	r3, [r3, #0]
 800ffec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800fff0:	d215      	bcs.n	801001e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800fff2:	4938      	ldr	r1, [pc, #224]	; (80100d4 <etharp_tmr+0x14c>)
 800fff4:	687a      	ldr	r2, [r7, #4]
 800fff6:	4613      	mov	r3, r2
 800fff8:	005b      	lsls	r3, r3, #1
 800fffa:	4413      	add	r3, r2
 800fffc:	00db      	lsls	r3, r3, #3
 800fffe:	440b      	add	r3, r1
 8010000:	3314      	adds	r3, #20
 8010002:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010004:	2b01      	cmp	r3, #1
 8010006:	d10e      	bne.n	8010026 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010008:	4932      	ldr	r1, [pc, #200]	; (80100d4 <etharp_tmr+0x14c>)
 801000a:	687a      	ldr	r2, [r7, #4]
 801000c:	4613      	mov	r3, r2
 801000e:	005b      	lsls	r3, r3, #1
 8010010:	4413      	add	r3, r2
 8010012:	00db      	lsls	r3, r3, #3
 8010014:	440b      	add	r3, r1
 8010016:	3312      	adds	r3, #18
 8010018:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801001a:	2b04      	cmp	r3, #4
 801001c:	d903      	bls.n	8010026 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f7ff ff80 	bl	800ff24 <etharp_free_entry>
 8010024:	e04a      	b.n	80100bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010026:	492b      	ldr	r1, [pc, #172]	; (80100d4 <etharp_tmr+0x14c>)
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	4613      	mov	r3, r2
 801002c:	005b      	lsls	r3, r3, #1
 801002e:	4413      	add	r3, r2
 8010030:	00db      	lsls	r3, r3, #3
 8010032:	440b      	add	r3, r1
 8010034:	3314      	adds	r3, #20
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	2b03      	cmp	r3, #3
 801003a:	d10a      	bne.n	8010052 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801003c:	4925      	ldr	r1, [pc, #148]	; (80100d4 <etharp_tmr+0x14c>)
 801003e:	687a      	ldr	r2, [r7, #4]
 8010040:	4613      	mov	r3, r2
 8010042:	005b      	lsls	r3, r3, #1
 8010044:	4413      	add	r3, r2
 8010046:	00db      	lsls	r3, r3, #3
 8010048:	440b      	add	r3, r1
 801004a:	3314      	adds	r3, #20
 801004c:	2204      	movs	r2, #4
 801004e:	701a      	strb	r2, [r3, #0]
 8010050:	e034      	b.n	80100bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010052:	4920      	ldr	r1, [pc, #128]	; (80100d4 <etharp_tmr+0x14c>)
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	4613      	mov	r3, r2
 8010058:	005b      	lsls	r3, r3, #1
 801005a:	4413      	add	r3, r2
 801005c:	00db      	lsls	r3, r3, #3
 801005e:	440b      	add	r3, r1
 8010060:	3314      	adds	r3, #20
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	2b04      	cmp	r3, #4
 8010066:	d10a      	bne.n	801007e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010068:	491a      	ldr	r1, [pc, #104]	; (80100d4 <etharp_tmr+0x14c>)
 801006a:	687a      	ldr	r2, [r7, #4]
 801006c:	4613      	mov	r3, r2
 801006e:	005b      	lsls	r3, r3, #1
 8010070:	4413      	add	r3, r2
 8010072:	00db      	lsls	r3, r3, #3
 8010074:	440b      	add	r3, r1
 8010076:	3314      	adds	r3, #20
 8010078:	2202      	movs	r2, #2
 801007a:	701a      	strb	r2, [r3, #0]
 801007c:	e01e      	b.n	80100bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801007e:	4915      	ldr	r1, [pc, #84]	; (80100d4 <etharp_tmr+0x14c>)
 8010080:	687a      	ldr	r2, [r7, #4]
 8010082:	4613      	mov	r3, r2
 8010084:	005b      	lsls	r3, r3, #1
 8010086:	4413      	add	r3, r2
 8010088:	00db      	lsls	r3, r3, #3
 801008a:	440b      	add	r3, r1
 801008c:	3314      	adds	r3, #20
 801008e:	781b      	ldrb	r3, [r3, #0]
 8010090:	2b01      	cmp	r3, #1
 8010092:	d113      	bne.n	80100bc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010094:	490f      	ldr	r1, [pc, #60]	; (80100d4 <etharp_tmr+0x14c>)
 8010096:	687a      	ldr	r2, [r7, #4]
 8010098:	4613      	mov	r3, r2
 801009a:	005b      	lsls	r3, r3, #1
 801009c:	4413      	add	r3, r2
 801009e:	00db      	lsls	r3, r3, #3
 80100a0:	440b      	add	r3, r1
 80100a2:	3308      	adds	r3, #8
 80100a4:	6818      	ldr	r0, [r3, #0]
 80100a6:	687a      	ldr	r2, [r7, #4]
 80100a8:	4613      	mov	r3, r2
 80100aa:	005b      	lsls	r3, r3, #1
 80100ac:	4413      	add	r3, r2
 80100ae:	00db      	lsls	r3, r3, #3
 80100b0:	4a08      	ldr	r2, [pc, #32]	; (80100d4 <etharp_tmr+0x14c>)
 80100b2:	4413      	add	r3, r2
 80100b4:	3304      	adds	r3, #4
 80100b6:	4619      	mov	r1, r3
 80100b8:	f000 fe72 	bl	8010da0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	3301      	adds	r3, #1
 80100c0:	607b      	str	r3, [r7, #4]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	2b09      	cmp	r3, #9
 80100c6:	f77f af65 	ble.w	800ff94 <etharp_tmr+0xc>
      }
    }
  }
}
 80100ca:	bf00      	nop
 80100cc:	3708      	adds	r7, #8
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	20000568 	.word	0x20000568

080100d8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b08a      	sub	sp, #40	; 0x28
 80100dc:	af00      	add	r7, sp, #0
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	460b      	mov	r3, r1
 80100e2:	607a      	str	r2, [r7, #4]
 80100e4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80100e6:	230a      	movs	r3, #10
 80100e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80100ea:	230a      	movs	r3, #10
 80100ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80100ee:	230a      	movs	r3, #10
 80100f0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80100f2:	2300      	movs	r3, #0
 80100f4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80100f6:	230a      	movs	r3, #10
 80100f8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80100fa:	2300      	movs	r3, #0
 80100fc:	83bb      	strh	r3, [r7, #28]
 80100fe:	2300      	movs	r3, #0
 8010100:	837b      	strh	r3, [r7, #26]
 8010102:	2300      	movs	r3, #0
 8010104:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010106:	2300      	movs	r3, #0
 8010108:	843b      	strh	r3, [r7, #32]
 801010a:	e0ae      	b.n	801026a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801010c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010110:	49a6      	ldr	r1, [pc, #664]	; (80103ac <etharp_find_entry+0x2d4>)
 8010112:	4613      	mov	r3, r2
 8010114:	005b      	lsls	r3, r3, #1
 8010116:	4413      	add	r3, r2
 8010118:	00db      	lsls	r3, r3, #3
 801011a:	440b      	add	r3, r1
 801011c:	3314      	adds	r3, #20
 801011e:	781b      	ldrb	r3, [r3, #0]
 8010120:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010122:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010126:	2b0a      	cmp	r3, #10
 8010128:	d105      	bne.n	8010136 <etharp_find_entry+0x5e>
 801012a:	7dfb      	ldrb	r3, [r7, #23]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d102      	bne.n	8010136 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010130:	8c3b      	ldrh	r3, [r7, #32]
 8010132:	847b      	strh	r3, [r7, #34]	; 0x22
 8010134:	e095      	b.n	8010262 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8010136:	7dfb      	ldrb	r3, [r7, #23]
 8010138:	2b00      	cmp	r3, #0
 801013a:	f000 8092 	beq.w	8010262 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801013e:	7dfb      	ldrb	r3, [r7, #23]
 8010140:	2b01      	cmp	r3, #1
 8010142:	d009      	beq.n	8010158 <etharp_find_entry+0x80>
 8010144:	7dfb      	ldrb	r3, [r7, #23]
 8010146:	2b01      	cmp	r3, #1
 8010148:	d806      	bhi.n	8010158 <etharp_find_entry+0x80>
 801014a:	4b99      	ldr	r3, [pc, #612]	; (80103b0 <etharp_find_entry+0x2d8>)
 801014c:	f44f 7292 	mov.w	r2, #292	; 0x124
 8010150:	4998      	ldr	r1, [pc, #608]	; (80103b4 <etharp_find_entry+0x2dc>)
 8010152:	4899      	ldr	r0, [pc, #612]	; (80103b8 <etharp_find_entry+0x2e0>)
 8010154:	f002 fa08 	bl	8012568 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d020      	beq.n	80101a0 <etharp_find_entry+0xc8>
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	6819      	ldr	r1, [r3, #0]
 8010162:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010166:	4891      	ldr	r0, [pc, #580]	; (80103ac <etharp_find_entry+0x2d4>)
 8010168:	4613      	mov	r3, r2
 801016a:	005b      	lsls	r3, r3, #1
 801016c:	4413      	add	r3, r2
 801016e:	00db      	lsls	r3, r3, #3
 8010170:	4403      	add	r3, r0
 8010172:	3304      	adds	r3, #4
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	4299      	cmp	r1, r3
 8010178:	d112      	bne.n	80101a0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d00c      	beq.n	801019a <etharp_find_entry+0xc2>
 8010180:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010184:	4989      	ldr	r1, [pc, #548]	; (80103ac <etharp_find_entry+0x2d4>)
 8010186:	4613      	mov	r3, r2
 8010188:	005b      	lsls	r3, r3, #1
 801018a:	4413      	add	r3, r2
 801018c:	00db      	lsls	r3, r3, #3
 801018e:	440b      	add	r3, r1
 8010190:	3308      	adds	r3, #8
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	687a      	ldr	r2, [r7, #4]
 8010196:	429a      	cmp	r2, r3
 8010198:	d102      	bne.n	80101a0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801019a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801019e:	e100      	b.n	80103a2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80101a0:	7dfb      	ldrb	r3, [r7, #23]
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d140      	bne.n	8010228 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80101a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101aa:	4980      	ldr	r1, [pc, #512]	; (80103ac <etharp_find_entry+0x2d4>)
 80101ac:	4613      	mov	r3, r2
 80101ae:	005b      	lsls	r3, r3, #1
 80101b0:	4413      	add	r3, r2
 80101b2:	00db      	lsls	r3, r3, #3
 80101b4:	440b      	add	r3, r1
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d01a      	beq.n	80101f2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80101bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101c0:	497a      	ldr	r1, [pc, #488]	; (80103ac <etharp_find_entry+0x2d4>)
 80101c2:	4613      	mov	r3, r2
 80101c4:	005b      	lsls	r3, r3, #1
 80101c6:	4413      	add	r3, r2
 80101c8:	00db      	lsls	r3, r3, #3
 80101ca:	440b      	add	r3, r1
 80101cc:	3312      	adds	r3, #18
 80101ce:	881b      	ldrh	r3, [r3, #0]
 80101d0:	8bba      	ldrh	r2, [r7, #28]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d845      	bhi.n	8010262 <etharp_find_entry+0x18a>
            old_queue = i;
 80101d6:	8c3b      	ldrh	r3, [r7, #32]
 80101d8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80101da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101de:	4973      	ldr	r1, [pc, #460]	; (80103ac <etharp_find_entry+0x2d4>)
 80101e0:	4613      	mov	r3, r2
 80101e2:	005b      	lsls	r3, r3, #1
 80101e4:	4413      	add	r3, r2
 80101e6:	00db      	lsls	r3, r3, #3
 80101e8:	440b      	add	r3, r1
 80101ea:	3312      	adds	r3, #18
 80101ec:	881b      	ldrh	r3, [r3, #0]
 80101ee:	83bb      	strh	r3, [r7, #28]
 80101f0:	e037      	b.n	8010262 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80101f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80101f6:	496d      	ldr	r1, [pc, #436]	; (80103ac <etharp_find_entry+0x2d4>)
 80101f8:	4613      	mov	r3, r2
 80101fa:	005b      	lsls	r3, r3, #1
 80101fc:	4413      	add	r3, r2
 80101fe:	00db      	lsls	r3, r3, #3
 8010200:	440b      	add	r3, r1
 8010202:	3312      	adds	r3, #18
 8010204:	881b      	ldrh	r3, [r3, #0]
 8010206:	8b7a      	ldrh	r2, [r7, #26]
 8010208:	429a      	cmp	r2, r3
 801020a:	d82a      	bhi.n	8010262 <etharp_find_entry+0x18a>
            old_pending = i;
 801020c:	8c3b      	ldrh	r3, [r7, #32]
 801020e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8010210:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010214:	4965      	ldr	r1, [pc, #404]	; (80103ac <etharp_find_entry+0x2d4>)
 8010216:	4613      	mov	r3, r2
 8010218:	005b      	lsls	r3, r3, #1
 801021a:	4413      	add	r3, r2
 801021c:	00db      	lsls	r3, r3, #3
 801021e:	440b      	add	r3, r1
 8010220:	3312      	adds	r3, #18
 8010222:	881b      	ldrh	r3, [r3, #0]
 8010224:	837b      	strh	r3, [r7, #26]
 8010226:	e01c      	b.n	8010262 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010228:	7dfb      	ldrb	r3, [r7, #23]
 801022a:	2b01      	cmp	r3, #1
 801022c:	d919      	bls.n	8010262 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801022e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010232:	495e      	ldr	r1, [pc, #376]	; (80103ac <etharp_find_entry+0x2d4>)
 8010234:	4613      	mov	r3, r2
 8010236:	005b      	lsls	r3, r3, #1
 8010238:	4413      	add	r3, r2
 801023a:	00db      	lsls	r3, r3, #3
 801023c:	440b      	add	r3, r1
 801023e:	3312      	adds	r3, #18
 8010240:	881b      	ldrh	r3, [r3, #0]
 8010242:	8b3a      	ldrh	r2, [r7, #24]
 8010244:	429a      	cmp	r2, r3
 8010246:	d80c      	bhi.n	8010262 <etharp_find_entry+0x18a>
            old_stable = i;
 8010248:	8c3b      	ldrh	r3, [r7, #32]
 801024a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801024c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010250:	4956      	ldr	r1, [pc, #344]	; (80103ac <etharp_find_entry+0x2d4>)
 8010252:	4613      	mov	r3, r2
 8010254:	005b      	lsls	r3, r3, #1
 8010256:	4413      	add	r3, r2
 8010258:	00db      	lsls	r3, r3, #3
 801025a:	440b      	add	r3, r1
 801025c:	3312      	adds	r3, #18
 801025e:	881b      	ldrh	r3, [r3, #0]
 8010260:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010262:	8c3b      	ldrh	r3, [r7, #32]
 8010264:	3301      	adds	r3, #1
 8010266:	b29b      	uxth	r3, r3
 8010268:	843b      	strh	r3, [r7, #32]
 801026a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801026e:	2b09      	cmp	r3, #9
 8010270:	f77f af4c 	ble.w	801010c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010274:	7afb      	ldrb	r3, [r7, #11]
 8010276:	f003 0302 	and.w	r3, r3, #2
 801027a:	2b00      	cmp	r3, #0
 801027c:	d108      	bne.n	8010290 <etharp_find_entry+0x1b8>
 801027e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8010282:	2b0a      	cmp	r3, #10
 8010284:	d107      	bne.n	8010296 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8010286:	7afb      	ldrb	r3, [r7, #11]
 8010288:	f003 0301 	and.w	r3, r3, #1
 801028c:	2b00      	cmp	r3, #0
 801028e:	d102      	bne.n	8010296 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010290:	f04f 33ff 	mov.w	r3, #4294967295
 8010294:	e085      	b.n	80103a2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8010296:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801029a:	2b09      	cmp	r3, #9
 801029c:	dc02      	bgt.n	80102a4 <etharp_find_entry+0x1cc>
    i = empty;
 801029e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102a0:	843b      	strh	r3, [r7, #32]
 80102a2:	e039      	b.n	8010318 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80102a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80102a8:	2b09      	cmp	r3, #9
 80102aa:	dc14      	bgt.n	80102d6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80102ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102ae:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80102b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80102b4:	493d      	ldr	r1, [pc, #244]	; (80103ac <etharp_find_entry+0x2d4>)
 80102b6:	4613      	mov	r3, r2
 80102b8:	005b      	lsls	r3, r3, #1
 80102ba:	4413      	add	r3, r2
 80102bc:	00db      	lsls	r3, r3, #3
 80102be:	440b      	add	r3, r1
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d018      	beq.n	80102f8 <etharp_find_entry+0x220>
 80102c6:	4b3a      	ldr	r3, [pc, #232]	; (80103b0 <etharp_find_entry+0x2d8>)
 80102c8:	f240 126d 	movw	r2, #365	; 0x16d
 80102cc:	493b      	ldr	r1, [pc, #236]	; (80103bc <etharp_find_entry+0x2e4>)
 80102ce:	483a      	ldr	r0, [pc, #232]	; (80103b8 <etharp_find_entry+0x2e0>)
 80102d0:	f002 f94a 	bl	8012568 <iprintf>
 80102d4:	e010      	b.n	80102f8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80102d6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80102da:	2b09      	cmp	r3, #9
 80102dc:	dc02      	bgt.n	80102e4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80102de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80102e0:	843b      	strh	r3, [r7, #32]
 80102e2:	e009      	b.n	80102f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80102e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80102e8:	2b09      	cmp	r3, #9
 80102ea:	dc02      	bgt.n	80102f2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80102ec:	8bfb      	ldrh	r3, [r7, #30]
 80102ee:	843b      	strh	r3, [r7, #32]
 80102f0:	e002      	b.n	80102f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80102f2:	f04f 33ff 	mov.w	r3, #4294967295
 80102f6:	e054      	b.n	80103a2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80102f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80102fc:	2b09      	cmp	r3, #9
 80102fe:	dd06      	ble.n	801030e <etharp_find_entry+0x236>
 8010300:	4b2b      	ldr	r3, [pc, #172]	; (80103b0 <etharp_find_entry+0x2d8>)
 8010302:	f240 127f 	movw	r2, #383	; 0x17f
 8010306:	492e      	ldr	r1, [pc, #184]	; (80103c0 <etharp_find_entry+0x2e8>)
 8010308:	482b      	ldr	r0, [pc, #172]	; (80103b8 <etharp_find_entry+0x2e0>)
 801030a:	f002 f92d 	bl	8012568 <iprintf>
    etharp_free_entry(i);
 801030e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010312:	4618      	mov	r0, r3
 8010314:	f7ff fe06 	bl	800ff24 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010318:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801031c:	2b09      	cmp	r3, #9
 801031e:	dd06      	ble.n	801032e <etharp_find_entry+0x256>
 8010320:	4b23      	ldr	r3, [pc, #140]	; (80103b0 <etharp_find_entry+0x2d8>)
 8010322:	f240 1283 	movw	r2, #387	; 0x183
 8010326:	4926      	ldr	r1, [pc, #152]	; (80103c0 <etharp_find_entry+0x2e8>)
 8010328:	4823      	ldr	r0, [pc, #140]	; (80103b8 <etharp_find_entry+0x2e0>)
 801032a:	f002 f91d 	bl	8012568 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801032e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010332:	491e      	ldr	r1, [pc, #120]	; (80103ac <etharp_find_entry+0x2d4>)
 8010334:	4613      	mov	r3, r2
 8010336:	005b      	lsls	r3, r3, #1
 8010338:	4413      	add	r3, r2
 801033a:	00db      	lsls	r3, r3, #3
 801033c:	440b      	add	r3, r1
 801033e:	3314      	adds	r3, #20
 8010340:	781b      	ldrb	r3, [r3, #0]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d006      	beq.n	8010354 <etharp_find_entry+0x27c>
 8010346:	4b1a      	ldr	r3, [pc, #104]	; (80103b0 <etharp_find_entry+0x2d8>)
 8010348:	f240 1285 	movw	r2, #389	; 0x185
 801034c:	491d      	ldr	r1, [pc, #116]	; (80103c4 <etharp_find_entry+0x2ec>)
 801034e:	481a      	ldr	r0, [pc, #104]	; (80103b8 <etharp_find_entry+0x2e0>)
 8010350:	f002 f90a 	bl	8012568 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d00b      	beq.n	8010372 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801035a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	6819      	ldr	r1, [r3, #0]
 8010362:	4812      	ldr	r0, [pc, #72]	; (80103ac <etharp_find_entry+0x2d4>)
 8010364:	4613      	mov	r3, r2
 8010366:	005b      	lsls	r3, r3, #1
 8010368:	4413      	add	r3, r2
 801036a:	00db      	lsls	r3, r3, #3
 801036c:	4403      	add	r3, r0
 801036e:	3304      	adds	r3, #4
 8010370:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010372:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010376:	490d      	ldr	r1, [pc, #52]	; (80103ac <etharp_find_entry+0x2d4>)
 8010378:	4613      	mov	r3, r2
 801037a:	005b      	lsls	r3, r3, #1
 801037c:	4413      	add	r3, r2
 801037e:	00db      	lsls	r3, r3, #3
 8010380:	440b      	add	r3, r1
 8010382:	3312      	adds	r3, #18
 8010384:	2200      	movs	r2, #0
 8010386:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010388:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801038c:	4907      	ldr	r1, [pc, #28]	; (80103ac <etharp_find_entry+0x2d4>)
 801038e:	4613      	mov	r3, r2
 8010390:	005b      	lsls	r3, r3, #1
 8010392:	4413      	add	r3, r2
 8010394:	00db      	lsls	r3, r3, #3
 8010396:	440b      	add	r3, r1
 8010398:	3308      	adds	r3, #8
 801039a:	687a      	ldr	r2, [r7, #4]
 801039c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801039e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80103a2:	4618      	mov	r0, r3
 80103a4:	3728      	adds	r7, #40	; 0x28
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop
 80103ac:	20000568 	.word	0x20000568
 80103b0:	08015d2c 	.word	0x08015d2c
 80103b4:	08015d64 	.word	0x08015d64
 80103b8:	08015da4 	.word	0x08015da4
 80103bc:	08015dcc 	.word	0x08015dcc
 80103c0:	08015de4 	.word	0x08015de4
 80103c4:	08015df8 	.word	0x08015df8

080103c8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b088      	sub	sp, #32
 80103cc:	af02      	add	r7, sp, #8
 80103ce:	60f8      	str	r0, [r7, #12]
 80103d0:	60b9      	str	r1, [r7, #8]
 80103d2:	607a      	str	r2, [r7, #4]
 80103d4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80103dc:	2b06      	cmp	r3, #6
 80103de:	d006      	beq.n	80103ee <etharp_update_arp_entry+0x26>
 80103e0:	4b48      	ldr	r3, [pc, #288]	; (8010504 <etharp_update_arp_entry+0x13c>)
 80103e2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80103e6:	4948      	ldr	r1, [pc, #288]	; (8010508 <etharp_update_arp_entry+0x140>)
 80103e8:	4848      	ldr	r0, [pc, #288]	; (801050c <etharp_update_arp_entry+0x144>)
 80103ea:	f002 f8bd 	bl	8012568 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d012      	beq.n	801041a <etharp_update_arp_entry+0x52>
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d00e      	beq.n	801041a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80103fc:	68bb      	ldr	r3, [r7, #8]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	68f9      	ldr	r1, [r7, #12]
 8010402:	4618      	mov	r0, r3
 8010404:	f001 f91e 	bl	8011644 <ip4_addr_isbroadcast_u32>
 8010408:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801040a:	2b00      	cmp	r3, #0
 801040c:	d105      	bne.n	801041a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010416:	2be0      	cmp	r3, #224	; 0xe0
 8010418:	d102      	bne.n	8010420 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801041a:	f06f 030f 	mvn.w	r3, #15
 801041e:	e06c      	b.n	80104fa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010420:	78fb      	ldrb	r3, [r7, #3]
 8010422:	68fa      	ldr	r2, [r7, #12]
 8010424:	4619      	mov	r1, r3
 8010426:	68b8      	ldr	r0, [r7, #8]
 8010428:	f7ff fe56 	bl	80100d8 <etharp_find_entry>
 801042c:	4603      	mov	r3, r0
 801042e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010430:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010434:	2b00      	cmp	r3, #0
 8010436:	da02      	bge.n	801043e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010438:	8afb      	ldrh	r3, [r7, #22]
 801043a:	b25b      	sxtb	r3, r3
 801043c:	e05d      	b.n	80104fa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801043e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010442:	4933      	ldr	r1, [pc, #204]	; (8010510 <etharp_update_arp_entry+0x148>)
 8010444:	4613      	mov	r3, r2
 8010446:	005b      	lsls	r3, r3, #1
 8010448:	4413      	add	r3, r2
 801044a:	00db      	lsls	r3, r3, #3
 801044c:	440b      	add	r3, r1
 801044e:	3314      	adds	r3, #20
 8010450:	2202      	movs	r2, #2
 8010452:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010454:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010458:	492d      	ldr	r1, [pc, #180]	; (8010510 <etharp_update_arp_entry+0x148>)
 801045a:	4613      	mov	r3, r2
 801045c:	005b      	lsls	r3, r3, #1
 801045e:	4413      	add	r3, r2
 8010460:	00db      	lsls	r3, r3, #3
 8010462:	440b      	add	r3, r1
 8010464:	3308      	adds	r3, #8
 8010466:	68fa      	ldr	r2, [r7, #12]
 8010468:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801046a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801046e:	4613      	mov	r3, r2
 8010470:	005b      	lsls	r3, r3, #1
 8010472:	4413      	add	r3, r2
 8010474:	00db      	lsls	r3, r3, #3
 8010476:	3308      	adds	r3, #8
 8010478:	4a25      	ldr	r2, [pc, #148]	; (8010510 <etharp_update_arp_entry+0x148>)
 801047a:	4413      	add	r3, r2
 801047c:	3304      	adds	r3, #4
 801047e:	2206      	movs	r2, #6
 8010480:	6879      	ldr	r1, [r7, #4]
 8010482:	4618      	mov	r0, r3
 8010484:	f002 f85d 	bl	8012542 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010488:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801048c:	4920      	ldr	r1, [pc, #128]	; (8010510 <etharp_update_arp_entry+0x148>)
 801048e:	4613      	mov	r3, r2
 8010490:	005b      	lsls	r3, r3, #1
 8010492:	4413      	add	r3, r2
 8010494:	00db      	lsls	r3, r3, #3
 8010496:	440b      	add	r3, r1
 8010498:	3312      	adds	r3, #18
 801049a:	2200      	movs	r2, #0
 801049c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801049e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80104a2:	491b      	ldr	r1, [pc, #108]	; (8010510 <etharp_update_arp_entry+0x148>)
 80104a4:	4613      	mov	r3, r2
 80104a6:	005b      	lsls	r3, r3, #1
 80104a8:	4413      	add	r3, r2
 80104aa:	00db      	lsls	r3, r3, #3
 80104ac:	440b      	add	r3, r1
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d021      	beq.n	80104f8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80104b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80104b8:	4915      	ldr	r1, [pc, #84]	; (8010510 <etharp_update_arp_entry+0x148>)
 80104ba:	4613      	mov	r3, r2
 80104bc:	005b      	lsls	r3, r3, #1
 80104be:	4413      	add	r3, r2
 80104c0:	00db      	lsls	r3, r3, #3
 80104c2:	440b      	add	r3, r1
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80104c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80104cc:	4910      	ldr	r1, [pc, #64]	; (8010510 <etharp_update_arp_entry+0x148>)
 80104ce:	4613      	mov	r3, r2
 80104d0:	005b      	lsls	r3, r3, #1
 80104d2:	4413      	add	r3, r2
 80104d4:	00db      	lsls	r3, r3, #3
 80104d6:	440b      	add	r3, r1
 80104d8:	2200      	movs	r2, #0
 80104da:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80104e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80104e6:	9300      	str	r3, [sp, #0]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6939      	ldr	r1, [r7, #16]
 80104ec:	68f8      	ldr	r0, [r7, #12]
 80104ee:	f001 ffad 	bl	801244c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80104f2:	6938      	ldr	r0, [r7, #16]
 80104f4:	f7f6 fdc2 	bl	800707c <pbuf_free>
  }
  return ERR_OK;
 80104f8:	2300      	movs	r3, #0
}
 80104fa:	4618      	mov	r0, r3
 80104fc:	3718      	adds	r7, #24
 80104fe:	46bd      	mov	sp, r7
 8010500:	bd80      	pop	{r7, pc}
 8010502:	bf00      	nop
 8010504:	08015d2c 	.word	0x08015d2c
 8010508:	08015e24 	.word	0x08015e24
 801050c:	08015da4 	.word	0x08015da4
 8010510:	20000568 	.word	0x20000568

08010514 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b084      	sub	sp, #16
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801051c:	2300      	movs	r3, #0
 801051e:	60fb      	str	r3, [r7, #12]
 8010520:	e01e      	b.n	8010560 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8010522:	4913      	ldr	r1, [pc, #76]	; (8010570 <etharp_cleanup_netif+0x5c>)
 8010524:	68fa      	ldr	r2, [r7, #12]
 8010526:	4613      	mov	r3, r2
 8010528:	005b      	lsls	r3, r3, #1
 801052a:	4413      	add	r3, r2
 801052c:	00db      	lsls	r3, r3, #3
 801052e:	440b      	add	r3, r1
 8010530:	3314      	adds	r3, #20
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010536:	7afb      	ldrb	r3, [r7, #11]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d00e      	beq.n	801055a <etharp_cleanup_netif+0x46>
 801053c:	490c      	ldr	r1, [pc, #48]	; (8010570 <etharp_cleanup_netif+0x5c>)
 801053e:	68fa      	ldr	r2, [r7, #12]
 8010540:	4613      	mov	r3, r2
 8010542:	005b      	lsls	r3, r3, #1
 8010544:	4413      	add	r3, r2
 8010546:	00db      	lsls	r3, r3, #3
 8010548:	440b      	add	r3, r1
 801054a:	3308      	adds	r3, #8
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	687a      	ldr	r2, [r7, #4]
 8010550:	429a      	cmp	r2, r3
 8010552:	d102      	bne.n	801055a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8010554:	68f8      	ldr	r0, [r7, #12]
 8010556:	f7ff fce5 	bl	800ff24 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	3301      	adds	r3, #1
 801055e:	60fb      	str	r3, [r7, #12]
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	2b09      	cmp	r3, #9
 8010564:	dddd      	ble.n	8010522 <etharp_cleanup_netif+0xe>
    }
  }
}
 8010566:	bf00      	nop
 8010568:	3710      	adds	r7, #16
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}
 801056e:	bf00      	nop
 8010570:	20000568 	.word	0x20000568

08010574 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010574:	b5b0      	push	{r4, r5, r7, lr}
 8010576:	b08a      	sub	sp, #40	; 0x28
 8010578:	af04      	add	r7, sp, #16
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d107      	bne.n	8010594 <etharp_input+0x20>
 8010584:	4b3f      	ldr	r3, [pc, #252]	; (8010684 <etharp_input+0x110>)
 8010586:	f240 228a 	movw	r2, #650	; 0x28a
 801058a:	493f      	ldr	r1, [pc, #252]	; (8010688 <etharp_input+0x114>)
 801058c:	483f      	ldr	r0, [pc, #252]	; (801068c <etharp_input+0x118>)
 801058e:	f001 ffeb 	bl	8012568 <iprintf>
 8010592:	e074      	b.n	801067e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	685b      	ldr	r3, [r3, #4]
 8010598:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	881b      	ldrh	r3, [r3, #0]
 801059e:	b29b      	uxth	r3, r3
 80105a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105a4:	d10c      	bne.n	80105c0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80105aa:	2b06      	cmp	r3, #6
 80105ac:	d108      	bne.n	80105c0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80105ae:	693b      	ldr	r3, [r7, #16]
 80105b0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80105b2:	2b04      	cmp	r3, #4
 80105b4:	d104      	bne.n	80105c0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	885b      	ldrh	r3, [r3, #2]
 80105ba:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80105bc:	2b08      	cmp	r3, #8
 80105be:	d003      	beq.n	80105c8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f7f6 fd5b 	bl	800707c <pbuf_free>
    return;
 80105c6:	e05a      	b.n	801067e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	330e      	adds	r3, #14
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	3318      	adds	r3, #24
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	3304      	adds	r3, #4
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d102      	bne.n	80105e8 <etharp_input+0x74>
    for_us = 0;
 80105e2:	2300      	movs	r3, #0
 80105e4:	75fb      	strb	r3, [r7, #23]
 80105e6:	e009      	b.n	80105fc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80105e8:	68ba      	ldr	r2, [r7, #8]
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	3304      	adds	r3, #4
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	bf0c      	ite	eq
 80105f4:	2301      	moveq	r3, #1
 80105f6:	2300      	movne	r3, #0
 80105f8:	b2db      	uxtb	r3, r3
 80105fa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80105fc:	693b      	ldr	r3, [r7, #16]
 80105fe:	f103 0208 	add.w	r2, r3, #8
 8010602:	7dfb      	ldrb	r3, [r7, #23]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d001      	beq.n	801060c <etharp_input+0x98>
 8010608:	2301      	movs	r3, #1
 801060a:	e000      	b.n	801060e <etharp_input+0x9a>
 801060c:	2302      	movs	r3, #2
 801060e:	f107 010c 	add.w	r1, r7, #12
 8010612:	6838      	ldr	r0, [r7, #0]
 8010614:	f7ff fed8 	bl	80103c8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010618:	693b      	ldr	r3, [r7, #16]
 801061a:	88db      	ldrh	r3, [r3, #6]
 801061c:	b29b      	uxth	r3, r3
 801061e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010622:	d003      	beq.n	801062c <etharp_input+0xb8>
 8010624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010628:	d01e      	beq.n	8010668 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801062a:	e025      	b.n	8010678 <etharp_input+0x104>
      if (for_us) {
 801062c:	7dfb      	ldrb	r3, [r7, #23]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d021      	beq.n	8010676 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010638:	693b      	ldr	r3, [r7, #16]
 801063a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010648:	693a      	ldr	r2, [r7, #16]
 801064a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801064c:	2102      	movs	r1, #2
 801064e:	9103      	str	r1, [sp, #12]
 8010650:	f107 010c 	add.w	r1, r7, #12
 8010654:	9102      	str	r1, [sp, #8]
 8010656:	9201      	str	r2, [sp, #4]
 8010658:	9300      	str	r3, [sp, #0]
 801065a:	462b      	mov	r3, r5
 801065c:	4622      	mov	r2, r4
 801065e:	4601      	mov	r1, r0
 8010660:	6838      	ldr	r0, [r7, #0]
 8010662:	f000 faef 	bl	8010c44 <etharp_raw>
      break;
 8010666:	e006      	b.n	8010676 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8010668:	f107 030c 	add.w	r3, r7, #12
 801066c:	4619      	mov	r1, r3
 801066e:	6838      	ldr	r0, [r7, #0]
 8010670:	f7fe f9fe 	bl	800ea70 <dhcp_arp_reply>
      break;
 8010674:	e000      	b.n	8010678 <etharp_input+0x104>
      break;
 8010676:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f7f6 fcff 	bl	800707c <pbuf_free>
}
 801067e:	3718      	adds	r7, #24
 8010680:	46bd      	mov	sp, r7
 8010682:	bdb0      	pop	{r4, r5, r7, pc}
 8010684:	08015d2c 	.word	0x08015d2c
 8010688:	08015e7c 	.word	0x08015e7c
 801068c:	08015da4 	.word	0x08015da4

08010690 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b086      	sub	sp, #24
 8010694:	af02      	add	r7, sp, #8
 8010696:	60f8      	str	r0, [r7, #12]
 8010698:	60b9      	str	r1, [r7, #8]
 801069a:	4613      	mov	r3, r2
 801069c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801069e:	79fa      	ldrb	r2, [r7, #7]
 80106a0:	4944      	ldr	r1, [pc, #272]	; (80107b4 <etharp_output_to_arp_index+0x124>)
 80106a2:	4613      	mov	r3, r2
 80106a4:	005b      	lsls	r3, r3, #1
 80106a6:	4413      	add	r3, r2
 80106a8:	00db      	lsls	r3, r3, #3
 80106aa:	440b      	add	r3, r1
 80106ac:	3314      	adds	r3, #20
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	2b01      	cmp	r3, #1
 80106b2:	d806      	bhi.n	80106c2 <etharp_output_to_arp_index+0x32>
 80106b4:	4b40      	ldr	r3, [pc, #256]	; (80107b8 <etharp_output_to_arp_index+0x128>)
 80106b6:	f240 22ef 	movw	r2, #751	; 0x2ef
 80106ba:	4940      	ldr	r1, [pc, #256]	; (80107bc <etharp_output_to_arp_index+0x12c>)
 80106bc:	4840      	ldr	r0, [pc, #256]	; (80107c0 <etharp_output_to_arp_index+0x130>)
 80106be:	f001 ff53 	bl	8012568 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80106c2:	79fa      	ldrb	r2, [r7, #7]
 80106c4:	493b      	ldr	r1, [pc, #236]	; (80107b4 <etharp_output_to_arp_index+0x124>)
 80106c6:	4613      	mov	r3, r2
 80106c8:	005b      	lsls	r3, r3, #1
 80106ca:	4413      	add	r3, r2
 80106cc:	00db      	lsls	r3, r3, #3
 80106ce:	440b      	add	r3, r1
 80106d0:	3314      	adds	r3, #20
 80106d2:	781b      	ldrb	r3, [r3, #0]
 80106d4:	2b02      	cmp	r3, #2
 80106d6:	d153      	bne.n	8010780 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80106d8:	79fa      	ldrb	r2, [r7, #7]
 80106da:	4936      	ldr	r1, [pc, #216]	; (80107b4 <etharp_output_to_arp_index+0x124>)
 80106dc:	4613      	mov	r3, r2
 80106de:	005b      	lsls	r3, r3, #1
 80106e0:	4413      	add	r3, r2
 80106e2:	00db      	lsls	r3, r3, #3
 80106e4:	440b      	add	r3, r1
 80106e6:	3312      	adds	r3, #18
 80106e8:	881b      	ldrh	r3, [r3, #0]
 80106ea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80106ee:	d919      	bls.n	8010724 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80106f0:	79fa      	ldrb	r2, [r7, #7]
 80106f2:	4613      	mov	r3, r2
 80106f4:	005b      	lsls	r3, r3, #1
 80106f6:	4413      	add	r3, r2
 80106f8:	00db      	lsls	r3, r3, #3
 80106fa:	4a2e      	ldr	r2, [pc, #184]	; (80107b4 <etharp_output_to_arp_index+0x124>)
 80106fc:	4413      	add	r3, r2
 80106fe:	3304      	adds	r3, #4
 8010700:	4619      	mov	r1, r3
 8010702:	68f8      	ldr	r0, [r7, #12]
 8010704:	f000 fb4c 	bl	8010da0 <etharp_request>
 8010708:	4603      	mov	r3, r0
 801070a:	2b00      	cmp	r3, #0
 801070c:	d138      	bne.n	8010780 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801070e:	79fa      	ldrb	r2, [r7, #7]
 8010710:	4928      	ldr	r1, [pc, #160]	; (80107b4 <etharp_output_to_arp_index+0x124>)
 8010712:	4613      	mov	r3, r2
 8010714:	005b      	lsls	r3, r3, #1
 8010716:	4413      	add	r3, r2
 8010718:	00db      	lsls	r3, r3, #3
 801071a:	440b      	add	r3, r1
 801071c:	3314      	adds	r3, #20
 801071e:	2203      	movs	r2, #3
 8010720:	701a      	strb	r2, [r3, #0]
 8010722:	e02d      	b.n	8010780 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010724:	79fa      	ldrb	r2, [r7, #7]
 8010726:	4923      	ldr	r1, [pc, #140]	; (80107b4 <etharp_output_to_arp_index+0x124>)
 8010728:	4613      	mov	r3, r2
 801072a:	005b      	lsls	r3, r3, #1
 801072c:	4413      	add	r3, r2
 801072e:	00db      	lsls	r3, r3, #3
 8010730:	440b      	add	r3, r1
 8010732:	3312      	adds	r3, #18
 8010734:	881b      	ldrh	r3, [r3, #0]
 8010736:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801073a:	d321      	bcc.n	8010780 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801073c:	79fa      	ldrb	r2, [r7, #7]
 801073e:	4613      	mov	r3, r2
 8010740:	005b      	lsls	r3, r3, #1
 8010742:	4413      	add	r3, r2
 8010744:	00db      	lsls	r3, r3, #3
 8010746:	4a1b      	ldr	r2, [pc, #108]	; (80107b4 <etharp_output_to_arp_index+0x124>)
 8010748:	4413      	add	r3, r2
 801074a:	1d19      	adds	r1, r3, #4
 801074c:	79fa      	ldrb	r2, [r7, #7]
 801074e:	4613      	mov	r3, r2
 8010750:	005b      	lsls	r3, r3, #1
 8010752:	4413      	add	r3, r2
 8010754:	00db      	lsls	r3, r3, #3
 8010756:	3308      	adds	r3, #8
 8010758:	4a16      	ldr	r2, [pc, #88]	; (80107b4 <etharp_output_to_arp_index+0x124>)
 801075a:	4413      	add	r3, r2
 801075c:	3304      	adds	r3, #4
 801075e:	461a      	mov	r2, r3
 8010760:	68f8      	ldr	r0, [r7, #12]
 8010762:	f000 fafb 	bl	8010d5c <etharp_request_dst>
 8010766:	4603      	mov	r3, r0
 8010768:	2b00      	cmp	r3, #0
 801076a:	d109      	bne.n	8010780 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801076c:	79fa      	ldrb	r2, [r7, #7]
 801076e:	4911      	ldr	r1, [pc, #68]	; (80107b4 <etharp_output_to_arp_index+0x124>)
 8010770:	4613      	mov	r3, r2
 8010772:	005b      	lsls	r3, r3, #1
 8010774:	4413      	add	r3, r2
 8010776:	00db      	lsls	r3, r3, #3
 8010778:	440b      	add	r3, r1
 801077a:	3314      	adds	r3, #20
 801077c:	2203      	movs	r2, #3
 801077e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8010786:	79fa      	ldrb	r2, [r7, #7]
 8010788:	4613      	mov	r3, r2
 801078a:	005b      	lsls	r3, r3, #1
 801078c:	4413      	add	r3, r2
 801078e:	00db      	lsls	r3, r3, #3
 8010790:	3308      	adds	r3, #8
 8010792:	4a08      	ldr	r2, [pc, #32]	; (80107b4 <etharp_output_to_arp_index+0x124>)
 8010794:	4413      	add	r3, r2
 8010796:	1d1a      	adds	r2, r3, #4
 8010798:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801079c:	9300      	str	r3, [sp, #0]
 801079e:	4613      	mov	r3, r2
 80107a0:	460a      	mov	r2, r1
 80107a2:	68b9      	ldr	r1, [r7, #8]
 80107a4:	68f8      	ldr	r0, [r7, #12]
 80107a6:	f001 fe51 	bl	801244c <ethernet_output>
 80107aa:	4603      	mov	r3, r0
}
 80107ac:	4618      	mov	r0, r3
 80107ae:	3710      	adds	r7, #16
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}
 80107b4:	20000568 	.word	0x20000568
 80107b8:	08015d2c 	.word	0x08015d2c
 80107bc:	08015e9c 	.word	0x08015e9c
 80107c0:	08015da4 	.word	0x08015da4

080107c4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b08a      	sub	sp, #40	; 0x28
 80107c8:	af02      	add	r7, sp, #8
 80107ca:	60f8      	str	r0, [r7, #12]
 80107cc:	60b9      	str	r1, [r7, #8]
 80107ce:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d106      	bne.n	80107e8 <etharp_output+0x24>
 80107da:	4b73      	ldr	r3, [pc, #460]	; (80109a8 <etharp_output+0x1e4>)
 80107dc:	f240 321e 	movw	r2, #798	; 0x31e
 80107e0:	4972      	ldr	r1, [pc, #456]	; (80109ac <etharp_output+0x1e8>)
 80107e2:	4873      	ldr	r0, [pc, #460]	; (80109b0 <etharp_output+0x1ec>)
 80107e4:	f001 fec0 	bl	8012568 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d106      	bne.n	80107fc <etharp_output+0x38>
 80107ee:	4b6e      	ldr	r3, [pc, #440]	; (80109a8 <etharp_output+0x1e4>)
 80107f0:	f240 321f 	movw	r2, #799	; 0x31f
 80107f4:	496f      	ldr	r1, [pc, #444]	; (80109b4 <etharp_output+0x1f0>)
 80107f6:	486e      	ldr	r0, [pc, #440]	; (80109b0 <etharp_output+0x1ec>)
 80107f8:	f001 feb6 	bl	8012568 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d106      	bne.n	8010810 <etharp_output+0x4c>
 8010802:	4b69      	ldr	r3, [pc, #420]	; (80109a8 <etharp_output+0x1e4>)
 8010804:	f44f 7248 	mov.w	r2, #800	; 0x320
 8010808:	496b      	ldr	r1, [pc, #428]	; (80109b8 <etharp_output+0x1f4>)
 801080a:	4869      	ldr	r0, [pc, #420]	; (80109b0 <etharp_output+0x1ec>)
 801080c:	f001 feac 	bl	8012568 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	68f9      	ldr	r1, [r7, #12]
 8010816:	4618      	mov	r0, r3
 8010818:	f000 ff14 	bl	8011644 <ip4_addr_isbroadcast_u32>
 801081c:	4603      	mov	r3, r0
 801081e:	2b00      	cmp	r3, #0
 8010820:	d002      	beq.n	8010828 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010822:	4b66      	ldr	r3, [pc, #408]	; (80109bc <etharp_output+0x1f8>)
 8010824:	61fb      	str	r3, [r7, #28]
 8010826:	e0af      	b.n	8010988 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010830:	2be0      	cmp	r3, #224	; 0xe0
 8010832:	d118      	bne.n	8010866 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010834:	2301      	movs	r3, #1
 8010836:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010838:	2300      	movs	r3, #0
 801083a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801083c:	235e      	movs	r3, #94	; 0x5e
 801083e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	3301      	adds	r3, #1
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801084a:	b2db      	uxtb	r3, r3
 801084c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	3302      	adds	r3, #2
 8010852:	781b      	ldrb	r3, [r3, #0]
 8010854:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	3303      	adds	r3, #3
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801085e:	f107 0310 	add.w	r3, r7, #16
 8010862:	61fb      	str	r3, [r7, #28]
 8010864:	e090      	b.n	8010988 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	3304      	adds	r3, #4
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	405a      	eors	r2, r3
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	3308      	adds	r3, #8
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	4013      	ands	r3, r2
 801087a:	2b00      	cmp	r3, #0
 801087c:	d012      	beq.n	80108a4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010884:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010888:	4293      	cmp	r3, r2
 801088a:	d00b      	beq.n	80108a4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	330c      	adds	r3, #12
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d003      	beq.n	801089e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	330c      	adds	r3, #12
 801089a:	61bb      	str	r3, [r7, #24]
 801089c:	e002      	b.n	80108a4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801089e:	f06f 0303 	mvn.w	r3, #3
 80108a2:	e07d      	b.n	80109a0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80108a4:	4b46      	ldr	r3, [pc, #280]	; (80109c0 <etharp_output+0x1fc>)
 80108a6:	781b      	ldrb	r3, [r3, #0]
 80108a8:	4619      	mov	r1, r3
 80108aa:	4a46      	ldr	r2, [pc, #280]	; (80109c4 <etharp_output+0x200>)
 80108ac:	460b      	mov	r3, r1
 80108ae:	005b      	lsls	r3, r3, #1
 80108b0:	440b      	add	r3, r1
 80108b2:	00db      	lsls	r3, r3, #3
 80108b4:	4413      	add	r3, r2
 80108b6:	3314      	adds	r3, #20
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	2b01      	cmp	r3, #1
 80108bc:	d925      	bls.n	801090a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80108be:	4b40      	ldr	r3, [pc, #256]	; (80109c0 <etharp_output+0x1fc>)
 80108c0:	781b      	ldrb	r3, [r3, #0]
 80108c2:	4619      	mov	r1, r3
 80108c4:	4a3f      	ldr	r2, [pc, #252]	; (80109c4 <etharp_output+0x200>)
 80108c6:	460b      	mov	r3, r1
 80108c8:	005b      	lsls	r3, r3, #1
 80108ca:	440b      	add	r3, r1
 80108cc:	00db      	lsls	r3, r3, #3
 80108ce:	4413      	add	r3, r2
 80108d0:	3308      	adds	r3, #8
 80108d2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80108d4:	68fa      	ldr	r2, [r7, #12]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d117      	bne.n	801090a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80108da:	69bb      	ldr	r3, [r7, #24]
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	4b38      	ldr	r3, [pc, #224]	; (80109c0 <etharp_output+0x1fc>)
 80108e0:	781b      	ldrb	r3, [r3, #0]
 80108e2:	4618      	mov	r0, r3
 80108e4:	4937      	ldr	r1, [pc, #220]	; (80109c4 <etharp_output+0x200>)
 80108e6:	4603      	mov	r3, r0
 80108e8:	005b      	lsls	r3, r3, #1
 80108ea:	4403      	add	r3, r0
 80108ec:	00db      	lsls	r3, r3, #3
 80108ee:	440b      	add	r3, r1
 80108f0:	3304      	adds	r3, #4
 80108f2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80108f4:	429a      	cmp	r2, r3
 80108f6:	d108      	bne.n	801090a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80108f8:	4b31      	ldr	r3, [pc, #196]	; (80109c0 <etharp_output+0x1fc>)
 80108fa:	781b      	ldrb	r3, [r3, #0]
 80108fc:	461a      	mov	r2, r3
 80108fe:	68b9      	ldr	r1, [r7, #8]
 8010900:	68f8      	ldr	r0, [r7, #12]
 8010902:	f7ff fec5 	bl	8010690 <etharp_output_to_arp_index>
 8010906:	4603      	mov	r3, r0
 8010908:	e04a      	b.n	80109a0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801090a:	2300      	movs	r3, #0
 801090c:	75fb      	strb	r3, [r7, #23]
 801090e:	e031      	b.n	8010974 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010910:	7dfa      	ldrb	r2, [r7, #23]
 8010912:	492c      	ldr	r1, [pc, #176]	; (80109c4 <etharp_output+0x200>)
 8010914:	4613      	mov	r3, r2
 8010916:	005b      	lsls	r3, r3, #1
 8010918:	4413      	add	r3, r2
 801091a:	00db      	lsls	r3, r3, #3
 801091c:	440b      	add	r3, r1
 801091e:	3314      	adds	r3, #20
 8010920:	781b      	ldrb	r3, [r3, #0]
 8010922:	2b01      	cmp	r3, #1
 8010924:	d923      	bls.n	801096e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010926:	7dfa      	ldrb	r2, [r7, #23]
 8010928:	4926      	ldr	r1, [pc, #152]	; (80109c4 <etharp_output+0x200>)
 801092a:	4613      	mov	r3, r2
 801092c:	005b      	lsls	r3, r3, #1
 801092e:	4413      	add	r3, r2
 8010930:	00db      	lsls	r3, r3, #3
 8010932:	440b      	add	r3, r1
 8010934:	3308      	adds	r3, #8
 8010936:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010938:	68fa      	ldr	r2, [r7, #12]
 801093a:	429a      	cmp	r2, r3
 801093c:	d117      	bne.n	801096e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801093e:	69bb      	ldr	r3, [r7, #24]
 8010940:	6819      	ldr	r1, [r3, #0]
 8010942:	7dfa      	ldrb	r2, [r7, #23]
 8010944:	481f      	ldr	r0, [pc, #124]	; (80109c4 <etharp_output+0x200>)
 8010946:	4613      	mov	r3, r2
 8010948:	005b      	lsls	r3, r3, #1
 801094a:	4413      	add	r3, r2
 801094c:	00db      	lsls	r3, r3, #3
 801094e:	4403      	add	r3, r0
 8010950:	3304      	adds	r3, #4
 8010952:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010954:	4299      	cmp	r1, r3
 8010956:	d10a      	bne.n	801096e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010958:	4a19      	ldr	r2, [pc, #100]	; (80109c0 <etharp_output+0x1fc>)
 801095a:	7dfb      	ldrb	r3, [r7, #23]
 801095c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801095e:	7dfb      	ldrb	r3, [r7, #23]
 8010960:	461a      	mov	r2, r3
 8010962:	68b9      	ldr	r1, [r7, #8]
 8010964:	68f8      	ldr	r0, [r7, #12]
 8010966:	f7ff fe93 	bl	8010690 <etharp_output_to_arp_index>
 801096a:	4603      	mov	r3, r0
 801096c:	e018      	b.n	80109a0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801096e:	7dfb      	ldrb	r3, [r7, #23]
 8010970:	3301      	adds	r3, #1
 8010972:	75fb      	strb	r3, [r7, #23]
 8010974:	7dfb      	ldrb	r3, [r7, #23]
 8010976:	2b09      	cmp	r3, #9
 8010978:	d9ca      	bls.n	8010910 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801097a:	68ba      	ldr	r2, [r7, #8]
 801097c:	69b9      	ldr	r1, [r7, #24]
 801097e:	68f8      	ldr	r0, [r7, #12]
 8010980:	f000 f822 	bl	80109c8 <etharp_query>
 8010984:	4603      	mov	r3, r0
 8010986:	e00b      	b.n	80109a0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801098e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010992:	9300      	str	r3, [sp, #0]
 8010994:	69fb      	ldr	r3, [r7, #28]
 8010996:	68b9      	ldr	r1, [r7, #8]
 8010998:	68f8      	ldr	r0, [r7, #12]
 801099a:	f001 fd57 	bl	801244c <ethernet_output>
 801099e:	4603      	mov	r3, r0
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3720      	adds	r7, #32
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}
 80109a8:	08015d2c 	.word	0x08015d2c
 80109ac:	08015e7c 	.word	0x08015e7c
 80109b0:	08015da4 	.word	0x08015da4
 80109b4:	08015ecc 	.word	0x08015ecc
 80109b8:	08015e6c 	.word	0x08015e6c
 80109bc:	08016aa4 	.word	0x08016aa4
 80109c0:	20000658 	.word	0x20000658
 80109c4:	20000568 	.word	0x20000568

080109c8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b08c      	sub	sp, #48	; 0x30
 80109cc:	af02      	add	r7, sp, #8
 80109ce:	60f8      	str	r0, [r7, #12]
 80109d0:	60b9      	str	r1, [r7, #8]
 80109d2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	3326      	adds	r3, #38	; 0x26
 80109d8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80109da:	23ff      	movs	r3, #255	; 0xff
 80109dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80109e0:	2300      	movs	r3, #0
 80109e2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	68f9      	ldr	r1, [r7, #12]
 80109ea:	4618      	mov	r0, r3
 80109ec:	f000 fe2a 	bl	8011644 <ip4_addr_isbroadcast_u32>
 80109f0:	4603      	mov	r3, r0
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d10c      	bne.n	8010a10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80109fe:	2be0      	cmp	r3, #224	; 0xe0
 8010a00:	d006      	beq.n	8010a10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d003      	beq.n	8010a10 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d102      	bne.n	8010a16 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010a10:	f06f 030f 	mvn.w	r3, #15
 8010a14:	e102      	b.n	8010c1c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010a16:	68fa      	ldr	r2, [r7, #12]
 8010a18:	2101      	movs	r1, #1
 8010a1a:	68b8      	ldr	r0, [r7, #8]
 8010a1c:	f7ff fb5c 	bl	80100d8 <etharp_find_entry>
 8010a20:	4603      	mov	r3, r0
 8010a22:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010a24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	da02      	bge.n	8010a32 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010a2c:	8a7b      	ldrh	r3, [r7, #18]
 8010a2e:	b25b      	sxtb	r3, r3
 8010a30:	e0f4      	b.n	8010c1c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010a32:	8a7b      	ldrh	r3, [r7, #18]
 8010a34:	2b7e      	cmp	r3, #126	; 0x7e
 8010a36:	d906      	bls.n	8010a46 <etharp_query+0x7e>
 8010a38:	4b7a      	ldr	r3, [pc, #488]	; (8010c24 <etharp_query+0x25c>)
 8010a3a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8010a3e:	497a      	ldr	r1, [pc, #488]	; (8010c28 <etharp_query+0x260>)
 8010a40:	487a      	ldr	r0, [pc, #488]	; (8010c2c <etharp_query+0x264>)
 8010a42:	f001 fd91 	bl	8012568 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010a46:	8a7b      	ldrh	r3, [r7, #18]
 8010a48:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010a4a:	7c7a      	ldrb	r2, [r7, #17]
 8010a4c:	4978      	ldr	r1, [pc, #480]	; (8010c30 <etharp_query+0x268>)
 8010a4e:	4613      	mov	r3, r2
 8010a50:	005b      	lsls	r3, r3, #1
 8010a52:	4413      	add	r3, r2
 8010a54:	00db      	lsls	r3, r3, #3
 8010a56:	440b      	add	r3, r1
 8010a58:	3314      	adds	r3, #20
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d115      	bne.n	8010a8c <etharp_query+0xc4>
    is_new_entry = 1;
 8010a60:	2301      	movs	r3, #1
 8010a62:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010a64:	7c7a      	ldrb	r2, [r7, #17]
 8010a66:	4972      	ldr	r1, [pc, #456]	; (8010c30 <etharp_query+0x268>)
 8010a68:	4613      	mov	r3, r2
 8010a6a:	005b      	lsls	r3, r3, #1
 8010a6c:	4413      	add	r3, r2
 8010a6e:	00db      	lsls	r3, r3, #3
 8010a70:	440b      	add	r3, r1
 8010a72:	3314      	adds	r3, #20
 8010a74:	2201      	movs	r2, #1
 8010a76:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010a78:	7c7a      	ldrb	r2, [r7, #17]
 8010a7a:	496d      	ldr	r1, [pc, #436]	; (8010c30 <etharp_query+0x268>)
 8010a7c:	4613      	mov	r3, r2
 8010a7e:	005b      	lsls	r3, r3, #1
 8010a80:	4413      	add	r3, r2
 8010a82:	00db      	lsls	r3, r3, #3
 8010a84:	440b      	add	r3, r1
 8010a86:	3308      	adds	r3, #8
 8010a88:	68fa      	ldr	r2, [r7, #12]
 8010a8a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010a8c:	7c7a      	ldrb	r2, [r7, #17]
 8010a8e:	4968      	ldr	r1, [pc, #416]	; (8010c30 <etharp_query+0x268>)
 8010a90:	4613      	mov	r3, r2
 8010a92:	005b      	lsls	r3, r3, #1
 8010a94:	4413      	add	r3, r2
 8010a96:	00db      	lsls	r3, r3, #3
 8010a98:	440b      	add	r3, r1
 8010a9a:	3314      	adds	r3, #20
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	2b01      	cmp	r3, #1
 8010aa0:	d011      	beq.n	8010ac6 <etharp_query+0xfe>
 8010aa2:	7c7a      	ldrb	r2, [r7, #17]
 8010aa4:	4962      	ldr	r1, [pc, #392]	; (8010c30 <etharp_query+0x268>)
 8010aa6:	4613      	mov	r3, r2
 8010aa8:	005b      	lsls	r3, r3, #1
 8010aaa:	4413      	add	r3, r2
 8010aac:	00db      	lsls	r3, r3, #3
 8010aae:	440b      	add	r3, r1
 8010ab0:	3314      	adds	r3, #20
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	2b01      	cmp	r3, #1
 8010ab6:	d806      	bhi.n	8010ac6 <etharp_query+0xfe>
 8010ab8:	4b5a      	ldr	r3, [pc, #360]	; (8010c24 <etharp_query+0x25c>)
 8010aba:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010abe:	495d      	ldr	r1, [pc, #372]	; (8010c34 <etharp_query+0x26c>)
 8010ac0:	485a      	ldr	r0, [pc, #360]	; (8010c2c <etharp_query+0x264>)
 8010ac2:	f001 fd51 	bl	8012568 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010ac6:	6a3b      	ldr	r3, [r7, #32]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d102      	bne.n	8010ad2 <etharp_query+0x10a>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d10c      	bne.n	8010aec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010ad2:	68b9      	ldr	r1, [r7, #8]
 8010ad4:	68f8      	ldr	r0, [r7, #12]
 8010ad6:	f000 f963 	bl	8010da0 <etharp_request>
 8010ada:	4603      	mov	r3, r0
 8010adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d102      	bne.n	8010aec <etharp_query+0x124>
      return result;
 8010ae6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010aea:	e097      	b.n	8010c1c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d106      	bne.n	8010b00 <etharp_query+0x138>
 8010af2:	4b4c      	ldr	r3, [pc, #304]	; (8010c24 <etharp_query+0x25c>)
 8010af4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8010af8:	494f      	ldr	r1, [pc, #316]	; (8010c38 <etharp_query+0x270>)
 8010afa:	484c      	ldr	r0, [pc, #304]	; (8010c2c <etharp_query+0x264>)
 8010afc:	f001 fd34 	bl	8012568 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010b00:	7c7a      	ldrb	r2, [r7, #17]
 8010b02:	494b      	ldr	r1, [pc, #300]	; (8010c30 <etharp_query+0x268>)
 8010b04:	4613      	mov	r3, r2
 8010b06:	005b      	lsls	r3, r3, #1
 8010b08:	4413      	add	r3, r2
 8010b0a:	00db      	lsls	r3, r3, #3
 8010b0c:	440b      	add	r3, r1
 8010b0e:	3314      	adds	r3, #20
 8010b10:	781b      	ldrb	r3, [r3, #0]
 8010b12:	2b01      	cmp	r3, #1
 8010b14:	d918      	bls.n	8010b48 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010b16:	4a49      	ldr	r2, [pc, #292]	; (8010c3c <etharp_query+0x274>)
 8010b18:	7c7b      	ldrb	r3, [r7, #17]
 8010b1a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010b1c:	7c7a      	ldrb	r2, [r7, #17]
 8010b1e:	4613      	mov	r3, r2
 8010b20:	005b      	lsls	r3, r3, #1
 8010b22:	4413      	add	r3, r2
 8010b24:	00db      	lsls	r3, r3, #3
 8010b26:	3308      	adds	r3, #8
 8010b28:	4a41      	ldr	r2, [pc, #260]	; (8010c30 <etharp_query+0x268>)
 8010b2a:	4413      	add	r3, r2
 8010b2c:	1d1a      	adds	r2, r3, #4
 8010b2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010b32:	9300      	str	r3, [sp, #0]
 8010b34:	4613      	mov	r3, r2
 8010b36:	697a      	ldr	r2, [r7, #20]
 8010b38:	6879      	ldr	r1, [r7, #4]
 8010b3a:	68f8      	ldr	r0, [r7, #12]
 8010b3c:	f001 fc86 	bl	801244c <ethernet_output>
 8010b40:	4603      	mov	r3, r0
 8010b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010b46:	e067      	b.n	8010c18 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010b48:	7c7a      	ldrb	r2, [r7, #17]
 8010b4a:	4939      	ldr	r1, [pc, #228]	; (8010c30 <etharp_query+0x268>)
 8010b4c:	4613      	mov	r3, r2
 8010b4e:	005b      	lsls	r3, r3, #1
 8010b50:	4413      	add	r3, r2
 8010b52:	00db      	lsls	r3, r3, #3
 8010b54:	440b      	add	r3, r1
 8010b56:	3314      	adds	r3, #20
 8010b58:	781b      	ldrb	r3, [r3, #0]
 8010b5a:	2b01      	cmp	r3, #1
 8010b5c:	d15c      	bne.n	8010c18 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010b66:	e01c      	b.n	8010ba2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010b68:	69fb      	ldr	r3, [r7, #28]
 8010b6a:	895a      	ldrh	r2, [r3, #10]
 8010b6c:	69fb      	ldr	r3, [r7, #28]
 8010b6e:	891b      	ldrh	r3, [r3, #8]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d10a      	bne.n	8010b8a <etharp_query+0x1c2>
 8010b74:	69fb      	ldr	r3, [r7, #28]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d006      	beq.n	8010b8a <etharp_query+0x1c2>
 8010b7c:	4b29      	ldr	r3, [pc, #164]	; (8010c24 <etharp_query+0x25c>)
 8010b7e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8010b82:	492f      	ldr	r1, [pc, #188]	; (8010c40 <etharp_query+0x278>)
 8010b84:	4829      	ldr	r0, [pc, #164]	; (8010c2c <etharp_query+0x264>)
 8010b86:	f001 fcef 	bl	8012568 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010b8a:	69fb      	ldr	r3, [r7, #28]
 8010b8c:	7b1b      	ldrb	r3, [r3, #12]
 8010b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d002      	beq.n	8010b9c <etharp_query+0x1d4>
        copy_needed = 1;
 8010b96:	2301      	movs	r3, #1
 8010b98:	61bb      	str	r3, [r7, #24]
        break;
 8010b9a:	e005      	b.n	8010ba8 <etharp_query+0x1e0>
      }
      p = p->next;
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010ba2:	69fb      	ldr	r3, [r7, #28]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d1df      	bne.n	8010b68 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8010ba8:	69bb      	ldr	r3, [r7, #24]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d007      	beq.n	8010bbe <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010bae:	687a      	ldr	r2, [r7, #4]
 8010bb0:	f44f 7120 	mov.w	r1, #640	; 0x280
 8010bb4:	200e      	movs	r0, #14
 8010bb6:	f7f6 fccd 	bl	8007554 <pbuf_clone>
 8010bba:	61f8      	str	r0, [r7, #28]
 8010bbc:	e004      	b.n	8010bc8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010bc2:	69f8      	ldr	r0, [r7, #28]
 8010bc4:	f7f6 fafa 	bl	80071bc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010bc8:	69fb      	ldr	r3, [r7, #28]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d021      	beq.n	8010c12 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010bce:	7c7a      	ldrb	r2, [r7, #17]
 8010bd0:	4917      	ldr	r1, [pc, #92]	; (8010c30 <etharp_query+0x268>)
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	005b      	lsls	r3, r3, #1
 8010bd6:	4413      	add	r3, r2
 8010bd8:	00db      	lsls	r3, r3, #3
 8010bda:	440b      	add	r3, r1
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d00a      	beq.n	8010bf8 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010be2:	7c7a      	ldrb	r2, [r7, #17]
 8010be4:	4912      	ldr	r1, [pc, #72]	; (8010c30 <etharp_query+0x268>)
 8010be6:	4613      	mov	r3, r2
 8010be8:	005b      	lsls	r3, r3, #1
 8010bea:	4413      	add	r3, r2
 8010bec:	00db      	lsls	r3, r3, #3
 8010bee:	440b      	add	r3, r1
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7f6 fa42 	bl	800707c <pbuf_free>
      }
      arp_table[i].q = p;
 8010bf8:	7c7a      	ldrb	r2, [r7, #17]
 8010bfa:	490d      	ldr	r1, [pc, #52]	; (8010c30 <etharp_query+0x268>)
 8010bfc:	4613      	mov	r3, r2
 8010bfe:	005b      	lsls	r3, r3, #1
 8010c00:	4413      	add	r3, r2
 8010c02:	00db      	lsls	r3, r3, #3
 8010c04:	440b      	add	r3, r1
 8010c06:	69fa      	ldr	r2, [r7, #28]
 8010c08:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010c10:	e002      	b.n	8010c18 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010c12:	23ff      	movs	r3, #255	; 0xff
 8010c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8010c18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3728      	adds	r7, #40	; 0x28
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	08015d2c 	.word	0x08015d2c
 8010c28:	08015ed8 	.word	0x08015ed8
 8010c2c:	08015da4 	.word	0x08015da4
 8010c30:	20000568 	.word	0x20000568
 8010c34:	08015ee8 	.word	0x08015ee8
 8010c38:	08015ecc 	.word	0x08015ecc
 8010c3c:	20000658 	.word	0x20000658
 8010c40:	08015f10 	.word	0x08015f10

08010c44 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b08a      	sub	sp, #40	; 0x28
 8010c48:	af02      	add	r7, sp, #8
 8010c4a:	60f8      	str	r0, [r7, #12]
 8010c4c:	60b9      	str	r1, [r7, #8]
 8010c4e:	607a      	str	r2, [r7, #4]
 8010c50:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010c52:	2300      	movs	r3, #0
 8010c54:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d106      	bne.n	8010c6a <etharp_raw+0x26>
 8010c5c:	4b3a      	ldr	r3, [pc, #232]	; (8010d48 <etharp_raw+0x104>)
 8010c5e:	f240 4257 	movw	r2, #1111	; 0x457
 8010c62:	493a      	ldr	r1, [pc, #232]	; (8010d4c <etharp_raw+0x108>)
 8010c64:	483a      	ldr	r0, [pc, #232]	; (8010d50 <etharp_raw+0x10c>)
 8010c66:	f001 fc7f 	bl	8012568 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010c6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c6e:	211c      	movs	r1, #28
 8010c70:	200e      	movs	r0, #14
 8010c72:	f7f5 ff23 	bl	8006abc <pbuf_alloc>
 8010c76:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010c78:	69bb      	ldr	r3, [r7, #24]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d102      	bne.n	8010c84 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8010c82:	e05d      	b.n	8010d40 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010c84:	69bb      	ldr	r3, [r7, #24]
 8010c86:	895b      	ldrh	r3, [r3, #10]
 8010c88:	2b1b      	cmp	r3, #27
 8010c8a:	d806      	bhi.n	8010c9a <etharp_raw+0x56>
 8010c8c:	4b2e      	ldr	r3, [pc, #184]	; (8010d48 <etharp_raw+0x104>)
 8010c8e:	f240 4263 	movw	r2, #1123	; 0x463
 8010c92:	4930      	ldr	r1, [pc, #192]	; (8010d54 <etharp_raw+0x110>)
 8010c94:	482e      	ldr	r0, [pc, #184]	; (8010d50 <etharp_raw+0x10c>)
 8010c96:	f001 fc67 	bl	8012568 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010c9a:	69bb      	ldr	r3, [r7, #24]
 8010c9c:	685b      	ldr	r3, [r3, #4]
 8010c9e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010ca0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	f7f4 ff12 	bl	8005acc <lwip_htons>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	461a      	mov	r2, r3
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010cb6:	2b06      	cmp	r3, #6
 8010cb8:	d006      	beq.n	8010cc8 <etharp_raw+0x84>
 8010cba:	4b23      	ldr	r3, [pc, #140]	; (8010d48 <etharp_raw+0x104>)
 8010cbc:	f240 426a 	movw	r2, #1130	; 0x46a
 8010cc0:	4925      	ldr	r1, [pc, #148]	; (8010d58 <etharp_raw+0x114>)
 8010cc2:	4823      	ldr	r0, [pc, #140]	; (8010d50 <etharp_raw+0x10c>)
 8010cc4:	f001 fc50 	bl	8012568 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	3308      	adds	r3, #8
 8010ccc:	2206      	movs	r2, #6
 8010cce:	6839      	ldr	r1, [r7, #0]
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f001 fc36 	bl	8012542 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	3312      	adds	r3, #18
 8010cda:	2206      	movs	r2, #6
 8010cdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f001 fc2f 	bl	8012542 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	330e      	adds	r3, #14
 8010ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cea:	6812      	ldr	r2, [r2, #0]
 8010cec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010cee:	697b      	ldr	r3, [r7, #20]
 8010cf0:	3318      	adds	r3, #24
 8010cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cf4:	6812      	ldr	r2, [r2, #0]
 8010cf6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	701a      	strb	r2, [r3, #0]
 8010cfe:	2200      	movs	r2, #0
 8010d00:	f042 0201 	orr.w	r2, r2, #1
 8010d04:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	2200      	movs	r2, #0
 8010d0a:	f042 0208 	orr.w	r2, r2, #8
 8010d0e:	709a      	strb	r2, [r3, #2]
 8010d10:	2200      	movs	r2, #0
 8010d12:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	2206      	movs	r2, #6
 8010d18:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	2204      	movs	r2, #4
 8010d1e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010d20:	f640 0306 	movw	r3, #2054	; 0x806
 8010d24:	9300      	str	r3, [sp, #0]
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	68ba      	ldr	r2, [r7, #8]
 8010d2a:	69b9      	ldr	r1, [r7, #24]
 8010d2c:	68f8      	ldr	r0, [r7, #12]
 8010d2e:	f001 fb8d 	bl	801244c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8010d32:	69b8      	ldr	r0, [r7, #24]
 8010d34:	f7f6 f9a2 	bl	800707c <pbuf_free>
  p = NULL;
 8010d38:	2300      	movs	r3, #0
 8010d3a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8010d3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	3720      	adds	r7, #32
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	08015d2c 	.word	0x08015d2c
 8010d4c:	08015e7c 	.word	0x08015e7c
 8010d50:	08015da4 	.word	0x08015da4
 8010d54:	08015f2c 	.word	0x08015f2c
 8010d58:	08015f60 	.word	0x08015f60

08010d5c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b088      	sub	sp, #32
 8010d60:	af04      	add	r7, sp, #16
 8010d62:	60f8      	str	r0, [r7, #12]
 8010d64:	60b9      	str	r1, [r7, #8]
 8010d66:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8010d78:	2201      	movs	r2, #1
 8010d7a:	9203      	str	r2, [sp, #12]
 8010d7c:	68ba      	ldr	r2, [r7, #8]
 8010d7e:	9202      	str	r2, [sp, #8]
 8010d80:	4a06      	ldr	r2, [pc, #24]	; (8010d9c <etharp_request_dst+0x40>)
 8010d82:	9201      	str	r2, [sp, #4]
 8010d84:	9300      	str	r3, [sp, #0]
 8010d86:	4603      	mov	r3, r0
 8010d88:	687a      	ldr	r2, [r7, #4]
 8010d8a:	68f8      	ldr	r0, [r7, #12]
 8010d8c:	f7ff ff5a 	bl	8010c44 <etharp_raw>
 8010d90:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3710      	adds	r7, #16
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
 8010d9a:	bf00      	nop
 8010d9c:	08016aac 	.word	0x08016aac

08010da0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010daa:	4a05      	ldr	r2, [pc, #20]	; (8010dc0 <etharp_request+0x20>)
 8010dac:	6839      	ldr	r1, [r7, #0]
 8010dae:	6878      	ldr	r0, [r7, #4]
 8010db0:	f7ff ffd4 	bl	8010d5c <etharp_request_dst>
 8010db4:	4603      	mov	r3, r0
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	3708      	adds	r7, #8
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd80      	pop	{r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	08016aa4 	.word	0x08016aa4

08010dc4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b08e      	sub	sp, #56	; 0x38
 8010dc8:	af04      	add	r7, sp, #16
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010dce:	4b79      	ldr	r3, [pc, #484]	; (8010fb4 <icmp_input+0x1f0>)
 8010dd0:	689b      	ldr	r3, [r3, #8]
 8010dd2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd6:	781b      	ldrb	r3, [r3, #0]
 8010dd8:	f003 030f 	and.w	r3, r3, #15
 8010ddc:	b2db      	uxtb	r3, r3
 8010dde:	009b      	lsls	r3, r3, #2
 8010de0:	b2db      	uxtb	r3, r3
 8010de2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8010de4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010de6:	2b13      	cmp	r3, #19
 8010de8:	f240 80cd 	bls.w	8010f86 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	895b      	ldrh	r3, [r3, #10]
 8010df0:	2b03      	cmp	r3, #3
 8010df2:	f240 80ca 	bls.w	8010f8a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	685b      	ldr	r3, [r3, #4]
 8010dfa:	781b      	ldrb	r3, [r3, #0]
 8010dfc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010e00:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	f000 80b7 	beq.w	8010f78 <icmp_input+0x1b4>
 8010e0a:	2b08      	cmp	r3, #8
 8010e0c:	f040 80b7 	bne.w	8010f7e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010e10:	4b69      	ldr	r3, [pc, #420]	; (8010fb8 <icmp_input+0x1f4>)
 8010e12:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010e14:	4b67      	ldr	r3, [pc, #412]	; (8010fb4 <icmp_input+0x1f0>)
 8010e16:	695b      	ldr	r3, [r3, #20]
 8010e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010e1c:	2be0      	cmp	r3, #224	; 0xe0
 8010e1e:	f000 80bb 	beq.w	8010f98 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010e22:	4b64      	ldr	r3, [pc, #400]	; (8010fb4 <icmp_input+0x1f0>)
 8010e24:	695a      	ldr	r2, [r3, #20]
 8010e26:	4b63      	ldr	r3, [pc, #396]	; (8010fb4 <icmp_input+0x1f0>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	4619      	mov	r1, r3
 8010e2c:	4610      	mov	r0, r2
 8010e2e:	f000 fc09 	bl	8011644 <ip4_addr_isbroadcast_u32>
 8010e32:	4603      	mov	r3, r0
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	f040 80b1 	bne.w	8010f9c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	891b      	ldrh	r3, [r3, #8]
 8010e3e:	2b07      	cmp	r3, #7
 8010e40:	f240 80a5 	bls.w	8010f8e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010e44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e46:	330e      	adds	r3, #14
 8010e48:	4619      	mov	r1, r3
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f7f6 f880 	bl	8006f50 <pbuf_add_header>
 8010e50:	4603      	mov	r3, r0
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d04b      	beq.n	8010eee <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	891a      	ldrh	r2, [r3, #8]
 8010e5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e5c:	4413      	add	r3, r2
 8010e5e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	891b      	ldrh	r3, [r3, #8]
 8010e64:	8b7a      	ldrh	r2, [r7, #26]
 8010e66:	429a      	cmp	r2, r3
 8010e68:	f0c0 809a 	bcc.w	8010fa0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010e6c:	8b7b      	ldrh	r3, [r7, #26]
 8010e6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010e72:	4619      	mov	r1, r3
 8010e74:	200e      	movs	r0, #14
 8010e76:	f7f5 fe21 	bl	8006abc <pbuf_alloc>
 8010e7a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	f000 8090 	beq.w	8010fa4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	895b      	ldrh	r3, [r3, #10]
 8010e88:	461a      	mov	r2, r3
 8010e8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e8c:	3308      	adds	r3, #8
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	d203      	bcs.n	8010e9a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010e92:	6978      	ldr	r0, [r7, #20]
 8010e94:	f7f6 f8f2 	bl	800707c <pbuf_free>
          goto icmperr;
 8010e98:	e085      	b.n	8010fa6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	685b      	ldr	r3, [r3, #4]
 8010e9e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010ea0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f001 fb4d 	bl	8012542 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010ea8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010eaa:	4619      	mov	r1, r3
 8010eac:	6978      	ldr	r0, [r7, #20]
 8010eae:	f7f6 f85f 	bl	8006f70 <pbuf_remove_header>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d009      	beq.n	8010ecc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010eb8:	4b40      	ldr	r3, [pc, #256]	; (8010fbc <icmp_input+0x1f8>)
 8010eba:	22b6      	movs	r2, #182	; 0xb6
 8010ebc:	4940      	ldr	r1, [pc, #256]	; (8010fc0 <icmp_input+0x1fc>)
 8010ebe:	4841      	ldr	r0, [pc, #260]	; (8010fc4 <icmp_input+0x200>)
 8010ec0:	f001 fb52 	bl	8012568 <iprintf>
          pbuf_free(r);
 8010ec4:	6978      	ldr	r0, [r7, #20]
 8010ec6:	f7f6 f8d9 	bl	800707c <pbuf_free>
          goto icmperr;
 8010eca:	e06c      	b.n	8010fa6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010ecc:	6879      	ldr	r1, [r7, #4]
 8010ece:	6978      	ldr	r0, [r7, #20]
 8010ed0:	f7f6 f9fc 	bl	80072cc <pbuf_copy>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d003      	beq.n	8010ee2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010eda:	6978      	ldr	r0, [r7, #20]
 8010edc:	f7f6 f8ce 	bl	800707c <pbuf_free>
          goto icmperr;
 8010ee0:	e061      	b.n	8010fa6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f7f6 f8ca 	bl	800707c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	607b      	str	r3, [r7, #4]
 8010eec:	e00f      	b.n	8010f0e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010eee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010ef0:	330e      	adds	r3, #14
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	6878      	ldr	r0, [r7, #4]
 8010ef6:	f7f6 f83b 	bl	8006f70 <pbuf_remove_header>
 8010efa:	4603      	mov	r3, r0
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d006      	beq.n	8010f0e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010f00:	4b2e      	ldr	r3, [pc, #184]	; (8010fbc <icmp_input+0x1f8>)
 8010f02:	22c7      	movs	r2, #199	; 0xc7
 8010f04:	4930      	ldr	r1, [pc, #192]	; (8010fc8 <icmp_input+0x204>)
 8010f06:	482f      	ldr	r0, [pc, #188]	; (8010fc4 <icmp_input+0x200>)
 8010f08:	f001 fb2e 	bl	8012568 <iprintf>
          goto icmperr;
 8010f0c:	e04b      	b.n	8010fa6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	685b      	ldr	r3, [r3, #4]
 8010f12:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010f14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f16:	4619      	mov	r1, r3
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f7f6 f819 	bl	8006f50 <pbuf_add_header>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d12b      	bne.n	8010f7c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	685b      	ldr	r3, [r3, #4]
 8010f28:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010f2a:	69fb      	ldr	r3, [r7, #28]
 8010f2c:	681a      	ldr	r2, [r3, #0]
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010f32:	4b20      	ldr	r3, [pc, #128]	; (8010fb4 <icmp_input+0x1f0>)
 8010f34:	691a      	ldr	r2, [r3, #16]
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010f3a:	693b      	ldr	r3, [r7, #16]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8010f40:	693b      	ldr	r3, [r7, #16]
 8010f42:	2200      	movs	r2, #0
 8010f44:	709a      	strb	r2, [r3, #2]
 8010f46:	2200      	movs	r2, #0
 8010f48:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	22ff      	movs	r2, #255	; 0xff
 8010f4e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	2200      	movs	r2, #0
 8010f54:	729a      	strb	r2, [r3, #10]
 8010f56:	2200      	movs	r2, #0
 8010f58:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	9302      	str	r3, [sp, #8]
 8010f5e:	2301      	movs	r3, #1
 8010f60:	9301      	str	r3, [sp, #4]
 8010f62:	2300      	movs	r3, #0
 8010f64:	9300      	str	r3, [sp, #0]
 8010f66:	23ff      	movs	r3, #255	; 0xff
 8010f68:	2200      	movs	r2, #0
 8010f6a:	69f9      	ldr	r1, [r7, #28]
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f000 fa91 	bl	8011494 <ip4_output_if>
 8010f72:	4603      	mov	r3, r0
 8010f74:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010f76:	e001      	b.n	8010f7c <icmp_input+0x1b8>
      break;
 8010f78:	bf00      	nop
 8010f7a:	e000      	b.n	8010f7e <icmp_input+0x1ba>
      break;
 8010f7c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f7f6 f87c 	bl	800707c <pbuf_free>
  return;
 8010f84:	e013      	b.n	8010fae <icmp_input+0x1ea>
    goto lenerr;
 8010f86:	bf00      	nop
 8010f88:	e002      	b.n	8010f90 <icmp_input+0x1cc>
    goto lenerr;
 8010f8a:	bf00      	nop
 8010f8c:	e000      	b.n	8010f90 <icmp_input+0x1cc>
        goto lenerr;
 8010f8e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f7f6 f873 	bl	800707c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010f96:	e00a      	b.n	8010fae <icmp_input+0x1ea>
        goto icmperr;
 8010f98:	bf00      	nop
 8010f9a:	e004      	b.n	8010fa6 <icmp_input+0x1e2>
        goto icmperr;
 8010f9c:	bf00      	nop
 8010f9e:	e002      	b.n	8010fa6 <icmp_input+0x1e2>
          goto icmperr;
 8010fa0:	bf00      	nop
 8010fa2:	e000      	b.n	8010fa6 <icmp_input+0x1e2>
          goto icmperr;
 8010fa4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f7f6 f868 	bl	800707c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010fac:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010fae:	3728      	adds	r7, #40	; 0x28
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}
 8010fb4:	20003c24 	.word	0x20003c24
 8010fb8:	20003c38 	.word	0x20003c38
 8010fbc:	08015fa4 	.word	0x08015fa4
 8010fc0:	08015fdc 	.word	0x08015fdc
 8010fc4:	08016014 	.word	0x08016014
 8010fc8:	0801603c 	.word	0x0801603c

08010fcc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
 8010fd4:	460b      	mov	r3, r1
 8010fd6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010fd8:	78fb      	ldrb	r3, [r7, #3]
 8010fda:	461a      	mov	r2, r3
 8010fdc:	2103      	movs	r1, #3
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f000 f814 	bl	801100c <icmp_send_response>
}
 8010fe4:	bf00      	nop
 8010fe6:	3708      	adds	r7, #8
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b082      	sub	sp, #8
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
 8010ff4:	460b      	mov	r3, r1
 8010ff6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010ff8:	78fb      	ldrb	r3, [r7, #3]
 8010ffa:	461a      	mov	r2, r3
 8010ffc:	210b      	movs	r1, #11
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f000 f804 	bl	801100c <icmp_send_response>
}
 8011004:	bf00      	nop
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b08c      	sub	sp, #48	; 0x30
 8011010:	af04      	add	r7, sp, #16
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	460b      	mov	r3, r1
 8011016:	70fb      	strb	r3, [r7, #3]
 8011018:	4613      	mov	r3, r2
 801101a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801101c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011020:	2124      	movs	r1, #36	; 0x24
 8011022:	2022      	movs	r0, #34	; 0x22
 8011024:	f7f5 fd4a 	bl	8006abc <pbuf_alloc>
 8011028:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801102a:	69fb      	ldr	r3, [r7, #28]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d04c      	beq.n	80110ca <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011030:	69fb      	ldr	r3, [r7, #28]
 8011032:	895b      	ldrh	r3, [r3, #10]
 8011034:	2b23      	cmp	r3, #35	; 0x23
 8011036:	d806      	bhi.n	8011046 <icmp_send_response+0x3a>
 8011038:	4b26      	ldr	r3, [pc, #152]	; (80110d4 <icmp_send_response+0xc8>)
 801103a:	f240 1269 	movw	r2, #361	; 0x169
 801103e:	4926      	ldr	r1, [pc, #152]	; (80110d8 <icmp_send_response+0xcc>)
 8011040:	4826      	ldr	r0, [pc, #152]	; (80110dc <icmp_send_response+0xd0>)
 8011042:	f001 fa91 	bl	8012568 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801104c:	69fb      	ldr	r3, [r7, #28]
 801104e:	685b      	ldr	r3, [r3, #4]
 8011050:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011052:	697b      	ldr	r3, [r7, #20]
 8011054:	78fa      	ldrb	r2, [r7, #3]
 8011056:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011058:	697b      	ldr	r3, [r7, #20]
 801105a:	78ba      	ldrb	r2, [r7, #2]
 801105c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	2200      	movs	r2, #0
 8011062:	711a      	strb	r2, [r3, #4]
 8011064:	2200      	movs	r2, #0
 8011066:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	2200      	movs	r2, #0
 801106c:	719a      	strb	r2, [r3, #6]
 801106e:	2200      	movs	r2, #0
 8011070:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011072:	69fb      	ldr	r3, [r7, #28]
 8011074:	685b      	ldr	r3, [r3, #4]
 8011076:	f103 0008 	add.w	r0, r3, #8
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	221c      	movs	r2, #28
 8011080:	4619      	mov	r1, r3
 8011082:	f001 fa5e 	bl	8012542 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011086:	69bb      	ldr	r3, [r7, #24]
 8011088:	68db      	ldr	r3, [r3, #12]
 801108a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801108c:	f107 030c 	add.w	r3, r7, #12
 8011090:	4618      	mov	r0, r3
 8011092:	f000 f825 	bl	80110e0 <ip4_route>
 8011096:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011098:	693b      	ldr	r3, [r7, #16]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d011      	beq.n	80110c2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	2200      	movs	r2, #0
 80110a2:	709a      	strb	r2, [r3, #2]
 80110a4:	2200      	movs	r2, #0
 80110a6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80110a8:	f107 020c 	add.w	r2, r7, #12
 80110ac:	693b      	ldr	r3, [r7, #16]
 80110ae:	9302      	str	r3, [sp, #8]
 80110b0:	2301      	movs	r3, #1
 80110b2:	9301      	str	r3, [sp, #4]
 80110b4:	2300      	movs	r3, #0
 80110b6:	9300      	str	r3, [sp, #0]
 80110b8:	23ff      	movs	r3, #255	; 0xff
 80110ba:	2100      	movs	r1, #0
 80110bc:	69f8      	ldr	r0, [r7, #28]
 80110be:	f000 f9e9 	bl	8011494 <ip4_output_if>
  }
  pbuf_free(q);
 80110c2:	69f8      	ldr	r0, [r7, #28]
 80110c4:	f7f5 ffda 	bl	800707c <pbuf_free>
 80110c8:	e000      	b.n	80110cc <icmp_send_response+0xc0>
    return;
 80110ca:	bf00      	nop
}
 80110cc:	3720      	adds	r7, #32
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	08015fa4 	.word	0x08015fa4
 80110d8:	08016070 	.word	0x08016070
 80110dc:	08016014 	.word	0x08016014

080110e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80110e0:	b480      	push	{r7}
 80110e2:	b085      	sub	sp, #20
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80110e8:	4b33      	ldr	r3, [pc, #204]	; (80111b8 <ip4_route+0xd8>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	60fb      	str	r3, [r7, #12]
 80110ee:	e036      	b.n	801115e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80110f6:	f003 0301 	and.w	r3, r3, #1
 80110fa:	b2db      	uxtb	r3, r3
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d02b      	beq.n	8011158 <ip4_route+0x78>
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011106:	089b      	lsrs	r3, r3, #2
 8011108:	f003 0301 	and.w	r3, r3, #1
 801110c:	b2db      	uxtb	r3, r3
 801110e:	2b00      	cmp	r3, #0
 8011110:	d022      	beq.n	8011158 <ip4_route+0x78>
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	3304      	adds	r3, #4
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d01d      	beq.n	8011158 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681a      	ldr	r2, [r3, #0]
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	3304      	adds	r3, #4
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	405a      	eors	r2, r3
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	3308      	adds	r3, #8
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	4013      	ands	r3, r2
 8011130:	2b00      	cmp	r3, #0
 8011132:	d101      	bne.n	8011138 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	e038      	b.n	80111aa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801113e:	f003 0302 	and.w	r3, r3, #2
 8011142:	2b00      	cmp	r3, #0
 8011144:	d108      	bne.n	8011158 <ip4_route+0x78>
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681a      	ldr	r2, [r3, #0]
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	330c      	adds	r3, #12
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	429a      	cmp	r2, r3
 8011152:	d101      	bne.n	8011158 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	e028      	b.n	80111aa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	60fb      	str	r3, [r7, #12]
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d1c5      	bne.n	80110f0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011164:	4b15      	ldr	r3, [pc, #84]	; (80111bc <ip4_route+0xdc>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d01a      	beq.n	80111a2 <ip4_route+0xc2>
 801116c:	4b13      	ldr	r3, [pc, #76]	; (80111bc <ip4_route+0xdc>)
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011174:	f003 0301 	and.w	r3, r3, #1
 8011178:	2b00      	cmp	r3, #0
 801117a:	d012      	beq.n	80111a2 <ip4_route+0xc2>
 801117c:	4b0f      	ldr	r3, [pc, #60]	; (80111bc <ip4_route+0xdc>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011184:	f003 0304 	and.w	r3, r3, #4
 8011188:	2b00      	cmp	r3, #0
 801118a:	d00a      	beq.n	80111a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801118c:	4b0b      	ldr	r3, [pc, #44]	; (80111bc <ip4_route+0xdc>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	3304      	adds	r3, #4
 8011192:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011194:	2b00      	cmp	r3, #0
 8011196:	d004      	beq.n	80111a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	b2db      	uxtb	r3, r3
 801119e:	2b7f      	cmp	r3, #127	; 0x7f
 80111a0:	d101      	bne.n	80111a6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80111a2:	2300      	movs	r3, #0
 80111a4:	e001      	b.n	80111aa <ip4_route+0xca>
  }

  return netif_default;
 80111a6:	4b05      	ldr	r3, [pc, #20]	; (80111bc <ip4_route+0xdc>)
 80111a8:	681b      	ldr	r3, [r3, #0]
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3714      	adds	r7, #20
 80111ae:	46bd      	mov	sp, r7
 80111b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b4:	4770      	bx	lr
 80111b6:	bf00      	nop
 80111b8:	20007178 	.word	0x20007178
 80111bc:	2000717c 	.word	0x2000717c

080111c0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b082      	sub	sp, #8
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80111ce:	f003 0301 	and.w	r3, r3, #1
 80111d2:	b2db      	uxtb	r3, r3
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d016      	beq.n	8011206 <ip4_input_accept+0x46>
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	3304      	adds	r3, #4
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d011      	beq.n	8011206 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80111e2:	4b0b      	ldr	r3, [pc, #44]	; (8011210 <ip4_input_accept+0x50>)
 80111e4:	695a      	ldr	r2, [r3, #20]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	3304      	adds	r3, #4
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d008      	beq.n	8011202 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80111f0:	4b07      	ldr	r3, [pc, #28]	; (8011210 <ip4_input_accept+0x50>)
 80111f2:	695b      	ldr	r3, [r3, #20]
 80111f4:	6879      	ldr	r1, [r7, #4]
 80111f6:	4618      	mov	r0, r3
 80111f8:	f000 fa24 	bl	8011644 <ip4_addr_isbroadcast_u32>
 80111fc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d001      	beq.n	8011206 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011202:	2301      	movs	r3, #1
 8011204:	e000      	b.n	8011208 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011206:	2300      	movs	r3, #0
}
 8011208:	4618      	mov	r0, r3
 801120a:	3708      	adds	r7, #8
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}
 8011210:	20003c24 	.word	0x20003c24

08011214 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b088      	sub	sp, #32
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
 801121c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801121e:	2301      	movs	r3, #1
 8011220:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8011228:	69fb      	ldr	r3, [r7, #28]
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	091b      	lsrs	r3, r3, #4
 801122e:	b2db      	uxtb	r3, r3
 8011230:	2b04      	cmp	r3, #4
 8011232:	d004      	beq.n	801123e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011234:	6878      	ldr	r0, [r7, #4]
 8011236:	f7f5 ff21 	bl	800707c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801123a:	2300      	movs	r3, #0
 801123c:	e121      	b.n	8011482 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801123e:	69fb      	ldr	r3, [r7, #28]
 8011240:	781b      	ldrb	r3, [r3, #0]
 8011242:	f003 030f 	and.w	r3, r3, #15
 8011246:	b2db      	uxtb	r3, r3
 8011248:	009b      	lsls	r3, r3, #2
 801124a:	b2db      	uxtb	r3, r3
 801124c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801124e:	69fb      	ldr	r3, [r7, #28]
 8011250:	885b      	ldrh	r3, [r3, #2]
 8011252:	b29b      	uxth	r3, r3
 8011254:	4618      	mov	r0, r3
 8011256:	f7f4 fc39 	bl	8005acc <lwip_htons>
 801125a:	4603      	mov	r3, r0
 801125c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	891b      	ldrh	r3, [r3, #8]
 8011262:	8a3a      	ldrh	r2, [r7, #16]
 8011264:	429a      	cmp	r2, r3
 8011266:	d204      	bcs.n	8011272 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8011268:	8a3b      	ldrh	r3, [r7, #16]
 801126a:	4619      	mov	r1, r3
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f7f5 fd7f 	bl	8006d70 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	895b      	ldrh	r3, [r3, #10]
 8011276:	8a7a      	ldrh	r2, [r7, #18]
 8011278:	429a      	cmp	r2, r3
 801127a:	d807      	bhi.n	801128c <ip4_input+0x78>
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	891b      	ldrh	r3, [r3, #8]
 8011280:	8a3a      	ldrh	r2, [r7, #16]
 8011282:	429a      	cmp	r2, r3
 8011284:	d802      	bhi.n	801128c <ip4_input+0x78>
 8011286:	8a7b      	ldrh	r3, [r7, #18]
 8011288:	2b13      	cmp	r3, #19
 801128a:	d804      	bhi.n	8011296 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f7f5 fef5 	bl	800707c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8011292:	2300      	movs	r3, #0
 8011294:	e0f5      	b.n	8011482 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8011296:	69fb      	ldr	r3, [r7, #28]
 8011298:	691b      	ldr	r3, [r3, #16]
 801129a:	4a7c      	ldr	r2, [pc, #496]	; (801148c <ip4_input+0x278>)
 801129c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801129e:	69fb      	ldr	r3, [r7, #28]
 80112a0:	68db      	ldr	r3, [r3, #12]
 80112a2:	4a7a      	ldr	r2, [pc, #488]	; (801148c <ip4_input+0x278>)
 80112a4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80112a6:	4b79      	ldr	r3, [pc, #484]	; (801148c <ip4_input+0x278>)
 80112a8:	695b      	ldr	r3, [r3, #20]
 80112aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80112ae:	2be0      	cmp	r3, #224	; 0xe0
 80112b0:	d112      	bne.n	80112d8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80112b8:	f003 0301 	and.w	r3, r3, #1
 80112bc:	b2db      	uxtb	r3, r3
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d007      	beq.n	80112d2 <ip4_input+0xbe>
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	3304      	adds	r3, #4
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d002      	beq.n	80112d2 <ip4_input+0xbe>
      netif = inp;
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	61bb      	str	r3, [r7, #24]
 80112d0:	e02a      	b.n	8011328 <ip4_input+0x114>
    } else {
      netif = NULL;
 80112d2:	2300      	movs	r3, #0
 80112d4:	61bb      	str	r3, [r7, #24]
 80112d6:	e027      	b.n	8011328 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80112d8:	6838      	ldr	r0, [r7, #0]
 80112da:	f7ff ff71 	bl	80111c0 <ip4_input_accept>
 80112de:	4603      	mov	r3, r0
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d002      	beq.n	80112ea <ip4_input+0xd6>
      netif = inp;
 80112e4:	683b      	ldr	r3, [r7, #0]
 80112e6:	61bb      	str	r3, [r7, #24]
 80112e8:	e01e      	b.n	8011328 <ip4_input+0x114>
    } else {
      netif = NULL;
 80112ea:	2300      	movs	r3, #0
 80112ec:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80112ee:	4b67      	ldr	r3, [pc, #412]	; (801148c <ip4_input+0x278>)
 80112f0:	695b      	ldr	r3, [r3, #20]
 80112f2:	b2db      	uxtb	r3, r3
 80112f4:	2b7f      	cmp	r3, #127	; 0x7f
 80112f6:	d017      	beq.n	8011328 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80112f8:	4b65      	ldr	r3, [pc, #404]	; (8011490 <ip4_input+0x27c>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	61bb      	str	r3, [r7, #24]
 80112fe:	e00e      	b.n	801131e <ip4_input+0x10a>
          if (netif == inp) {
 8011300:	69ba      	ldr	r2, [r7, #24]
 8011302:	683b      	ldr	r3, [r7, #0]
 8011304:	429a      	cmp	r2, r3
 8011306:	d006      	beq.n	8011316 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011308:	69b8      	ldr	r0, [r7, #24]
 801130a:	f7ff ff59 	bl	80111c0 <ip4_input_accept>
 801130e:	4603      	mov	r3, r0
 8011310:	2b00      	cmp	r3, #0
 8011312:	d108      	bne.n	8011326 <ip4_input+0x112>
 8011314:	e000      	b.n	8011318 <ip4_input+0x104>
            continue;
 8011316:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011318:	69bb      	ldr	r3, [r7, #24]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	61bb      	str	r3, [r7, #24]
 801131e:	69bb      	ldr	r3, [r7, #24]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d1ed      	bne.n	8011300 <ip4_input+0xec>
 8011324:	e000      	b.n	8011328 <ip4_input+0x114>
            break;
 8011326:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8011328:	69bb      	ldr	r3, [r7, #24]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d111      	bne.n	8011352 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801132e:	69fb      	ldr	r3, [r7, #28]
 8011330:	7a5b      	ldrb	r3, [r3, #9]
 8011332:	2b11      	cmp	r3, #17
 8011334:	d10d      	bne.n	8011352 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8011336:	8a7b      	ldrh	r3, [r7, #18]
 8011338:	69fa      	ldr	r2, [r7, #28]
 801133a:	4413      	add	r3, r2
 801133c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	885b      	ldrh	r3, [r3, #2]
 8011342:	b29b      	uxth	r3, r3
 8011344:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8011348:	d103      	bne.n	8011352 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801134e:	2300      	movs	r3, #0
 8011350:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d017      	beq.n	8011388 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8011358:	4b4c      	ldr	r3, [pc, #304]	; (801148c <ip4_input+0x278>)
 801135a:	691b      	ldr	r3, [r3, #16]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d013      	beq.n	8011388 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011360:	4b4a      	ldr	r3, [pc, #296]	; (801148c <ip4_input+0x278>)
 8011362:	691b      	ldr	r3, [r3, #16]
 8011364:	6839      	ldr	r1, [r7, #0]
 8011366:	4618      	mov	r0, r3
 8011368:	f000 f96c 	bl	8011644 <ip4_addr_isbroadcast_u32>
 801136c:	4603      	mov	r3, r0
 801136e:	2b00      	cmp	r3, #0
 8011370:	d105      	bne.n	801137e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011372:	4b46      	ldr	r3, [pc, #280]	; (801148c <ip4_input+0x278>)
 8011374:	691b      	ldr	r3, [r3, #16]
 8011376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801137a:	2be0      	cmp	r3, #224	; 0xe0
 801137c:	d104      	bne.n	8011388 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f7f5 fe7c 	bl	800707c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011384:	2300      	movs	r3, #0
 8011386:	e07c      	b.n	8011482 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011388:	69bb      	ldr	r3, [r7, #24]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d104      	bne.n	8011398 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f7f5 fe74 	bl	800707c <pbuf_free>
    return ERR_OK;
 8011394:	2300      	movs	r3, #0
 8011396:	e074      	b.n	8011482 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011398:	69fb      	ldr	r3, [r7, #28]
 801139a:	88db      	ldrh	r3, [r3, #6]
 801139c:	b29b      	uxth	r3, r3
 801139e:	461a      	mov	r2, r3
 80113a0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80113a4:	4013      	ands	r3, r2
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d00b      	beq.n	80113c2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f000 fc90 	bl	8011cd0 <ip4_reass>
 80113b0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d101      	bne.n	80113bc <ip4_input+0x1a8>
      return ERR_OK;
 80113b8:	2300      	movs	r3, #0
 80113ba:	e062      	b.n	8011482 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	685b      	ldr	r3, [r3, #4]
 80113c0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80113c2:	4a32      	ldr	r2, [pc, #200]	; (801148c <ip4_input+0x278>)
 80113c4:	69bb      	ldr	r3, [r7, #24]
 80113c6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80113c8:	4a30      	ldr	r2, [pc, #192]	; (801148c <ip4_input+0x278>)
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80113ce:	4a2f      	ldr	r2, [pc, #188]	; (801148c <ip4_input+0x278>)
 80113d0:	69fb      	ldr	r3, [r7, #28]
 80113d2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80113d4:	69fb      	ldr	r3, [r7, #28]
 80113d6:	781b      	ldrb	r3, [r3, #0]
 80113d8:	f003 030f 	and.w	r3, r3, #15
 80113dc:	b2db      	uxtb	r3, r3
 80113de:	009b      	lsls	r3, r3, #2
 80113e0:	b2db      	uxtb	r3, r3
 80113e2:	b29a      	uxth	r2, r3
 80113e4:	4b29      	ldr	r3, [pc, #164]	; (801148c <ip4_input+0x278>)
 80113e6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80113e8:	8a7b      	ldrh	r3, [r7, #18]
 80113ea:	4619      	mov	r1, r3
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f7f5 fdbf 	bl	8006f70 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80113f2:	69fb      	ldr	r3, [r7, #28]
 80113f4:	7a5b      	ldrb	r3, [r3, #9]
 80113f6:	2b06      	cmp	r3, #6
 80113f8:	d009      	beq.n	801140e <ip4_input+0x1fa>
 80113fa:	2b11      	cmp	r3, #17
 80113fc:	d002      	beq.n	8011404 <ip4_input+0x1f0>
 80113fe:	2b01      	cmp	r3, #1
 8011400:	d00a      	beq.n	8011418 <ip4_input+0x204>
 8011402:	e00e      	b.n	8011422 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8011404:	6839      	ldr	r1, [r7, #0]
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f7fc fb28 	bl	800da5c <udp_input>
        break;
 801140c:	e026      	b.n	801145c <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801140e:	6839      	ldr	r1, [r7, #0]
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f7f7 ff05 	bl	8009220 <tcp_input>
        break;
 8011416:	e021      	b.n	801145c <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011418:	6839      	ldr	r1, [r7, #0]
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f7ff fcd2 	bl	8010dc4 <icmp_input>
        break;
 8011420:	e01c      	b.n	801145c <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011422:	4b1a      	ldr	r3, [pc, #104]	; (801148c <ip4_input+0x278>)
 8011424:	695b      	ldr	r3, [r3, #20]
 8011426:	69b9      	ldr	r1, [r7, #24]
 8011428:	4618      	mov	r0, r3
 801142a:	f000 f90b 	bl	8011644 <ip4_addr_isbroadcast_u32>
 801142e:	4603      	mov	r3, r0
 8011430:	2b00      	cmp	r3, #0
 8011432:	d10f      	bne.n	8011454 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011434:	4b15      	ldr	r3, [pc, #84]	; (801148c <ip4_input+0x278>)
 8011436:	695b      	ldr	r3, [r3, #20]
 8011438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801143c:	2be0      	cmp	r3, #224	; 0xe0
 801143e:	d009      	beq.n	8011454 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011440:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011444:	4619      	mov	r1, r3
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f7f5 fe05 	bl	8007056 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801144c:	2102      	movs	r1, #2
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f7ff fdbc 	bl	8010fcc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f7f5 fe11 	bl	800707c <pbuf_free>
        break;
 801145a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801145c:	4b0b      	ldr	r3, [pc, #44]	; (801148c <ip4_input+0x278>)
 801145e:	2200      	movs	r2, #0
 8011460:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8011462:	4b0a      	ldr	r3, [pc, #40]	; (801148c <ip4_input+0x278>)
 8011464:	2200      	movs	r2, #0
 8011466:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011468:	4b08      	ldr	r3, [pc, #32]	; (801148c <ip4_input+0x278>)
 801146a:	2200      	movs	r2, #0
 801146c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801146e:	4b07      	ldr	r3, [pc, #28]	; (801148c <ip4_input+0x278>)
 8011470:	2200      	movs	r2, #0
 8011472:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011474:	4b05      	ldr	r3, [pc, #20]	; (801148c <ip4_input+0x278>)
 8011476:	2200      	movs	r2, #0
 8011478:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801147a:	4b04      	ldr	r3, [pc, #16]	; (801148c <ip4_input+0x278>)
 801147c:	2200      	movs	r2, #0
 801147e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011480:	2300      	movs	r3, #0
}
 8011482:	4618      	mov	r0, r3
 8011484:	3720      	adds	r7, #32
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	20003c24 	.word	0x20003c24
 8011490:	20007178 	.word	0x20007178

08011494 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b08a      	sub	sp, #40	; 0x28
 8011498:	af04      	add	r7, sp, #16
 801149a:	60f8      	str	r0, [r7, #12]
 801149c:	60b9      	str	r1, [r7, #8]
 801149e:	607a      	str	r2, [r7, #4]
 80114a0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d009      	beq.n	80114c0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d003      	beq.n	80114ba <ip4_output_if+0x26>
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d102      	bne.n	80114c0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80114ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114bc:	3304      	adds	r3, #4
 80114be:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80114c0:	78fa      	ldrb	r2, [r7, #3]
 80114c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114c4:	9302      	str	r3, [sp, #8]
 80114c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80114ca:	9301      	str	r3, [sp, #4]
 80114cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80114d0:	9300      	str	r3, [sp, #0]
 80114d2:	4613      	mov	r3, r2
 80114d4:	687a      	ldr	r2, [r7, #4]
 80114d6:	6979      	ldr	r1, [r7, #20]
 80114d8:	68f8      	ldr	r0, [r7, #12]
 80114da:	f000 f805 	bl	80114e8 <ip4_output_if_src>
 80114de:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	3718      	adds	r7, #24
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}

080114e8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b088      	sub	sp, #32
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	60f8      	str	r0, [r7, #12]
 80114f0:	60b9      	str	r1, [r7, #8]
 80114f2:	607a      	str	r2, [r7, #4]
 80114f4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	7b9b      	ldrb	r3, [r3, #14]
 80114fa:	2b01      	cmp	r3, #1
 80114fc:	d006      	beq.n	801150c <ip4_output_if_src+0x24>
 80114fe:	4b4b      	ldr	r3, [pc, #300]	; (801162c <ip4_output_if_src+0x144>)
 8011500:	f44f 7255 	mov.w	r2, #852	; 0x354
 8011504:	494a      	ldr	r1, [pc, #296]	; (8011630 <ip4_output_if_src+0x148>)
 8011506:	484b      	ldr	r0, [pc, #300]	; (8011634 <ip4_output_if_src+0x14c>)
 8011508:	f001 f82e 	bl	8012568 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d060      	beq.n	80115d4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8011512:	2314      	movs	r3, #20
 8011514:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8011516:	2114      	movs	r1, #20
 8011518:	68f8      	ldr	r0, [r7, #12]
 801151a:	f7f5 fd19 	bl	8006f50 <pbuf_add_header>
 801151e:	4603      	mov	r3, r0
 8011520:	2b00      	cmp	r3, #0
 8011522:	d002      	beq.n	801152a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011524:	f06f 0301 	mvn.w	r3, #1
 8011528:	e07c      	b.n	8011624 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	685b      	ldr	r3, [r3, #4]
 801152e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	895b      	ldrh	r3, [r3, #10]
 8011534:	2b13      	cmp	r3, #19
 8011536:	d806      	bhi.n	8011546 <ip4_output_if_src+0x5e>
 8011538:	4b3c      	ldr	r3, [pc, #240]	; (801162c <ip4_output_if_src+0x144>)
 801153a:	f240 3289 	movw	r2, #905	; 0x389
 801153e:	493e      	ldr	r1, [pc, #248]	; (8011638 <ip4_output_if_src+0x150>)
 8011540:	483c      	ldr	r0, [pc, #240]	; (8011634 <ip4_output_if_src+0x14c>)
 8011542:	f001 f811 	bl	8012568 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8011546:	69fb      	ldr	r3, [r7, #28]
 8011548:	78fa      	ldrb	r2, [r7, #3]
 801154a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801154c:	69fb      	ldr	r3, [r7, #28]
 801154e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8011552:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681a      	ldr	r2, [r3, #0]
 8011558:	69fb      	ldr	r3, [r7, #28]
 801155a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801155c:	8b7b      	ldrh	r3, [r7, #26]
 801155e:	089b      	lsrs	r3, r3, #2
 8011560:	b29b      	uxth	r3, r3
 8011562:	b2db      	uxtb	r3, r3
 8011564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011568:	b2da      	uxtb	r2, r3
 801156a:	69fb      	ldr	r3, [r7, #28]
 801156c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801156e:	69fb      	ldr	r3, [r7, #28]
 8011570:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011574:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	891b      	ldrh	r3, [r3, #8]
 801157a:	4618      	mov	r0, r3
 801157c:	f7f4 faa6 	bl	8005acc <lwip_htons>
 8011580:	4603      	mov	r3, r0
 8011582:	461a      	mov	r2, r3
 8011584:	69fb      	ldr	r3, [r7, #28]
 8011586:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011588:	69fb      	ldr	r3, [r7, #28]
 801158a:	2200      	movs	r2, #0
 801158c:	719a      	strb	r2, [r3, #6]
 801158e:	2200      	movs	r2, #0
 8011590:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8011592:	4b2a      	ldr	r3, [pc, #168]	; (801163c <ip4_output_if_src+0x154>)
 8011594:	881b      	ldrh	r3, [r3, #0]
 8011596:	4618      	mov	r0, r3
 8011598:	f7f4 fa98 	bl	8005acc <lwip_htons>
 801159c:	4603      	mov	r3, r0
 801159e:	461a      	mov	r2, r3
 80115a0:	69fb      	ldr	r3, [r7, #28]
 80115a2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80115a4:	4b25      	ldr	r3, [pc, #148]	; (801163c <ip4_output_if_src+0x154>)
 80115a6:	881b      	ldrh	r3, [r3, #0]
 80115a8:	3301      	adds	r3, #1
 80115aa:	b29a      	uxth	r2, r3
 80115ac:	4b23      	ldr	r3, [pc, #140]	; (801163c <ip4_output_if_src+0x154>)
 80115ae:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80115b0:	68bb      	ldr	r3, [r7, #8]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d104      	bne.n	80115c0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80115b6:	4b22      	ldr	r3, [pc, #136]	; (8011640 <ip4_output_if_src+0x158>)
 80115b8:	681a      	ldr	r2, [r3, #0]
 80115ba:	69fb      	ldr	r3, [r7, #28]
 80115bc:	60da      	str	r2, [r3, #12]
 80115be:	e003      	b.n	80115c8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	681a      	ldr	r2, [r3, #0]
 80115c4:	69fb      	ldr	r3, [r7, #28]
 80115c6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80115c8:	69fb      	ldr	r3, [r7, #28]
 80115ca:	2200      	movs	r2, #0
 80115cc:	729a      	strb	r2, [r3, #10]
 80115ce:	2200      	movs	r2, #0
 80115d0:	72da      	strb	r2, [r3, #11]
 80115d2:	e00f      	b.n	80115f4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	895b      	ldrh	r3, [r3, #10]
 80115d8:	2b13      	cmp	r3, #19
 80115da:	d802      	bhi.n	80115e2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80115dc:	f06f 0301 	mvn.w	r3, #1
 80115e0:	e020      	b.n	8011624 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	685b      	ldr	r3, [r3, #4]
 80115e6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80115e8:	69fb      	ldr	r3, [r7, #28]
 80115ea:	691b      	ldr	r3, [r3, #16]
 80115ec:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80115ee:	f107 0314 	add.w	r3, r7, #20
 80115f2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80115f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d00c      	beq.n	8011616 <ip4_output_if_src+0x12e>
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	891a      	ldrh	r2, [r3, #8]
 8011600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011602:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011604:	429a      	cmp	r2, r3
 8011606:	d906      	bls.n	8011616 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011608:	687a      	ldr	r2, [r7, #4]
 801160a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801160c:	68f8      	ldr	r0, [r7, #12]
 801160e:	f000 fd4b 	bl	80120a8 <ip4_frag>
 8011612:	4603      	mov	r3, r0
 8011614:	e006      	b.n	8011624 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8011616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011618:	695b      	ldr	r3, [r3, #20]
 801161a:	687a      	ldr	r2, [r7, #4]
 801161c:	68f9      	ldr	r1, [r7, #12]
 801161e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011620:	4798      	blx	r3
 8011622:	4603      	mov	r3, r0
}
 8011624:	4618      	mov	r0, r3
 8011626:	3720      	adds	r7, #32
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}
 801162c:	0801609c 	.word	0x0801609c
 8011630:	080160d0 	.word	0x080160d0
 8011634:	080160dc 	.word	0x080160dc
 8011638:	08016104 	.word	0x08016104
 801163c:	2000065a 	.word	0x2000065a
 8011640:	08016a9c 	.word	0x08016a9c

08011644 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8011644:	b480      	push	{r7}
 8011646:	b085      	sub	sp, #20
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
 801164c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011658:	d002      	beq.n	8011660 <ip4_addr_isbroadcast_u32+0x1c>
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d101      	bne.n	8011664 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011660:	2301      	movs	r3, #1
 8011662:	e02a      	b.n	80116ba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801166a:	f003 0302 	and.w	r3, r3, #2
 801166e:	2b00      	cmp	r3, #0
 8011670:	d101      	bne.n	8011676 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8011672:	2300      	movs	r3, #0
 8011674:	e021      	b.n	80116ba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	3304      	adds	r3, #4
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	687a      	ldr	r2, [r7, #4]
 801167e:	429a      	cmp	r2, r3
 8011680:	d101      	bne.n	8011686 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8011682:	2300      	movs	r3, #0
 8011684:	e019      	b.n	80116ba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8011686:	68fa      	ldr	r2, [r7, #12]
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	3304      	adds	r3, #4
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	405a      	eors	r2, r3
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	3308      	adds	r3, #8
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	4013      	ands	r3, r2
 8011698:	2b00      	cmp	r3, #0
 801169a:	d10d      	bne.n	80116b8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	3308      	adds	r3, #8
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	43da      	mvns	r2, r3
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	3308      	adds	r3, #8
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80116b0:	429a      	cmp	r2, r3
 80116b2:	d101      	bne.n	80116b8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80116b4:	2301      	movs	r3, #1
 80116b6:	e000      	b.n	80116ba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80116b8:	2300      	movs	r3, #0
  }
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3714      	adds	r7, #20
 80116be:	46bd      	mov	sp, r7
 80116c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c4:	4770      	bx	lr
	...

080116c8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b084      	sub	sp, #16
 80116cc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80116ce:	2300      	movs	r3, #0
 80116d0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80116d2:	4b12      	ldr	r3, [pc, #72]	; (801171c <ip_reass_tmr+0x54>)
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80116d8:	e018      	b.n	801170c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	7fdb      	ldrb	r3, [r3, #31]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d00b      	beq.n	80116fa <ip_reass_tmr+0x32>
      r->timer--;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	7fdb      	ldrb	r3, [r3, #31]
 80116e6:	3b01      	subs	r3, #1
 80116e8:	b2da      	uxtb	r2, r3
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	60fb      	str	r3, [r7, #12]
 80116f8:	e008      	b.n	801170c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011704:	68b9      	ldr	r1, [r7, #8]
 8011706:	6878      	ldr	r0, [r7, #4]
 8011708:	f000 f80a 	bl	8011720 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d1e3      	bne.n	80116da <ip_reass_tmr+0x12>
    }
  }
}
 8011712:	bf00      	nop
 8011714:	3710      	adds	r7, #16
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}
 801171a:	bf00      	nop
 801171c:	2000065c 	.word	0x2000065c

08011720 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b088      	sub	sp, #32
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
 8011728:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801172a:	2300      	movs	r3, #0
 801172c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801172e:	683a      	ldr	r2, [r7, #0]
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	429a      	cmp	r2, r3
 8011734:	d105      	bne.n	8011742 <ip_reass_free_complete_datagram+0x22>
 8011736:	4b45      	ldr	r3, [pc, #276]	; (801184c <ip_reass_free_complete_datagram+0x12c>)
 8011738:	22ab      	movs	r2, #171	; 0xab
 801173a:	4945      	ldr	r1, [pc, #276]	; (8011850 <ip_reass_free_complete_datagram+0x130>)
 801173c:	4845      	ldr	r0, [pc, #276]	; (8011854 <ip_reass_free_complete_datagram+0x134>)
 801173e:	f000 ff13 	bl	8012568 <iprintf>
  if (prev != NULL) {
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d00a      	beq.n	801175e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	687a      	ldr	r2, [r7, #4]
 801174e:	429a      	cmp	r2, r3
 8011750:	d005      	beq.n	801175e <ip_reass_free_complete_datagram+0x3e>
 8011752:	4b3e      	ldr	r3, [pc, #248]	; (801184c <ip_reass_free_complete_datagram+0x12c>)
 8011754:	22ad      	movs	r2, #173	; 0xad
 8011756:	4940      	ldr	r1, [pc, #256]	; (8011858 <ip_reass_free_complete_datagram+0x138>)
 8011758:	483e      	ldr	r0, [pc, #248]	; (8011854 <ip_reass_free_complete_datagram+0x134>)
 801175a:	f000 ff05 	bl	8012568 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011766:	697b      	ldr	r3, [r7, #20]
 8011768:	889b      	ldrh	r3, [r3, #4]
 801176a:	b29b      	uxth	r3, r3
 801176c:	2b00      	cmp	r3, #0
 801176e:	d12a      	bne.n	80117c6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	685b      	ldr	r3, [r3, #4]
 8011774:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	681a      	ldr	r2, [r3, #0]
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801177e:	69bb      	ldr	r3, [r7, #24]
 8011780:	6858      	ldr	r0, [r3, #4]
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	3308      	adds	r3, #8
 8011786:	2214      	movs	r2, #20
 8011788:	4619      	mov	r1, r3
 801178a:	f000 feda 	bl	8012542 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801178e:	2101      	movs	r1, #1
 8011790:	69b8      	ldr	r0, [r7, #24]
 8011792:	f7ff fc2b 	bl	8010fec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011796:	69b8      	ldr	r0, [r7, #24]
 8011798:	f7f5 fcf8 	bl	800718c <pbuf_clen>
 801179c:	4603      	mov	r3, r0
 801179e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80117a0:	8bfa      	ldrh	r2, [r7, #30]
 80117a2:	8a7b      	ldrh	r3, [r7, #18]
 80117a4:	4413      	add	r3, r2
 80117a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117aa:	db05      	blt.n	80117b8 <ip_reass_free_complete_datagram+0x98>
 80117ac:	4b27      	ldr	r3, [pc, #156]	; (801184c <ip_reass_free_complete_datagram+0x12c>)
 80117ae:	22bc      	movs	r2, #188	; 0xbc
 80117b0:	492a      	ldr	r1, [pc, #168]	; (801185c <ip_reass_free_complete_datagram+0x13c>)
 80117b2:	4828      	ldr	r0, [pc, #160]	; (8011854 <ip_reass_free_complete_datagram+0x134>)
 80117b4:	f000 fed8 	bl	8012568 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80117b8:	8bfa      	ldrh	r2, [r7, #30]
 80117ba:	8a7b      	ldrh	r3, [r7, #18]
 80117bc:	4413      	add	r3, r2
 80117be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80117c0:	69b8      	ldr	r0, [r7, #24]
 80117c2:	f7f5 fc5b 	bl	800707c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	685b      	ldr	r3, [r3, #4]
 80117ca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80117cc:	e01f      	b.n	801180e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80117ce:	69bb      	ldr	r3, [r7, #24]
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80117d4:	69bb      	ldr	r3, [r7, #24]
 80117d6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80117d8:	697b      	ldr	r3, [r7, #20]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80117de:	68f8      	ldr	r0, [r7, #12]
 80117e0:	f7f5 fcd4 	bl	800718c <pbuf_clen>
 80117e4:	4603      	mov	r3, r0
 80117e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80117e8:	8bfa      	ldrh	r2, [r7, #30]
 80117ea:	8a7b      	ldrh	r3, [r7, #18]
 80117ec:	4413      	add	r3, r2
 80117ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80117f2:	db05      	blt.n	8011800 <ip_reass_free_complete_datagram+0xe0>
 80117f4:	4b15      	ldr	r3, [pc, #84]	; (801184c <ip_reass_free_complete_datagram+0x12c>)
 80117f6:	22cc      	movs	r2, #204	; 0xcc
 80117f8:	4918      	ldr	r1, [pc, #96]	; (801185c <ip_reass_free_complete_datagram+0x13c>)
 80117fa:	4816      	ldr	r0, [pc, #88]	; (8011854 <ip_reass_free_complete_datagram+0x134>)
 80117fc:	f000 feb4 	bl	8012568 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011800:	8bfa      	ldrh	r2, [r7, #30]
 8011802:	8a7b      	ldrh	r3, [r7, #18]
 8011804:	4413      	add	r3, r2
 8011806:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011808:	68f8      	ldr	r0, [r7, #12]
 801180a:	f7f5 fc37 	bl	800707c <pbuf_free>
  while (p != NULL) {
 801180e:	69bb      	ldr	r3, [r7, #24]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d1dc      	bne.n	80117ce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011814:	6839      	ldr	r1, [r7, #0]
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f000 f8c2 	bl	80119a0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801181c:	4b10      	ldr	r3, [pc, #64]	; (8011860 <ip_reass_free_complete_datagram+0x140>)
 801181e:	881b      	ldrh	r3, [r3, #0]
 8011820:	8bfa      	ldrh	r2, [r7, #30]
 8011822:	429a      	cmp	r2, r3
 8011824:	d905      	bls.n	8011832 <ip_reass_free_complete_datagram+0x112>
 8011826:	4b09      	ldr	r3, [pc, #36]	; (801184c <ip_reass_free_complete_datagram+0x12c>)
 8011828:	22d2      	movs	r2, #210	; 0xd2
 801182a:	490e      	ldr	r1, [pc, #56]	; (8011864 <ip_reass_free_complete_datagram+0x144>)
 801182c:	4809      	ldr	r0, [pc, #36]	; (8011854 <ip_reass_free_complete_datagram+0x134>)
 801182e:	f000 fe9b 	bl	8012568 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011832:	4b0b      	ldr	r3, [pc, #44]	; (8011860 <ip_reass_free_complete_datagram+0x140>)
 8011834:	881a      	ldrh	r2, [r3, #0]
 8011836:	8bfb      	ldrh	r3, [r7, #30]
 8011838:	1ad3      	subs	r3, r2, r3
 801183a:	b29a      	uxth	r2, r3
 801183c:	4b08      	ldr	r3, [pc, #32]	; (8011860 <ip_reass_free_complete_datagram+0x140>)
 801183e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011840:	8bfb      	ldrh	r3, [r7, #30]
}
 8011842:	4618      	mov	r0, r3
 8011844:	3720      	adds	r7, #32
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}
 801184a:	bf00      	nop
 801184c:	08016134 	.word	0x08016134
 8011850:	08016170 	.word	0x08016170
 8011854:	0801617c 	.word	0x0801617c
 8011858:	080161a4 	.word	0x080161a4
 801185c:	080161b8 	.word	0x080161b8
 8011860:	20000660 	.word	0x20000660
 8011864:	080161d8 	.word	0x080161d8

08011868 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b08a      	sub	sp, #40	; 0x28
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
 8011870:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011872:	2300      	movs	r3, #0
 8011874:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011876:	2300      	movs	r3, #0
 8011878:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801187a:	2300      	movs	r3, #0
 801187c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801187e:	2300      	movs	r3, #0
 8011880:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011882:	2300      	movs	r3, #0
 8011884:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011886:	4b28      	ldr	r3, [pc, #160]	; (8011928 <ip_reass_remove_oldest_datagram+0xc0>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801188c:	e030      	b.n	80118f0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011890:	695a      	ldr	r2, [r3, #20]
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	68db      	ldr	r3, [r3, #12]
 8011896:	429a      	cmp	r2, r3
 8011898:	d10c      	bne.n	80118b4 <ip_reass_remove_oldest_datagram+0x4c>
 801189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801189c:	699a      	ldr	r2, [r3, #24]
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	691b      	ldr	r3, [r3, #16]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d106      	bne.n	80118b4 <ip_reass_remove_oldest_datagram+0x4c>
 80118a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a8:	899a      	ldrh	r2, [r3, #12]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	889b      	ldrh	r3, [r3, #4]
 80118ae:	b29b      	uxth	r3, r3
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d014      	beq.n	80118de <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	3301      	adds	r3, #1
 80118b8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80118ba:	6a3b      	ldr	r3, [r7, #32]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d104      	bne.n	80118ca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80118c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80118c4:	69fb      	ldr	r3, [r7, #28]
 80118c6:	61bb      	str	r3, [r7, #24]
 80118c8:	e009      	b.n	80118de <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80118ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118cc:	7fda      	ldrb	r2, [r3, #31]
 80118ce:	6a3b      	ldr	r3, [r7, #32]
 80118d0:	7fdb      	ldrb	r3, [r3, #31]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d803      	bhi.n	80118de <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80118d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80118da:	69fb      	ldr	r3, [r7, #28]
 80118dc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80118de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d001      	beq.n	80118ea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80118e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118e8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80118ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80118f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d1cb      	bne.n	801188e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80118f6:	6a3b      	ldr	r3, [r7, #32]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d008      	beq.n	801190e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80118fc:	69b9      	ldr	r1, [r7, #24]
 80118fe:	6a38      	ldr	r0, [r7, #32]
 8011900:	f7ff ff0e 	bl	8011720 <ip_reass_free_complete_datagram>
 8011904:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011906:	697a      	ldr	r2, [r7, #20]
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	4413      	add	r3, r2
 801190c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801190e:	697a      	ldr	r2, [r7, #20]
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	429a      	cmp	r2, r3
 8011914:	da02      	bge.n	801191c <ip_reass_remove_oldest_datagram+0xb4>
 8011916:	693b      	ldr	r3, [r7, #16]
 8011918:	2b01      	cmp	r3, #1
 801191a:	dcac      	bgt.n	8011876 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801191c:	697b      	ldr	r3, [r7, #20]
}
 801191e:	4618      	mov	r0, r3
 8011920:	3728      	adds	r7, #40	; 0x28
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	2000065c 	.word	0x2000065c

0801192c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b084      	sub	sp, #16
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
 8011934:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011936:	2004      	movs	r0, #4
 8011938:	f7f4 fd54 	bl	80063e4 <memp_malloc>
 801193c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d110      	bne.n	8011966 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011944:	6839      	ldr	r1, [r7, #0]
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f7ff ff8e 	bl	8011868 <ip_reass_remove_oldest_datagram>
 801194c:	4602      	mov	r2, r0
 801194e:	683b      	ldr	r3, [r7, #0]
 8011950:	4293      	cmp	r3, r2
 8011952:	dc03      	bgt.n	801195c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011954:	2004      	movs	r0, #4
 8011956:	f7f4 fd45 	bl	80063e4 <memp_malloc>
 801195a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d101      	bne.n	8011966 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011962:	2300      	movs	r3, #0
 8011964:	e016      	b.n	8011994 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011966:	2220      	movs	r2, #32
 8011968:	2100      	movs	r1, #0
 801196a:	68f8      	ldr	r0, [r7, #12]
 801196c:	f000 fdf4 	bl	8012558 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	220f      	movs	r2, #15
 8011974:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011976:	4b09      	ldr	r3, [pc, #36]	; (801199c <ip_reass_enqueue_new_datagram+0x70>)
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801197e:	4a07      	ldr	r2, [pc, #28]	; (801199c <ip_reass_enqueue_new_datagram+0x70>)
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	3308      	adds	r3, #8
 8011988:	2214      	movs	r2, #20
 801198a:	6879      	ldr	r1, [r7, #4]
 801198c:	4618      	mov	r0, r3
 801198e:	f000 fdd8 	bl	8012542 <memcpy>
  return ipr;
 8011992:	68fb      	ldr	r3, [r7, #12]
}
 8011994:	4618      	mov	r0, r3
 8011996:	3710      	adds	r7, #16
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}
 801199c:	2000065c 	.word	0x2000065c

080119a0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b082      	sub	sp, #8
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
 80119a8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80119aa:	4b10      	ldr	r3, [pc, #64]	; (80119ec <ip_reass_dequeue_datagram+0x4c>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	687a      	ldr	r2, [r7, #4]
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d104      	bne.n	80119be <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	4a0c      	ldr	r2, [pc, #48]	; (80119ec <ip_reass_dequeue_datagram+0x4c>)
 80119ba:	6013      	str	r3, [r2, #0]
 80119bc:	e00d      	b.n	80119da <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d106      	bne.n	80119d2 <ip_reass_dequeue_datagram+0x32>
 80119c4:	4b0a      	ldr	r3, [pc, #40]	; (80119f0 <ip_reass_dequeue_datagram+0x50>)
 80119c6:	f240 1245 	movw	r2, #325	; 0x145
 80119ca:	490a      	ldr	r1, [pc, #40]	; (80119f4 <ip_reass_dequeue_datagram+0x54>)
 80119cc:	480a      	ldr	r0, [pc, #40]	; (80119f8 <ip_reass_dequeue_datagram+0x58>)
 80119ce:	f000 fdcb 	bl	8012568 <iprintf>
    prev->next = ipr->next;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	681a      	ldr	r2, [r3, #0]
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80119da:	6879      	ldr	r1, [r7, #4]
 80119dc:	2004      	movs	r0, #4
 80119de:	f7f4 fd4d 	bl	800647c <memp_free>
}
 80119e2:	bf00      	nop
 80119e4:	3708      	adds	r7, #8
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}
 80119ea:	bf00      	nop
 80119ec:	2000065c 	.word	0x2000065c
 80119f0:	08016134 	.word	0x08016134
 80119f4:	080161fc 	.word	0x080161fc
 80119f8:	0801617c 	.word	0x0801617c

080119fc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b08c      	sub	sp, #48	; 0x30
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	60f8      	str	r0, [r7, #12]
 8011a04:	60b9      	str	r1, [r7, #8]
 8011a06:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011a08:	2300      	movs	r3, #0
 8011a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	685b      	ldr	r3, [r3, #4]
 8011a14:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011a16:	69fb      	ldr	r3, [r7, #28]
 8011a18:	885b      	ldrh	r3, [r3, #2]
 8011a1a:	b29b      	uxth	r3, r3
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7f4 f855 	bl	8005acc <lwip_htons>
 8011a22:	4603      	mov	r3, r0
 8011a24:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011a26:	69fb      	ldr	r3, [r7, #28]
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	f003 030f 	and.w	r3, r3, #15
 8011a2e:	b2db      	uxtb	r3, r3
 8011a30:	009b      	lsls	r3, r3, #2
 8011a32:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011a34:	7e7b      	ldrb	r3, [r7, #25]
 8011a36:	b29b      	uxth	r3, r3
 8011a38:	8b7a      	ldrh	r2, [r7, #26]
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d202      	bcs.n	8011a44 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8011a42:	e135      	b.n	8011cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011a44:	7e7b      	ldrb	r3, [r7, #25]
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	8b7a      	ldrh	r2, [r7, #26]
 8011a4a:	1ad3      	subs	r3, r2, r3
 8011a4c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011a4e:	69fb      	ldr	r3, [r7, #28]
 8011a50:	88db      	ldrh	r3, [r3, #6]
 8011a52:	b29b      	uxth	r3, r3
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7f4 f839 	bl	8005acc <lwip_htons>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011a60:	b29b      	uxth	r3, r3
 8011a62:	00db      	lsls	r3, r3, #3
 8011a64:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	685b      	ldr	r3, [r3, #4]
 8011a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8011a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a6e:	2200      	movs	r2, #0
 8011a70:	701a      	strb	r2, [r3, #0]
 8011a72:	2200      	movs	r2, #0
 8011a74:	705a      	strb	r2, [r3, #1]
 8011a76:	2200      	movs	r2, #0
 8011a78:	709a      	strb	r2, [r3, #2]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a80:	8afa      	ldrh	r2, [r7, #22]
 8011a82:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011a84:	8afa      	ldrh	r2, [r7, #22]
 8011a86:	8b7b      	ldrh	r3, [r7, #26]
 8011a88:	4413      	add	r3, r2
 8011a8a:	b29a      	uxth	r2, r3
 8011a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a8e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a92:	88db      	ldrh	r3, [r3, #6]
 8011a94:	b29b      	uxth	r3, r3
 8011a96:	8afa      	ldrh	r2, [r7, #22]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d902      	bls.n	8011aa2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8011aa0:	e106      	b.n	8011cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	685b      	ldr	r3, [r3, #4]
 8011aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8011aa8:	e068      	b.n	8011b7c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aac:	685b      	ldr	r3, [r3, #4]
 8011aae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab2:	889b      	ldrh	r3, [r3, #4]
 8011ab4:	b29a      	uxth	r2, r3
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	889b      	ldrh	r3, [r3, #4]
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d235      	bcs.n	8011b2c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ac4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d020      	beq.n	8011b0e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ace:	889b      	ldrh	r3, [r3, #4]
 8011ad0:	b29a      	uxth	r2, r3
 8011ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ad4:	88db      	ldrh	r3, [r3, #6]
 8011ad6:	b29b      	uxth	r3, r3
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	d307      	bcc.n	8011aec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ade:	88db      	ldrh	r3, [r3, #6]
 8011ae0:	b29a      	uxth	r2, r3
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	889b      	ldrh	r3, [r3, #4]
 8011ae6:	b29b      	uxth	r3, r3
 8011ae8:	429a      	cmp	r2, r3
 8011aea:	d902      	bls.n	8011af2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011aec:	f04f 33ff 	mov.w	r3, #4294967295
 8011af0:	e0de      	b.n	8011cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011af4:	68ba      	ldr	r2, [r7, #8]
 8011af6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011afa:	88db      	ldrh	r3, [r3, #6]
 8011afc:	b29a      	uxth	r2, r3
 8011afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b00:	889b      	ldrh	r3, [r3, #4]
 8011b02:	b29b      	uxth	r3, r3
 8011b04:	429a      	cmp	r2, r3
 8011b06:	d03d      	beq.n	8011b84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011b0c:	e03a      	b.n	8011b84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b10:	88db      	ldrh	r3, [r3, #6]
 8011b12:	b29a      	uxth	r2, r3
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	889b      	ldrh	r3, [r3, #4]
 8011b18:	b29b      	uxth	r3, r3
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d902      	bls.n	8011b24 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b22:	e0c5      	b.n	8011cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	68ba      	ldr	r2, [r7, #8]
 8011b28:	605a      	str	r2, [r3, #4]
      break;
 8011b2a:	e02b      	b.n	8011b84 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2e:	889b      	ldrh	r3, [r3, #4]
 8011b30:	b29a      	uxth	r2, r3
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	889b      	ldrh	r3, [r3, #4]
 8011b36:	b29b      	uxth	r3, r3
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	d102      	bne.n	8011b42 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b40:	e0b6      	b.n	8011cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b44:	889b      	ldrh	r3, [r3, #4]
 8011b46:	b29a      	uxth	r2, r3
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	88db      	ldrh	r3, [r3, #6]
 8011b4c:	b29b      	uxth	r3, r3
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	d202      	bcs.n	8011b58 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011b52:	f04f 33ff 	mov.w	r3, #4294967295
 8011b56:	e0ab      	b.n	8011cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d009      	beq.n	8011b72 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b60:	88db      	ldrh	r3, [r3, #6]
 8011b62:	b29a      	uxth	r2, r3
 8011b64:	693b      	ldr	r3, [r7, #16]
 8011b66:	889b      	ldrh	r3, [r3, #4]
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d001      	beq.n	8011b72 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8011b78:	693b      	ldr	r3, [r7, #16]
 8011b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8011b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d193      	bne.n	8011aaa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011b82:	e000      	b.n	8011b86 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011b84:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d12d      	bne.n	8011be8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d01c      	beq.n	8011bcc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b94:	88db      	ldrh	r3, [r3, #6]
 8011b96:	b29a      	uxth	r2, r3
 8011b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9a:	889b      	ldrh	r3, [r3, #4]
 8011b9c:	b29b      	uxth	r3, r3
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d906      	bls.n	8011bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011ba2:	4b45      	ldr	r3, [pc, #276]	; (8011cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011ba4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8011ba8:	4944      	ldr	r1, [pc, #272]	; (8011cbc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011baa:	4845      	ldr	r0, [pc, #276]	; (8011cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011bac:	f000 fcdc 	bl	8012568 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb2:	68ba      	ldr	r2, [r7, #8]
 8011bb4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bb8:	88db      	ldrh	r3, [r3, #6]
 8011bba:	b29a      	uxth	r2, r3
 8011bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bbe:	889b      	ldrh	r3, [r3, #4]
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	d010      	beq.n	8011be8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	623b      	str	r3, [r7, #32]
 8011bca:	e00d      	b.n	8011be8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	685b      	ldr	r3, [r3, #4]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d006      	beq.n	8011be2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011bd4:	4b38      	ldr	r3, [pc, #224]	; (8011cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011bd6:	f240 12bf 	movw	r2, #447	; 0x1bf
 8011bda:	493a      	ldr	r1, [pc, #232]	; (8011cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011bdc:	4838      	ldr	r0, [pc, #224]	; (8011cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011bde:	f000 fcc3 	bl	8012568 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	68ba      	ldr	r2, [r7, #8]
 8011be6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d105      	bne.n	8011bfa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	7f9b      	ldrb	r3, [r3, #30]
 8011bf2:	f003 0301 	and.w	r3, r3, #1
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d059      	beq.n	8011cae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011bfa:	6a3b      	ldr	r3, [r7, #32]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d04f      	beq.n	8011ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	685b      	ldr	r3, [r3, #4]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d006      	beq.n	8011c16 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	685b      	ldr	r3, [r3, #4]
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	889b      	ldrh	r3, [r3, #4]
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d002      	beq.n	8011c1c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011c16:	2300      	movs	r3, #0
 8011c18:	623b      	str	r3, [r7, #32]
 8011c1a:	e041      	b.n	8011ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c1e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8011c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011c26:	e012      	b.n	8011c4e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c2a:	685b      	ldr	r3, [r3, #4]
 8011c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8011c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c30:	88db      	ldrh	r3, [r3, #6]
 8011c32:	b29a      	uxth	r2, r3
 8011c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c36:	889b      	ldrh	r3, [r3, #4]
 8011c38:	b29b      	uxth	r3, r3
 8011c3a:	429a      	cmp	r2, r3
 8011c3c:	d002      	beq.n	8011c44 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	623b      	str	r3, [r7, #32]
            break;
 8011c42:	e007      	b.n	8011c54 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c46:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8011c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8011c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d1e9      	bne.n	8011c28 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011c54:	6a3b      	ldr	r3, [r7, #32]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d022      	beq.n	8011ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d106      	bne.n	8011c70 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011c62:	4b15      	ldr	r3, [pc, #84]	; (8011cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011c64:	f240 12df 	movw	r2, #479	; 0x1df
 8011c68:	4917      	ldr	r1, [pc, #92]	; (8011cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011c6a:	4815      	ldr	r0, [pc, #84]	; (8011cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011c6c:	f000 fc7c 	bl	8012568 <iprintf>
          LWIP_ASSERT("sanity check",
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	685b      	ldr	r3, [r3, #4]
 8011c74:	685b      	ldr	r3, [r3, #4]
 8011c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c78:	429a      	cmp	r2, r3
 8011c7a:	d106      	bne.n	8011c8a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011c7c:	4b0e      	ldr	r3, [pc, #56]	; (8011cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011c7e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011c82:	4911      	ldr	r1, [pc, #68]	; (8011cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011c84:	480e      	ldr	r0, [pc, #56]	; (8011cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011c86:	f000 fc6f 	bl	8012568 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d006      	beq.n	8011ca0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011c92:	4b09      	ldr	r3, [pc, #36]	; (8011cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011c94:	f240 12e3 	movw	r2, #483	; 0x1e3
 8011c98:	490c      	ldr	r1, [pc, #48]	; (8011ccc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011c9a:	4809      	ldr	r0, [pc, #36]	; (8011cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011c9c:	f000 fc64 	bl	8012568 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011ca0:	6a3b      	ldr	r3, [r7, #32]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	bf14      	ite	ne
 8011ca6:	2301      	movne	r3, #1
 8011ca8:	2300      	moveq	r3, #0
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	e000      	b.n	8011cb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011cae:	2300      	movs	r3, #0
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	3730      	adds	r7, #48	; 0x30
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}
 8011cb8:	08016134 	.word	0x08016134
 8011cbc:	08016218 	.word	0x08016218
 8011cc0:	0801617c 	.word	0x0801617c
 8011cc4:	08016238 	.word	0x08016238
 8011cc8:	08016270 	.word	0x08016270
 8011ccc:	08016280 	.word	0x08016280

08011cd0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b08e      	sub	sp, #56	; 0x38
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	685b      	ldr	r3, [r3, #4]
 8011cdc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce0:	781b      	ldrb	r3, [r3, #0]
 8011ce2:	f003 030f 	and.w	r3, r3, #15
 8011ce6:	b2db      	uxtb	r3, r3
 8011ce8:	009b      	lsls	r3, r3, #2
 8011cea:	b2db      	uxtb	r3, r3
 8011cec:	2b14      	cmp	r3, #20
 8011cee:	f040 8167 	bne.w	8011fc0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf4:	88db      	ldrh	r3, [r3, #6]
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7f3 fee7 	bl	8005acc <lwip_htons>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011d04:	b29b      	uxth	r3, r3
 8011d06:	00db      	lsls	r3, r3, #3
 8011d08:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d0c:	885b      	ldrh	r3, [r3, #2]
 8011d0e:	b29b      	uxth	r3, r3
 8011d10:	4618      	mov	r0, r3
 8011d12:	f7f3 fedb 	bl	8005acc <lwip_htons>
 8011d16:	4603      	mov	r3, r0
 8011d18:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	f003 030f 	and.w	r3, r3, #15
 8011d22:	b2db      	uxtb	r3, r3
 8011d24:	009b      	lsls	r3, r3, #2
 8011d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8011d2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011d2e:	b29b      	uxth	r3, r3
 8011d30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d32:	429a      	cmp	r2, r3
 8011d34:	f0c0 8146 	bcc.w	8011fc4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011d38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011d3c:	b29b      	uxth	r3, r3
 8011d3e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011d40:	1ad3      	subs	r3, r2, r3
 8011d42:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f7f5 fa21 	bl	800718c <pbuf_clen>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011d4e:	4ba3      	ldr	r3, [pc, #652]	; (8011fdc <ip4_reass+0x30c>)
 8011d50:	881b      	ldrh	r3, [r3, #0]
 8011d52:	461a      	mov	r2, r3
 8011d54:	8c3b      	ldrh	r3, [r7, #32]
 8011d56:	4413      	add	r3, r2
 8011d58:	2b0a      	cmp	r3, #10
 8011d5a:	dd10      	ble.n	8011d7e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011d5c:	8c3b      	ldrh	r3, [r7, #32]
 8011d5e:	4619      	mov	r1, r3
 8011d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d62:	f7ff fd81 	bl	8011868 <ip_reass_remove_oldest_datagram>
 8011d66:	4603      	mov	r3, r0
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	f000 812d 	beq.w	8011fc8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011d6e:	4b9b      	ldr	r3, [pc, #620]	; (8011fdc <ip4_reass+0x30c>)
 8011d70:	881b      	ldrh	r3, [r3, #0]
 8011d72:	461a      	mov	r2, r3
 8011d74:	8c3b      	ldrh	r3, [r7, #32]
 8011d76:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011d78:	2b0a      	cmp	r3, #10
 8011d7a:	f300 8125 	bgt.w	8011fc8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011d7e:	4b98      	ldr	r3, [pc, #608]	; (8011fe0 <ip4_reass+0x310>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	633b      	str	r3, [r7, #48]	; 0x30
 8011d84:	e015      	b.n	8011db2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d88:	695a      	ldr	r2, [r3, #20]
 8011d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d8c:	68db      	ldr	r3, [r3, #12]
 8011d8e:	429a      	cmp	r2, r3
 8011d90:	d10c      	bne.n	8011dac <ip4_reass+0xdc>
 8011d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d94:	699a      	ldr	r2, [r3, #24]
 8011d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d98:	691b      	ldr	r3, [r3, #16]
 8011d9a:	429a      	cmp	r2, r3
 8011d9c:	d106      	bne.n	8011dac <ip4_reass+0xdc>
 8011d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011da0:	899a      	ldrh	r2, [r3, #12]
 8011da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da4:	889b      	ldrh	r3, [r3, #4]
 8011da6:	b29b      	uxth	r3, r3
 8011da8:	429a      	cmp	r2, r3
 8011daa:	d006      	beq.n	8011dba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	633b      	str	r3, [r7, #48]	; 0x30
 8011db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d1e6      	bne.n	8011d86 <ip4_reass+0xb6>
 8011db8:	e000      	b.n	8011dbc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011dba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d109      	bne.n	8011dd6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011dc2:	8c3b      	ldrh	r3, [r7, #32]
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011dc8:	f7ff fdb0 	bl	801192c <ip_reass_enqueue_new_datagram>
 8011dcc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d11c      	bne.n	8011e0e <ip4_reass+0x13e>
      goto nullreturn;
 8011dd4:	e0f9      	b.n	8011fca <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dd8:	88db      	ldrh	r3, [r3, #6]
 8011dda:	b29b      	uxth	r3, r3
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f7f3 fe75 	bl	8005acc <lwip_htons>
 8011de2:	4603      	mov	r3, r0
 8011de4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d110      	bne.n	8011e0e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dee:	89db      	ldrh	r3, [r3, #14]
 8011df0:	4618      	mov	r0, r3
 8011df2:	f7f3 fe6b 	bl	8005acc <lwip_htons>
 8011df6:	4603      	mov	r3, r0
 8011df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d006      	beq.n	8011e0e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e02:	3308      	adds	r3, #8
 8011e04:	2214      	movs	r2, #20
 8011e06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f000 fb9a 	bl	8012542 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e10:	88db      	ldrh	r3, [r3, #6]
 8011e12:	b29b      	uxth	r3, r3
 8011e14:	f003 0320 	and.w	r3, r3, #32
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	bf0c      	ite	eq
 8011e1c:	2301      	moveq	r3, #1
 8011e1e:	2300      	movne	r3, #0
 8011e20:	b2db      	uxtb	r3, r3
 8011e22:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011e24:	69fb      	ldr	r3, [r7, #28]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d00e      	beq.n	8011e48 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011e2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e2e:	4413      	add	r3, r2
 8011e30:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011e32:	8b7a      	ldrh	r2, [r7, #26]
 8011e34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011e36:	429a      	cmp	r2, r3
 8011e38:	f0c0 80a0 	bcc.w	8011f7c <ip4_reass+0x2ac>
 8011e3c:	8b7b      	ldrh	r3, [r7, #26]
 8011e3e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8011e42:	4293      	cmp	r3, r2
 8011e44:	f200 809a 	bhi.w	8011f7c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011e48:	69fa      	ldr	r2, [r7, #28]
 8011e4a:	6879      	ldr	r1, [r7, #4]
 8011e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e4e:	f7ff fdd5 	bl	80119fc <ip_reass_chain_frag_into_datagram_and_validate>
 8011e52:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011e54:	697b      	ldr	r3, [r7, #20]
 8011e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e5a:	f000 8091 	beq.w	8011f80 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011e5e:	4b5f      	ldr	r3, [pc, #380]	; (8011fdc <ip4_reass+0x30c>)
 8011e60:	881a      	ldrh	r2, [r3, #0]
 8011e62:	8c3b      	ldrh	r3, [r7, #32]
 8011e64:	4413      	add	r3, r2
 8011e66:	b29a      	uxth	r2, r3
 8011e68:	4b5c      	ldr	r3, [pc, #368]	; (8011fdc <ip4_reass+0x30c>)
 8011e6a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011e6c:	69fb      	ldr	r3, [r7, #28]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d00d      	beq.n	8011e8e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011e72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8011e74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011e76:	4413      	add	r3, r2
 8011e78:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e7c:	8a7a      	ldrh	r2, [r7, #18]
 8011e7e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e82:	7f9b      	ldrb	r3, [r3, #30]
 8011e84:	f043 0301 	orr.w	r3, r3, #1
 8011e88:	b2da      	uxtb	r2, r3
 8011e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e8c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	2b01      	cmp	r3, #1
 8011e92:	d171      	bne.n	8011f78 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e96:	8b9b      	ldrh	r3, [r3, #28]
 8011e98:	3314      	adds	r3, #20
 8011e9a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e9e:	685b      	ldr	r3, [r3, #4]
 8011ea0:	685b      	ldr	r3, [r3, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea8:	685b      	ldr	r3, [r3, #4]
 8011eaa:	685b      	ldr	r3, [r3, #4]
 8011eac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb0:	3308      	adds	r3, #8
 8011eb2:	2214      	movs	r2, #20
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011eb8:	f000 fb43 	bl	8012542 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011ebc:	8a3b      	ldrh	r3, [r7, #16]
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f7f3 fe04 	bl	8005acc <lwip_htons>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	461a      	mov	r2, r3
 8011ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ece:	2200      	movs	r2, #0
 8011ed0:	719a      	strb	r2, [r3, #6]
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ed8:	2200      	movs	r2, #0
 8011eda:	729a      	strb	r2, [r3, #10]
 8011edc:	2200      	movs	r2, #0
 8011ede:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011ee6:	e00d      	b.n	8011f04 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8011ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011eee:	2114      	movs	r1, #20
 8011ef0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8011ef2:	f7f5 f83d 	bl	8006f70 <pbuf_remove_header>
      pbuf_cat(p, r);
 8011ef6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f7f5 f981 	bl	8007200 <pbuf_cat>
      r = iprh->next_pbuf;
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8011f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d1ee      	bne.n	8011ee8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011f0a:	4b35      	ldr	r3, [pc, #212]	; (8011fe0 <ip4_reass+0x310>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d102      	bne.n	8011f1a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8011f14:	2300      	movs	r3, #0
 8011f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f18:	e010      	b.n	8011f3c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011f1a:	4b31      	ldr	r3, [pc, #196]	; (8011fe0 <ip4_reass+0x310>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f20:	e007      	b.n	8011f32 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8011f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	d006      	beq.n	8011f3a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d1f4      	bne.n	8011f22 <ip4_reass+0x252>
 8011f38:	e000      	b.n	8011f3c <ip4_reass+0x26c>
          break;
 8011f3a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011f3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f40:	f7ff fd2e 	bl	80119a0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f7f5 f921 	bl	800718c <pbuf_clen>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011f4e:	4b23      	ldr	r3, [pc, #140]	; (8011fdc <ip4_reass+0x30c>)
 8011f50:	881b      	ldrh	r3, [r3, #0]
 8011f52:	8c3a      	ldrh	r2, [r7, #32]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d906      	bls.n	8011f66 <ip4_reass+0x296>
 8011f58:	4b22      	ldr	r3, [pc, #136]	; (8011fe4 <ip4_reass+0x314>)
 8011f5a:	f240 229b 	movw	r2, #667	; 0x29b
 8011f5e:	4922      	ldr	r1, [pc, #136]	; (8011fe8 <ip4_reass+0x318>)
 8011f60:	4822      	ldr	r0, [pc, #136]	; (8011fec <ip4_reass+0x31c>)
 8011f62:	f000 fb01 	bl	8012568 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011f66:	4b1d      	ldr	r3, [pc, #116]	; (8011fdc <ip4_reass+0x30c>)
 8011f68:	881a      	ldrh	r2, [r3, #0]
 8011f6a:	8c3b      	ldrh	r3, [r7, #32]
 8011f6c:	1ad3      	subs	r3, r2, r3
 8011f6e:	b29a      	uxth	r2, r3
 8011f70:	4b1a      	ldr	r3, [pc, #104]	; (8011fdc <ip4_reass+0x30c>)
 8011f72:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	e02c      	b.n	8011fd2 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011f78:	2300      	movs	r3, #0
 8011f7a:	e02a      	b.n	8011fd2 <ip4_reass+0x302>

nullreturn_ipr:
 8011f7c:	bf00      	nop
 8011f7e:	e000      	b.n	8011f82 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8011f80:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d106      	bne.n	8011f96 <ip4_reass+0x2c6>
 8011f88:	4b16      	ldr	r3, [pc, #88]	; (8011fe4 <ip4_reass+0x314>)
 8011f8a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8011f8e:	4918      	ldr	r1, [pc, #96]	; (8011ff0 <ip4_reass+0x320>)
 8011f90:	4816      	ldr	r0, [pc, #88]	; (8011fec <ip4_reass+0x31c>)
 8011f92:	f000 fae9 	bl	8012568 <iprintf>
  if (ipr->p == NULL) {
 8011f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d114      	bne.n	8011fc8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011f9e:	4b10      	ldr	r3, [pc, #64]	; (8011fe0 <ip4_reass+0x310>)
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d006      	beq.n	8011fb6 <ip4_reass+0x2e6>
 8011fa8:	4b0e      	ldr	r3, [pc, #56]	; (8011fe4 <ip4_reass+0x314>)
 8011faa:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011fae:	4911      	ldr	r1, [pc, #68]	; (8011ff4 <ip4_reass+0x324>)
 8011fb0:	480e      	ldr	r0, [pc, #56]	; (8011fec <ip4_reass+0x31c>)
 8011fb2:	f000 fad9 	bl	8012568 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011fb6:	2100      	movs	r1, #0
 8011fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fba:	f7ff fcf1 	bl	80119a0 <ip_reass_dequeue_datagram>
 8011fbe:	e004      	b.n	8011fca <ip4_reass+0x2fa>
    goto nullreturn;
 8011fc0:	bf00      	nop
 8011fc2:	e002      	b.n	8011fca <ip4_reass+0x2fa>
    goto nullreturn;
 8011fc4:	bf00      	nop
 8011fc6:	e000      	b.n	8011fca <ip4_reass+0x2fa>
  }

nullreturn:
 8011fc8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f7f5 f856 	bl	800707c <pbuf_free>
  return NULL;
 8011fd0:	2300      	movs	r3, #0
}
 8011fd2:	4618      	mov	r0, r3
 8011fd4:	3738      	adds	r7, #56	; 0x38
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	bd80      	pop	{r7, pc}
 8011fda:	bf00      	nop
 8011fdc:	20000660 	.word	0x20000660
 8011fe0:	2000065c 	.word	0x2000065c
 8011fe4:	08016134 	.word	0x08016134
 8011fe8:	080162a4 	.word	0x080162a4
 8011fec:	0801617c 	.word	0x0801617c
 8011ff0:	080162c0 	.word	0x080162c0
 8011ff4:	080162cc 	.word	0x080162cc

08011ff8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011ffc:	2005      	movs	r0, #5
 8011ffe:	f7f4 f9f1 	bl	80063e4 <memp_malloc>
 8012002:	4603      	mov	r3, r0
}
 8012004:	4618      	mov	r0, r3
 8012006:	bd80      	pop	{r7, pc}

08012008 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d106      	bne.n	8012024 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012016:	4b07      	ldr	r3, [pc, #28]	; (8012034 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012018:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801201c:	4906      	ldr	r1, [pc, #24]	; (8012038 <ip_frag_free_pbuf_custom_ref+0x30>)
 801201e:	4807      	ldr	r0, [pc, #28]	; (801203c <ip_frag_free_pbuf_custom_ref+0x34>)
 8012020:	f000 faa2 	bl	8012568 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012024:	6879      	ldr	r1, [r7, #4]
 8012026:	2005      	movs	r0, #5
 8012028:	f7f4 fa28 	bl	800647c <memp_free>
}
 801202c:	bf00      	nop
 801202e:	3708      	adds	r7, #8
 8012030:	46bd      	mov	sp, r7
 8012032:	bd80      	pop	{r7, pc}
 8012034:	08016134 	.word	0x08016134
 8012038:	080162ec 	.word	0x080162ec
 801203c:	0801617c 	.word	0x0801617c

08012040 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b084      	sub	sp, #16
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d106      	bne.n	8012060 <ipfrag_free_pbuf_custom+0x20>
 8012052:	4b11      	ldr	r3, [pc, #68]	; (8012098 <ipfrag_free_pbuf_custom+0x58>)
 8012054:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012058:	4910      	ldr	r1, [pc, #64]	; (801209c <ipfrag_free_pbuf_custom+0x5c>)
 801205a:	4811      	ldr	r0, [pc, #68]	; (80120a0 <ipfrag_free_pbuf_custom+0x60>)
 801205c:	f000 fa84 	bl	8012568 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012060:	68fa      	ldr	r2, [r7, #12]
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	429a      	cmp	r2, r3
 8012066:	d006      	beq.n	8012076 <ipfrag_free_pbuf_custom+0x36>
 8012068:	4b0b      	ldr	r3, [pc, #44]	; (8012098 <ipfrag_free_pbuf_custom+0x58>)
 801206a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801206e:	490d      	ldr	r1, [pc, #52]	; (80120a4 <ipfrag_free_pbuf_custom+0x64>)
 8012070:	480b      	ldr	r0, [pc, #44]	; (80120a0 <ipfrag_free_pbuf_custom+0x60>)
 8012072:	f000 fa79 	bl	8012568 <iprintf>
  if (pcr->original != NULL) {
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	695b      	ldr	r3, [r3, #20]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d004      	beq.n	8012088 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	695b      	ldr	r3, [r3, #20]
 8012082:	4618      	mov	r0, r3
 8012084:	f7f4 fffa 	bl	800707c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012088:	68f8      	ldr	r0, [r7, #12]
 801208a:	f7ff ffbd 	bl	8012008 <ip_frag_free_pbuf_custom_ref>
}
 801208e:	bf00      	nop
 8012090:	3710      	adds	r7, #16
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}
 8012096:	bf00      	nop
 8012098:	08016134 	.word	0x08016134
 801209c:	080162f8 	.word	0x080162f8
 80120a0:	0801617c 	.word	0x0801617c
 80120a4:	08016304 	.word	0x08016304

080120a8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b094      	sub	sp, #80	; 0x50
 80120ac:	af02      	add	r7, sp, #8
 80120ae:	60f8      	str	r0, [r7, #12]
 80120b0:	60b9      	str	r1, [r7, #8]
 80120b2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80120b4:	2300      	movs	r3, #0
 80120b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80120be:	3b14      	subs	r3, #20
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	da00      	bge.n	80120c6 <ip4_frag+0x1e>
 80120c4:	3307      	adds	r3, #7
 80120c6:	10db      	asrs	r3, r3, #3
 80120c8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80120ca:	2314      	movs	r3, #20
 80120cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	685b      	ldr	r3, [r3, #4]
 80120d2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80120d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120d6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80120d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120da:	781b      	ldrb	r3, [r3, #0]
 80120dc:	f003 030f 	and.w	r3, r3, #15
 80120e0:	b2db      	uxtb	r3, r3
 80120e2:	009b      	lsls	r3, r3, #2
 80120e4:	b2db      	uxtb	r3, r3
 80120e6:	2b14      	cmp	r3, #20
 80120e8:	d002      	beq.n	80120f0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80120ea:	f06f 0305 	mvn.w	r3, #5
 80120ee:	e10f      	b.n	8012310 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	895b      	ldrh	r3, [r3, #10]
 80120f4:	2b13      	cmp	r3, #19
 80120f6:	d809      	bhi.n	801210c <ip4_frag+0x64>
 80120f8:	4b87      	ldr	r3, [pc, #540]	; (8012318 <ip4_frag+0x270>)
 80120fa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80120fe:	4987      	ldr	r1, [pc, #540]	; (801231c <ip4_frag+0x274>)
 8012100:	4887      	ldr	r0, [pc, #540]	; (8012320 <ip4_frag+0x278>)
 8012102:	f000 fa31 	bl	8012568 <iprintf>
 8012106:	f06f 0305 	mvn.w	r3, #5
 801210a:	e101      	b.n	8012310 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801210c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801210e:	88db      	ldrh	r3, [r3, #6]
 8012110:	b29b      	uxth	r3, r3
 8012112:	4618      	mov	r0, r3
 8012114:	f7f3 fcda 	bl	8005acc <lwip_htons>
 8012118:	4603      	mov	r3, r0
 801211a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801211c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801211e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012122:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8012126:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801212c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	891b      	ldrh	r3, [r3, #8]
 8012132:	3b14      	subs	r3, #20
 8012134:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8012138:	e0e0      	b.n	80122fc <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801213a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801213c:	00db      	lsls	r3, r3, #3
 801213e:	b29b      	uxth	r3, r3
 8012140:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012144:	4293      	cmp	r3, r2
 8012146:	bf28      	it	cs
 8012148:	4613      	movcs	r3, r2
 801214a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801214c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012150:	2114      	movs	r1, #20
 8012152:	200e      	movs	r0, #14
 8012154:	f7f4 fcb2 	bl	8006abc <pbuf_alloc>
 8012158:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801215c:	2b00      	cmp	r3, #0
 801215e:	f000 80d4 	beq.w	801230a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8012162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012164:	895b      	ldrh	r3, [r3, #10]
 8012166:	2b13      	cmp	r3, #19
 8012168:	d806      	bhi.n	8012178 <ip4_frag+0xd0>
 801216a:	4b6b      	ldr	r3, [pc, #428]	; (8012318 <ip4_frag+0x270>)
 801216c:	f240 3225 	movw	r2, #805	; 0x325
 8012170:	496c      	ldr	r1, [pc, #432]	; (8012324 <ip4_frag+0x27c>)
 8012172:	486b      	ldr	r0, [pc, #428]	; (8012320 <ip4_frag+0x278>)
 8012174:	f000 f9f8 	bl	8012568 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801217a:	685b      	ldr	r3, [r3, #4]
 801217c:	2214      	movs	r2, #20
 801217e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012180:	4618      	mov	r0, r3
 8012182:	f000 f9de 	bl	8012542 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8012186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012188:	685b      	ldr	r3, [r3, #4]
 801218a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801218c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801218e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8012192:	e064      	b.n	801225e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	895a      	ldrh	r2, [r3, #10]
 8012198:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801219a:	1ad3      	subs	r3, r2, r3
 801219c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	895b      	ldrh	r3, [r3, #10]
 80121a2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80121a4:	429a      	cmp	r2, r3
 80121a6:	d906      	bls.n	80121b6 <ip4_frag+0x10e>
 80121a8:	4b5b      	ldr	r3, [pc, #364]	; (8012318 <ip4_frag+0x270>)
 80121aa:	f240 322d 	movw	r2, #813	; 0x32d
 80121ae:	495e      	ldr	r1, [pc, #376]	; (8012328 <ip4_frag+0x280>)
 80121b0:	485b      	ldr	r0, [pc, #364]	; (8012320 <ip4_frag+0x278>)
 80121b2:	f000 f9d9 	bl	8012568 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80121b6:	8bfa      	ldrh	r2, [r7, #30]
 80121b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80121bc:	4293      	cmp	r3, r2
 80121be:	bf28      	it	cs
 80121c0:	4613      	movcs	r3, r2
 80121c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80121c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d105      	bne.n	80121da <ip4_frag+0x132>
        poff = 0;
 80121ce:	2300      	movs	r3, #0
 80121d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	60fb      	str	r3, [r7, #12]
        continue;
 80121d8:	e041      	b.n	801225e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80121da:	f7ff ff0d 	bl	8011ff8 <ip_frag_alloc_pbuf_custom_ref>
 80121de:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80121e0:	69bb      	ldr	r3, [r7, #24]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d103      	bne.n	80121ee <ip4_frag+0x146>
        pbuf_free(rambuf);
 80121e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121e8:	f7f4 ff48 	bl	800707c <pbuf_free>
        goto memerr;
 80121ec:	e08e      	b.n	801230c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80121ee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80121f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80121f6:	4413      	add	r3, r2
 80121f8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80121fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8012200:	9201      	str	r2, [sp, #4]
 8012202:	9300      	str	r3, [sp, #0]
 8012204:	4603      	mov	r3, r0
 8012206:	2241      	movs	r2, #65	; 0x41
 8012208:	2000      	movs	r0, #0
 801220a:	f7f4 fd7d 	bl	8006d08 <pbuf_alloced_custom>
 801220e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d106      	bne.n	8012224 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8012216:	69b8      	ldr	r0, [r7, #24]
 8012218:	f7ff fef6 	bl	8012008 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801221c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801221e:	f7f4 ff2d 	bl	800707c <pbuf_free>
        goto memerr;
 8012222:	e073      	b.n	801230c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8012224:	68f8      	ldr	r0, [r7, #12]
 8012226:	f7f4 ffc9 	bl	80071bc <pbuf_ref>
      pcr->original = p;
 801222a:	69bb      	ldr	r3, [r7, #24]
 801222c:	68fa      	ldr	r2, [r7, #12]
 801222e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012230:	69bb      	ldr	r3, [r7, #24]
 8012232:	4a3e      	ldr	r2, [pc, #248]	; (801232c <ip4_frag+0x284>)
 8012234:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8012236:	6979      	ldr	r1, [r7, #20]
 8012238:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801223a:	f7f4 ffe1 	bl	8007200 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801223e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8012242:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012246:	1ad3      	subs	r3, r2, r3
 8012248:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801224c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012250:	2b00      	cmp	r3, #0
 8012252:	d004      	beq.n	801225e <ip4_frag+0x1b6>
        poff = 0;
 8012254:	2300      	movs	r3, #0
 8012256:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801225e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012262:	2b00      	cmp	r3, #0
 8012264:	d196      	bne.n	8012194 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8012266:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012268:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801226c:	4413      	add	r3, r2
 801226e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012270:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012278:	3b14      	subs	r3, #20
 801227a:	429a      	cmp	r2, r3
 801227c:	bfd4      	ite	le
 801227e:	2301      	movle	r3, #1
 8012280:	2300      	movgt	r3, #0
 8012282:	b2db      	uxtb	r3, r3
 8012284:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012286:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801228a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801228e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8012290:	6a3b      	ldr	r3, [r7, #32]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d002      	beq.n	801229c <ip4_frag+0x1f4>
 8012296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012298:	2b00      	cmp	r3, #0
 801229a:	d003      	beq.n	80122a4 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801229c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801229e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80122a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80122a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80122a6:	4618      	mov	r0, r3
 80122a8:	f7f3 fc10 	bl	8005acc <lwip_htons>
 80122ac:	4603      	mov	r3, r0
 80122ae:	461a      	mov	r2, r3
 80122b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122b2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80122b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80122b6:	3314      	adds	r3, #20
 80122b8:	b29b      	uxth	r3, r3
 80122ba:	4618      	mov	r0, r3
 80122bc:	f7f3 fc06 	bl	8005acc <lwip_htons>
 80122c0:	4603      	mov	r3, r0
 80122c2:	461a      	mov	r2, r3
 80122c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80122c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ca:	2200      	movs	r2, #0
 80122cc:	729a      	strb	r2, [r3, #10]
 80122ce:	2200      	movs	r2, #0
 80122d0:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	695b      	ldr	r3, [r3, #20]
 80122d6:	687a      	ldr	r2, [r7, #4]
 80122d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80122da:	68b8      	ldr	r0, [r7, #8]
 80122dc:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80122de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122e0:	f7f4 fecc 	bl	800707c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80122e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80122e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80122ea:	1ad3      	subs	r3, r2, r3
 80122ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80122f0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80122f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80122f6:	4413      	add	r3, r2
 80122f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80122fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012300:	2b00      	cmp	r3, #0
 8012302:	f47f af1a 	bne.w	801213a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012306:	2300      	movs	r3, #0
 8012308:	e002      	b.n	8012310 <ip4_frag+0x268>
      goto memerr;
 801230a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801230c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012310:	4618      	mov	r0, r3
 8012312:	3748      	adds	r7, #72	; 0x48
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}
 8012318:	08016134 	.word	0x08016134
 801231c:	08016310 	.word	0x08016310
 8012320:	0801617c 	.word	0x0801617c
 8012324:	0801632c 	.word	0x0801632c
 8012328:	0801634c 	.word	0x0801634c
 801232c:	08012041 	.word	0x08012041

08012330 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b086      	sub	sp, #24
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
 8012338:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801233a:	230e      	movs	r3, #14
 801233c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	895b      	ldrh	r3, [r3, #10]
 8012342:	2b0e      	cmp	r3, #14
 8012344:	d96e      	bls.n	8012424 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	7bdb      	ldrb	r3, [r3, #15]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d106      	bne.n	801235c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012354:	3301      	adds	r3, #1
 8012356:	b2da      	uxtb	r2, r3
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	685b      	ldr	r3, [r3, #4]
 8012360:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8012362:	693b      	ldr	r3, [r7, #16]
 8012364:	7b1a      	ldrb	r2, [r3, #12]
 8012366:	7b5b      	ldrb	r3, [r3, #13]
 8012368:	021b      	lsls	r3, r3, #8
 801236a:	4313      	orrs	r3, r2
 801236c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	781b      	ldrb	r3, [r3, #0]
 8012372:	f003 0301 	and.w	r3, r3, #1
 8012376:	2b00      	cmp	r3, #0
 8012378:	d023      	beq.n	80123c2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	781b      	ldrb	r3, [r3, #0]
 801237e:	2b01      	cmp	r3, #1
 8012380:	d10f      	bne.n	80123a2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	785b      	ldrb	r3, [r3, #1]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d11b      	bne.n	80123c2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801238a:	693b      	ldr	r3, [r7, #16]
 801238c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801238e:	2b5e      	cmp	r3, #94	; 0x5e
 8012390:	d117      	bne.n	80123c2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	7b5b      	ldrb	r3, [r3, #13]
 8012396:	f043 0310 	orr.w	r3, r3, #16
 801239a:	b2da      	uxtb	r2, r3
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	735a      	strb	r2, [r3, #13]
 80123a0:	e00f      	b.n	80123c2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80123a2:	693b      	ldr	r3, [r7, #16]
 80123a4:	2206      	movs	r2, #6
 80123a6:	4928      	ldr	r1, [pc, #160]	; (8012448 <ethernet_input+0x118>)
 80123a8:	4618      	mov	r0, r3
 80123aa:	f000 f8bb 	bl	8012524 <memcmp>
 80123ae:	4603      	mov	r3, r0
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d106      	bne.n	80123c2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	7b5b      	ldrb	r3, [r3, #13]
 80123b8:	f043 0308 	orr.w	r3, r3, #8
 80123bc:	b2da      	uxtb	r2, r3
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80123c2:	89fb      	ldrh	r3, [r7, #14]
 80123c4:	2b08      	cmp	r3, #8
 80123c6:	d003      	beq.n	80123d0 <ethernet_input+0xa0>
 80123c8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80123cc:	d014      	beq.n	80123f8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80123ce:	e032      	b.n	8012436 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80123d0:	683b      	ldr	r3, [r7, #0]
 80123d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80123d6:	f003 0308 	and.w	r3, r3, #8
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d024      	beq.n	8012428 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80123de:	8afb      	ldrh	r3, [r7, #22]
 80123e0:	4619      	mov	r1, r3
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f7f4 fdc4 	bl	8006f70 <pbuf_remove_header>
 80123e8:	4603      	mov	r3, r0
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d11e      	bne.n	801242c <ethernet_input+0xfc>
        ip4_input(p, netif);
 80123ee:	6839      	ldr	r1, [r7, #0]
 80123f0:	6878      	ldr	r0, [r7, #4]
 80123f2:	f7fe ff0f 	bl	8011214 <ip4_input>
      break;
 80123f6:	e013      	b.n	8012420 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80123f8:	683b      	ldr	r3, [r7, #0]
 80123fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80123fe:	f003 0308 	and.w	r3, r3, #8
 8012402:	2b00      	cmp	r3, #0
 8012404:	d014      	beq.n	8012430 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012406:	8afb      	ldrh	r3, [r7, #22]
 8012408:	4619      	mov	r1, r3
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	f7f4 fdb0 	bl	8006f70 <pbuf_remove_header>
 8012410:	4603      	mov	r3, r0
 8012412:	2b00      	cmp	r3, #0
 8012414:	d10e      	bne.n	8012434 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012416:	6839      	ldr	r1, [r7, #0]
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f7fe f8ab 	bl	8010574 <etharp_input>
      break;
 801241e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012420:	2300      	movs	r3, #0
 8012422:	e00c      	b.n	801243e <ethernet_input+0x10e>
    goto free_and_return;
 8012424:	bf00      	nop
 8012426:	e006      	b.n	8012436 <ethernet_input+0x106>
        goto free_and_return;
 8012428:	bf00      	nop
 801242a:	e004      	b.n	8012436 <ethernet_input+0x106>
        goto free_and_return;
 801242c:	bf00      	nop
 801242e:	e002      	b.n	8012436 <ethernet_input+0x106>
        goto free_and_return;
 8012430:	bf00      	nop
 8012432:	e000      	b.n	8012436 <ethernet_input+0x106>
        goto free_and_return;
 8012434:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f7f4 fe20 	bl	800707c <pbuf_free>
  return ERR_OK;
 801243c:	2300      	movs	r3, #0
}
 801243e:	4618      	mov	r0, r3
 8012440:	3718      	adds	r7, #24
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}
 8012446:	bf00      	nop
 8012448:	08016aa4 	.word	0x08016aa4

0801244c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801244c:	b580      	push	{r7, lr}
 801244e:	b086      	sub	sp, #24
 8012450:	af00      	add	r7, sp, #0
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	60b9      	str	r1, [r7, #8]
 8012456:	607a      	str	r2, [r7, #4]
 8012458:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801245a:	8c3b      	ldrh	r3, [r7, #32]
 801245c:	4618      	mov	r0, r3
 801245e:	f7f3 fb35 	bl	8005acc <lwip_htons>
 8012462:	4603      	mov	r3, r0
 8012464:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012466:	210e      	movs	r1, #14
 8012468:	68b8      	ldr	r0, [r7, #8]
 801246a:	f7f4 fd71 	bl	8006f50 <pbuf_add_header>
 801246e:	4603      	mov	r3, r0
 8012470:	2b00      	cmp	r3, #0
 8012472:	d125      	bne.n	80124c0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	685b      	ldr	r3, [r3, #4]
 8012478:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	8afa      	ldrh	r2, [r7, #22]
 801247e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012480:	693b      	ldr	r3, [r7, #16]
 8012482:	2206      	movs	r2, #6
 8012484:	6839      	ldr	r1, [r7, #0]
 8012486:	4618      	mov	r0, r3
 8012488:	f000 f85b 	bl	8012542 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801248c:	693b      	ldr	r3, [r7, #16]
 801248e:	3306      	adds	r3, #6
 8012490:	2206      	movs	r2, #6
 8012492:	6879      	ldr	r1, [r7, #4]
 8012494:	4618      	mov	r0, r3
 8012496:	f000 f854 	bl	8012542 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80124a0:	2b06      	cmp	r3, #6
 80124a2:	d006      	beq.n	80124b2 <ethernet_output+0x66>
 80124a4:	4b0a      	ldr	r3, [pc, #40]	; (80124d0 <ethernet_output+0x84>)
 80124a6:	f240 1233 	movw	r2, #307	; 0x133
 80124aa:	490a      	ldr	r1, [pc, #40]	; (80124d4 <ethernet_output+0x88>)
 80124ac:	480a      	ldr	r0, [pc, #40]	; (80124d8 <ethernet_output+0x8c>)
 80124ae:	f000 f85b 	bl	8012568 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	699b      	ldr	r3, [r3, #24]
 80124b6:	68b9      	ldr	r1, [r7, #8]
 80124b8:	68f8      	ldr	r0, [r7, #12]
 80124ba:	4798      	blx	r3
 80124bc:	4603      	mov	r3, r0
 80124be:	e002      	b.n	80124c6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80124c0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80124c2:	f06f 0301 	mvn.w	r3, #1
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	3718      	adds	r7, #24
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}
 80124ce:	bf00      	nop
 80124d0:	0801635c 	.word	0x0801635c
 80124d4:	08016394 	.word	0x08016394
 80124d8:	080163c8 	.word	0x080163c8

080124dc <__libc_init_array>:
 80124dc:	b570      	push	{r4, r5, r6, lr}
 80124de:	4e0d      	ldr	r6, [pc, #52]	; (8012514 <__libc_init_array+0x38>)
 80124e0:	4c0d      	ldr	r4, [pc, #52]	; (8012518 <__libc_init_array+0x3c>)
 80124e2:	1ba4      	subs	r4, r4, r6
 80124e4:	10a4      	asrs	r4, r4, #2
 80124e6:	2500      	movs	r5, #0
 80124e8:	42a5      	cmp	r5, r4
 80124ea:	d109      	bne.n	8012500 <__libc_init_array+0x24>
 80124ec:	4e0b      	ldr	r6, [pc, #44]	; (801251c <__libc_init_array+0x40>)
 80124ee:	4c0c      	ldr	r4, [pc, #48]	; (8012520 <__libc_init_array+0x44>)
 80124f0:	f000 ff7a 	bl	80133e8 <_init>
 80124f4:	1ba4      	subs	r4, r4, r6
 80124f6:	10a4      	asrs	r4, r4, #2
 80124f8:	2500      	movs	r5, #0
 80124fa:	42a5      	cmp	r5, r4
 80124fc:	d105      	bne.n	801250a <__libc_init_array+0x2e>
 80124fe:	bd70      	pop	{r4, r5, r6, pc}
 8012500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012504:	4798      	blx	r3
 8012506:	3501      	adds	r5, #1
 8012508:	e7ee      	b.n	80124e8 <__libc_init_array+0xc>
 801250a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801250e:	4798      	blx	r3
 8012510:	3501      	adds	r5, #1
 8012512:	e7f2      	b.n	80124fa <__libc_init_array+0x1e>
 8012514:	08016b54 	.word	0x08016b54
 8012518:	08016b54 	.word	0x08016b54
 801251c:	08016b54 	.word	0x08016b54
 8012520:	08016b58 	.word	0x08016b58

08012524 <memcmp>:
 8012524:	b530      	push	{r4, r5, lr}
 8012526:	2400      	movs	r4, #0
 8012528:	42a2      	cmp	r2, r4
 801252a:	d101      	bne.n	8012530 <memcmp+0xc>
 801252c:	2000      	movs	r0, #0
 801252e:	e007      	b.n	8012540 <memcmp+0x1c>
 8012530:	5d03      	ldrb	r3, [r0, r4]
 8012532:	3401      	adds	r4, #1
 8012534:	190d      	adds	r5, r1, r4
 8012536:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801253a:	42ab      	cmp	r3, r5
 801253c:	d0f4      	beq.n	8012528 <memcmp+0x4>
 801253e:	1b58      	subs	r0, r3, r5
 8012540:	bd30      	pop	{r4, r5, pc}

08012542 <memcpy>:
 8012542:	b510      	push	{r4, lr}
 8012544:	1e43      	subs	r3, r0, #1
 8012546:	440a      	add	r2, r1
 8012548:	4291      	cmp	r1, r2
 801254a:	d100      	bne.n	801254e <memcpy+0xc>
 801254c:	bd10      	pop	{r4, pc}
 801254e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012552:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012556:	e7f7      	b.n	8012548 <memcpy+0x6>

08012558 <memset>:
 8012558:	4402      	add	r2, r0
 801255a:	4603      	mov	r3, r0
 801255c:	4293      	cmp	r3, r2
 801255e:	d100      	bne.n	8012562 <memset+0xa>
 8012560:	4770      	bx	lr
 8012562:	f803 1b01 	strb.w	r1, [r3], #1
 8012566:	e7f9      	b.n	801255c <memset+0x4>

08012568 <iprintf>:
 8012568:	b40f      	push	{r0, r1, r2, r3}
 801256a:	4b0a      	ldr	r3, [pc, #40]	; (8012594 <iprintf+0x2c>)
 801256c:	b513      	push	{r0, r1, r4, lr}
 801256e:	681c      	ldr	r4, [r3, #0]
 8012570:	b124      	cbz	r4, 801257c <iprintf+0x14>
 8012572:	69a3      	ldr	r3, [r4, #24]
 8012574:	b913      	cbnz	r3, 801257c <iprintf+0x14>
 8012576:	4620      	mov	r0, r4
 8012578:	f000 f8a2 	bl	80126c0 <__sinit>
 801257c:	ab05      	add	r3, sp, #20
 801257e:	9a04      	ldr	r2, [sp, #16]
 8012580:	68a1      	ldr	r1, [r4, #8]
 8012582:	9301      	str	r3, [sp, #4]
 8012584:	4620      	mov	r0, r4
 8012586:	f000 f9ff 	bl	8012988 <_vfiprintf_r>
 801258a:	b002      	add	sp, #8
 801258c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012590:	b004      	add	sp, #16
 8012592:	4770      	bx	lr
 8012594:	20000018 	.word	0x20000018

08012598 <rand>:
 8012598:	b538      	push	{r3, r4, r5, lr}
 801259a:	4b13      	ldr	r3, [pc, #76]	; (80125e8 <rand+0x50>)
 801259c:	681c      	ldr	r4, [r3, #0]
 801259e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80125a0:	b97b      	cbnz	r3, 80125c2 <rand+0x2a>
 80125a2:	2018      	movs	r0, #24
 80125a4:	f000 f916 	bl	80127d4 <malloc>
 80125a8:	4a10      	ldr	r2, [pc, #64]	; (80125ec <rand+0x54>)
 80125aa:	4b11      	ldr	r3, [pc, #68]	; (80125f0 <rand+0x58>)
 80125ac:	63a0      	str	r0, [r4, #56]	; 0x38
 80125ae:	e9c0 2300 	strd	r2, r3, [r0]
 80125b2:	4b10      	ldr	r3, [pc, #64]	; (80125f4 <rand+0x5c>)
 80125b4:	6083      	str	r3, [r0, #8]
 80125b6:	230b      	movs	r3, #11
 80125b8:	8183      	strh	r3, [r0, #12]
 80125ba:	2201      	movs	r2, #1
 80125bc:	2300      	movs	r3, #0
 80125be:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80125c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80125c4:	480c      	ldr	r0, [pc, #48]	; (80125f8 <rand+0x60>)
 80125c6:	690a      	ldr	r2, [r1, #16]
 80125c8:	694b      	ldr	r3, [r1, #20]
 80125ca:	4c0c      	ldr	r4, [pc, #48]	; (80125fc <rand+0x64>)
 80125cc:	4350      	muls	r0, r2
 80125ce:	fb04 0003 	mla	r0, r4, r3, r0
 80125d2:	fba2 2304 	umull	r2, r3, r2, r4
 80125d6:	4403      	add	r3, r0
 80125d8:	1c54      	adds	r4, r2, #1
 80125da:	f143 0500 	adc.w	r5, r3, #0
 80125de:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80125e2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80125e6:	bd38      	pop	{r3, r4, r5, pc}
 80125e8:	20000018 	.word	0x20000018
 80125ec:	abcd330e 	.word	0xabcd330e
 80125f0:	e66d1234 	.word	0xe66d1234
 80125f4:	0005deec 	.word	0x0005deec
 80125f8:	5851f42d 	.word	0x5851f42d
 80125fc:	4c957f2d 	.word	0x4c957f2d

08012600 <strchr>:
 8012600:	b2c9      	uxtb	r1, r1
 8012602:	4603      	mov	r3, r0
 8012604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012608:	b11a      	cbz	r2, 8012612 <strchr+0x12>
 801260a:	428a      	cmp	r2, r1
 801260c:	d1f9      	bne.n	8012602 <strchr+0x2>
 801260e:	4618      	mov	r0, r3
 8012610:	4770      	bx	lr
 8012612:	2900      	cmp	r1, #0
 8012614:	bf18      	it	ne
 8012616:	2300      	movne	r3, #0
 8012618:	e7f9      	b.n	801260e <strchr+0xe>

0801261a <strncmp>:
 801261a:	b510      	push	{r4, lr}
 801261c:	b16a      	cbz	r2, 801263a <strncmp+0x20>
 801261e:	3901      	subs	r1, #1
 8012620:	1884      	adds	r4, r0, r2
 8012622:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012626:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801262a:	4293      	cmp	r3, r2
 801262c:	d103      	bne.n	8012636 <strncmp+0x1c>
 801262e:	42a0      	cmp	r0, r4
 8012630:	d001      	beq.n	8012636 <strncmp+0x1c>
 8012632:	2b00      	cmp	r3, #0
 8012634:	d1f5      	bne.n	8012622 <strncmp+0x8>
 8012636:	1a98      	subs	r0, r3, r2
 8012638:	bd10      	pop	{r4, pc}
 801263a:	4610      	mov	r0, r2
 801263c:	e7fc      	b.n	8012638 <strncmp+0x1e>
	...

08012640 <std>:
 8012640:	2300      	movs	r3, #0
 8012642:	b510      	push	{r4, lr}
 8012644:	4604      	mov	r4, r0
 8012646:	e9c0 3300 	strd	r3, r3, [r0]
 801264a:	6083      	str	r3, [r0, #8]
 801264c:	8181      	strh	r1, [r0, #12]
 801264e:	6643      	str	r3, [r0, #100]	; 0x64
 8012650:	81c2      	strh	r2, [r0, #14]
 8012652:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012656:	6183      	str	r3, [r0, #24]
 8012658:	4619      	mov	r1, r3
 801265a:	2208      	movs	r2, #8
 801265c:	305c      	adds	r0, #92	; 0x5c
 801265e:	f7ff ff7b 	bl	8012558 <memset>
 8012662:	4b05      	ldr	r3, [pc, #20]	; (8012678 <std+0x38>)
 8012664:	6263      	str	r3, [r4, #36]	; 0x24
 8012666:	4b05      	ldr	r3, [pc, #20]	; (801267c <std+0x3c>)
 8012668:	62a3      	str	r3, [r4, #40]	; 0x28
 801266a:	4b05      	ldr	r3, [pc, #20]	; (8012680 <std+0x40>)
 801266c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801266e:	4b05      	ldr	r3, [pc, #20]	; (8012684 <std+0x44>)
 8012670:	6224      	str	r4, [r4, #32]
 8012672:	6323      	str	r3, [r4, #48]	; 0x30
 8012674:	bd10      	pop	{r4, pc}
 8012676:	bf00      	nop
 8012678:	08012ee5 	.word	0x08012ee5
 801267c:	08012f07 	.word	0x08012f07
 8012680:	08012f3f 	.word	0x08012f3f
 8012684:	08012f63 	.word	0x08012f63

08012688 <_cleanup_r>:
 8012688:	4901      	ldr	r1, [pc, #4]	; (8012690 <_cleanup_r+0x8>)
 801268a:	f000 b885 	b.w	8012798 <_fwalk_reent>
 801268e:	bf00      	nop
 8012690:	0801323d 	.word	0x0801323d

08012694 <__sfmoreglue>:
 8012694:	b570      	push	{r4, r5, r6, lr}
 8012696:	1e4a      	subs	r2, r1, #1
 8012698:	2568      	movs	r5, #104	; 0x68
 801269a:	4355      	muls	r5, r2
 801269c:	460e      	mov	r6, r1
 801269e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80126a2:	f000 f8ed 	bl	8012880 <_malloc_r>
 80126a6:	4604      	mov	r4, r0
 80126a8:	b140      	cbz	r0, 80126bc <__sfmoreglue+0x28>
 80126aa:	2100      	movs	r1, #0
 80126ac:	e9c0 1600 	strd	r1, r6, [r0]
 80126b0:	300c      	adds	r0, #12
 80126b2:	60a0      	str	r0, [r4, #8]
 80126b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80126b8:	f7ff ff4e 	bl	8012558 <memset>
 80126bc:	4620      	mov	r0, r4
 80126be:	bd70      	pop	{r4, r5, r6, pc}

080126c0 <__sinit>:
 80126c0:	6983      	ldr	r3, [r0, #24]
 80126c2:	b510      	push	{r4, lr}
 80126c4:	4604      	mov	r4, r0
 80126c6:	bb33      	cbnz	r3, 8012716 <__sinit+0x56>
 80126c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80126cc:	6503      	str	r3, [r0, #80]	; 0x50
 80126ce:	4b12      	ldr	r3, [pc, #72]	; (8012718 <__sinit+0x58>)
 80126d0:	4a12      	ldr	r2, [pc, #72]	; (801271c <__sinit+0x5c>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	6282      	str	r2, [r0, #40]	; 0x28
 80126d6:	4298      	cmp	r0, r3
 80126d8:	bf04      	itt	eq
 80126da:	2301      	moveq	r3, #1
 80126dc:	6183      	streq	r3, [r0, #24]
 80126de:	f000 f81f 	bl	8012720 <__sfp>
 80126e2:	6060      	str	r0, [r4, #4]
 80126e4:	4620      	mov	r0, r4
 80126e6:	f000 f81b 	bl	8012720 <__sfp>
 80126ea:	60a0      	str	r0, [r4, #8]
 80126ec:	4620      	mov	r0, r4
 80126ee:	f000 f817 	bl	8012720 <__sfp>
 80126f2:	2200      	movs	r2, #0
 80126f4:	60e0      	str	r0, [r4, #12]
 80126f6:	2104      	movs	r1, #4
 80126f8:	6860      	ldr	r0, [r4, #4]
 80126fa:	f7ff ffa1 	bl	8012640 <std>
 80126fe:	2201      	movs	r2, #1
 8012700:	2109      	movs	r1, #9
 8012702:	68a0      	ldr	r0, [r4, #8]
 8012704:	f7ff ff9c 	bl	8012640 <std>
 8012708:	2202      	movs	r2, #2
 801270a:	2112      	movs	r1, #18
 801270c:	68e0      	ldr	r0, [r4, #12]
 801270e:	f7ff ff97 	bl	8012640 <std>
 8012712:	2301      	movs	r3, #1
 8012714:	61a3      	str	r3, [r4, #24]
 8012716:	bd10      	pop	{r4, pc}
 8012718:	08016ab4 	.word	0x08016ab4
 801271c:	08012689 	.word	0x08012689

08012720 <__sfp>:
 8012720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012722:	4b1b      	ldr	r3, [pc, #108]	; (8012790 <__sfp+0x70>)
 8012724:	681e      	ldr	r6, [r3, #0]
 8012726:	69b3      	ldr	r3, [r6, #24]
 8012728:	4607      	mov	r7, r0
 801272a:	b913      	cbnz	r3, 8012732 <__sfp+0x12>
 801272c:	4630      	mov	r0, r6
 801272e:	f7ff ffc7 	bl	80126c0 <__sinit>
 8012732:	3648      	adds	r6, #72	; 0x48
 8012734:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012738:	3b01      	subs	r3, #1
 801273a:	d503      	bpl.n	8012744 <__sfp+0x24>
 801273c:	6833      	ldr	r3, [r6, #0]
 801273e:	b133      	cbz	r3, 801274e <__sfp+0x2e>
 8012740:	6836      	ldr	r6, [r6, #0]
 8012742:	e7f7      	b.n	8012734 <__sfp+0x14>
 8012744:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012748:	b16d      	cbz	r5, 8012766 <__sfp+0x46>
 801274a:	3468      	adds	r4, #104	; 0x68
 801274c:	e7f4      	b.n	8012738 <__sfp+0x18>
 801274e:	2104      	movs	r1, #4
 8012750:	4638      	mov	r0, r7
 8012752:	f7ff ff9f 	bl	8012694 <__sfmoreglue>
 8012756:	6030      	str	r0, [r6, #0]
 8012758:	2800      	cmp	r0, #0
 801275a:	d1f1      	bne.n	8012740 <__sfp+0x20>
 801275c:	230c      	movs	r3, #12
 801275e:	603b      	str	r3, [r7, #0]
 8012760:	4604      	mov	r4, r0
 8012762:	4620      	mov	r0, r4
 8012764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012766:	4b0b      	ldr	r3, [pc, #44]	; (8012794 <__sfp+0x74>)
 8012768:	6665      	str	r5, [r4, #100]	; 0x64
 801276a:	e9c4 5500 	strd	r5, r5, [r4]
 801276e:	60a5      	str	r5, [r4, #8]
 8012770:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012774:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012778:	2208      	movs	r2, #8
 801277a:	4629      	mov	r1, r5
 801277c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012780:	f7ff feea 	bl	8012558 <memset>
 8012784:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012788:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801278c:	e7e9      	b.n	8012762 <__sfp+0x42>
 801278e:	bf00      	nop
 8012790:	08016ab4 	.word	0x08016ab4
 8012794:	ffff0001 	.word	0xffff0001

08012798 <_fwalk_reent>:
 8012798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801279c:	4680      	mov	r8, r0
 801279e:	4689      	mov	r9, r1
 80127a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80127a4:	2600      	movs	r6, #0
 80127a6:	b914      	cbnz	r4, 80127ae <_fwalk_reent+0x16>
 80127a8:	4630      	mov	r0, r6
 80127aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80127b2:	3f01      	subs	r7, #1
 80127b4:	d501      	bpl.n	80127ba <_fwalk_reent+0x22>
 80127b6:	6824      	ldr	r4, [r4, #0]
 80127b8:	e7f5      	b.n	80127a6 <_fwalk_reent+0xe>
 80127ba:	89ab      	ldrh	r3, [r5, #12]
 80127bc:	2b01      	cmp	r3, #1
 80127be:	d907      	bls.n	80127d0 <_fwalk_reent+0x38>
 80127c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80127c4:	3301      	adds	r3, #1
 80127c6:	d003      	beq.n	80127d0 <_fwalk_reent+0x38>
 80127c8:	4629      	mov	r1, r5
 80127ca:	4640      	mov	r0, r8
 80127cc:	47c8      	blx	r9
 80127ce:	4306      	orrs	r6, r0
 80127d0:	3568      	adds	r5, #104	; 0x68
 80127d2:	e7ee      	b.n	80127b2 <_fwalk_reent+0x1a>

080127d4 <malloc>:
 80127d4:	4b02      	ldr	r3, [pc, #8]	; (80127e0 <malloc+0xc>)
 80127d6:	4601      	mov	r1, r0
 80127d8:	6818      	ldr	r0, [r3, #0]
 80127da:	f000 b851 	b.w	8012880 <_malloc_r>
 80127de:	bf00      	nop
 80127e0:	20000018 	.word	0x20000018

080127e4 <_free_r>:
 80127e4:	b538      	push	{r3, r4, r5, lr}
 80127e6:	4605      	mov	r5, r0
 80127e8:	2900      	cmp	r1, #0
 80127ea:	d045      	beq.n	8012878 <_free_r+0x94>
 80127ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127f0:	1f0c      	subs	r4, r1, #4
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	bfb8      	it	lt
 80127f6:	18e4      	addlt	r4, r4, r3
 80127f8:	f000 fdc0 	bl	801337c <__malloc_lock>
 80127fc:	4a1f      	ldr	r2, [pc, #124]	; (801287c <_free_r+0x98>)
 80127fe:	6813      	ldr	r3, [r2, #0]
 8012800:	4610      	mov	r0, r2
 8012802:	b933      	cbnz	r3, 8012812 <_free_r+0x2e>
 8012804:	6063      	str	r3, [r4, #4]
 8012806:	6014      	str	r4, [r2, #0]
 8012808:	4628      	mov	r0, r5
 801280a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801280e:	f000 bdb6 	b.w	801337e <__malloc_unlock>
 8012812:	42a3      	cmp	r3, r4
 8012814:	d90c      	bls.n	8012830 <_free_r+0x4c>
 8012816:	6821      	ldr	r1, [r4, #0]
 8012818:	1862      	adds	r2, r4, r1
 801281a:	4293      	cmp	r3, r2
 801281c:	bf04      	itt	eq
 801281e:	681a      	ldreq	r2, [r3, #0]
 8012820:	685b      	ldreq	r3, [r3, #4]
 8012822:	6063      	str	r3, [r4, #4]
 8012824:	bf04      	itt	eq
 8012826:	1852      	addeq	r2, r2, r1
 8012828:	6022      	streq	r2, [r4, #0]
 801282a:	6004      	str	r4, [r0, #0]
 801282c:	e7ec      	b.n	8012808 <_free_r+0x24>
 801282e:	4613      	mov	r3, r2
 8012830:	685a      	ldr	r2, [r3, #4]
 8012832:	b10a      	cbz	r2, 8012838 <_free_r+0x54>
 8012834:	42a2      	cmp	r2, r4
 8012836:	d9fa      	bls.n	801282e <_free_r+0x4a>
 8012838:	6819      	ldr	r1, [r3, #0]
 801283a:	1858      	adds	r0, r3, r1
 801283c:	42a0      	cmp	r0, r4
 801283e:	d10b      	bne.n	8012858 <_free_r+0x74>
 8012840:	6820      	ldr	r0, [r4, #0]
 8012842:	4401      	add	r1, r0
 8012844:	1858      	adds	r0, r3, r1
 8012846:	4282      	cmp	r2, r0
 8012848:	6019      	str	r1, [r3, #0]
 801284a:	d1dd      	bne.n	8012808 <_free_r+0x24>
 801284c:	6810      	ldr	r0, [r2, #0]
 801284e:	6852      	ldr	r2, [r2, #4]
 8012850:	605a      	str	r2, [r3, #4]
 8012852:	4401      	add	r1, r0
 8012854:	6019      	str	r1, [r3, #0]
 8012856:	e7d7      	b.n	8012808 <_free_r+0x24>
 8012858:	d902      	bls.n	8012860 <_free_r+0x7c>
 801285a:	230c      	movs	r3, #12
 801285c:	602b      	str	r3, [r5, #0]
 801285e:	e7d3      	b.n	8012808 <_free_r+0x24>
 8012860:	6820      	ldr	r0, [r4, #0]
 8012862:	1821      	adds	r1, r4, r0
 8012864:	428a      	cmp	r2, r1
 8012866:	bf04      	itt	eq
 8012868:	6811      	ldreq	r1, [r2, #0]
 801286a:	6852      	ldreq	r2, [r2, #4]
 801286c:	6062      	str	r2, [r4, #4]
 801286e:	bf04      	itt	eq
 8012870:	1809      	addeq	r1, r1, r0
 8012872:	6021      	streq	r1, [r4, #0]
 8012874:	605c      	str	r4, [r3, #4]
 8012876:	e7c7      	b.n	8012808 <_free_r+0x24>
 8012878:	bd38      	pop	{r3, r4, r5, pc}
 801287a:	bf00      	nop
 801287c:	20000664 	.word	0x20000664

08012880 <_malloc_r>:
 8012880:	b570      	push	{r4, r5, r6, lr}
 8012882:	1ccd      	adds	r5, r1, #3
 8012884:	f025 0503 	bic.w	r5, r5, #3
 8012888:	3508      	adds	r5, #8
 801288a:	2d0c      	cmp	r5, #12
 801288c:	bf38      	it	cc
 801288e:	250c      	movcc	r5, #12
 8012890:	2d00      	cmp	r5, #0
 8012892:	4606      	mov	r6, r0
 8012894:	db01      	blt.n	801289a <_malloc_r+0x1a>
 8012896:	42a9      	cmp	r1, r5
 8012898:	d903      	bls.n	80128a2 <_malloc_r+0x22>
 801289a:	230c      	movs	r3, #12
 801289c:	6033      	str	r3, [r6, #0]
 801289e:	2000      	movs	r0, #0
 80128a0:	bd70      	pop	{r4, r5, r6, pc}
 80128a2:	f000 fd6b 	bl	801337c <__malloc_lock>
 80128a6:	4a21      	ldr	r2, [pc, #132]	; (801292c <_malloc_r+0xac>)
 80128a8:	6814      	ldr	r4, [r2, #0]
 80128aa:	4621      	mov	r1, r4
 80128ac:	b991      	cbnz	r1, 80128d4 <_malloc_r+0x54>
 80128ae:	4c20      	ldr	r4, [pc, #128]	; (8012930 <_malloc_r+0xb0>)
 80128b0:	6823      	ldr	r3, [r4, #0]
 80128b2:	b91b      	cbnz	r3, 80128bc <_malloc_r+0x3c>
 80128b4:	4630      	mov	r0, r6
 80128b6:	f000 fb05 	bl	8012ec4 <_sbrk_r>
 80128ba:	6020      	str	r0, [r4, #0]
 80128bc:	4629      	mov	r1, r5
 80128be:	4630      	mov	r0, r6
 80128c0:	f000 fb00 	bl	8012ec4 <_sbrk_r>
 80128c4:	1c43      	adds	r3, r0, #1
 80128c6:	d124      	bne.n	8012912 <_malloc_r+0x92>
 80128c8:	230c      	movs	r3, #12
 80128ca:	6033      	str	r3, [r6, #0]
 80128cc:	4630      	mov	r0, r6
 80128ce:	f000 fd56 	bl	801337e <__malloc_unlock>
 80128d2:	e7e4      	b.n	801289e <_malloc_r+0x1e>
 80128d4:	680b      	ldr	r3, [r1, #0]
 80128d6:	1b5b      	subs	r3, r3, r5
 80128d8:	d418      	bmi.n	801290c <_malloc_r+0x8c>
 80128da:	2b0b      	cmp	r3, #11
 80128dc:	d90f      	bls.n	80128fe <_malloc_r+0x7e>
 80128de:	600b      	str	r3, [r1, #0]
 80128e0:	50cd      	str	r5, [r1, r3]
 80128e2:	18cc      	adds	r4, r1, r3
 80128e4:	4630      	mov	r0, r6
 80128e6:	f000 fd4a 	bl	801337e <__malloc_unlock>
 80128ea:	f104 000b 	add.w	r0, r4, #11
 80128ee:	1d23      	adds	r3, r4, #4
 80128f0:	f020 0007 	bic.w	r0, r0, #7
 80128f4:	1ac3      	subs	r3, r0, r3
 80128f6:	d0d3      	beq.n	80128a0 <_malloc_r+0x20>
 80128f8:	425a      	negs	r2, r3
 80128fa:	50e2      	str	r2, [r4, r3]
 80128fc:	e7d0      	b.n	80128a0 <_malloc_r+0x20>
 80128fe:	428c      	cmp	r4, r1
 8012900:	684b      	ldr	r3, [r1, #4]
 8012902:	bf16      	itet	ne
 8012904:	6063      	strne	r3, [r4, #4]
 8012906:	6013      	streq	r3, [r2, #0]
 8012908:	460c      	movne	r4, r1
 801290a:	e7eb      	b.n	80128e4 <_malloc_r+0x64>
 801290c:	460c      	mov	r4, r1
 801290e:	6849      	ldr	r1, [r1, #4]
 8012910:	e7cc      	b.n	80128ac <_malloc_r+0x2c>
 8012912:	1cc4      	adds	r4, r0, #3
 8012914:	f024 0403 	bic.w	r4, r4, #3
 8012918:	42a0      	cmp	r0, r4
 801291a:	d005      	beq.n	8012928 <_malloc_r+0xa8>
 801291c:	1a21      	subs	r1, r4, r0
 801291e:	4630      	mov	r0, r6
 8012920:	f000 fad0 	bl	8012ec4 <_sbrk_r>
 8012924:	3001      	adds	r0, #1
 8012926:	d0cf      	beq.n	80128c8 <_malloc_r+0x48>
 8012928:	6025      	str	r5, [r4, #0]
 801292a:	e7db      	b.n	80128e4 <_malloc_r+0x64>
 801292c:	20000664 	.word	0x20000664
 8012930:	20000668 	.word	0x20000668

08012934 <__sfputc_r>:
 8012934:	6893      	ldr	r3, [r2, #8]
 8012936:	3b01      	subs	r3, #1
 8012938:	2b00      	cmp	r3, #0
 801293a:	b410      	push	{r4}
 801293c:	6093      	str	r3, [r2, #8]
 801293e:	da08      	bge.n	8012952 <__sfputc_r+0x1e>
 8012940:	6994      	ldr	r4, [r2, #24]
 8012942:	42a3      	cmp	r3, r4
 8012944:	db01      	blt.n	801294a <__sfputc_r+0x16>
 8012946:	290a      	cmp	r1, #10
 8012948:	d103      	bne.n	8012952 <__sfputc_r+0x1e>
 801294a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801294e:	f000 bb0d 	b.w	8012f6c <__swbuf_r>
 8012952:	6813      	ldr	r3, [r2, #0]
 8012954:	1c58      	adds	r0, r3, #1
 8012956:	6010      	str	r0, [r2, #0]
 8012958:	7019      	strb	r1, [r3, #0]
 801295a:	4608      	mov	r0, r1
 801295c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012960:	4770      	bx	lr

08012962 <__sfputs_r>:
 8012962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012964:	4606      	mov	r6, r0
 8012966:	460f      	mov	r7, r1
 8012968:	4614      	mov	r4, r2
 801296a:	18d5      	adds	r5, r2, r3
 801296c:	42ac      	cmp	r4, r5
 801296e:	d101      	bne.n	8012974 <__sfputs_r+0x12>
 8012970:	2000      	movs	r0, #0
 8012972:	e007      	b.n	8012984 <__sfputs_r+0x22>
 8012974:	463a      	mov	r2, r7
 8012976:	f814 1b01 	ldrb.w	r1, [r4], #1
 801297a:	4630      	mov	r0, r6
 801297c:	f7ff ffda 	bl	8012934 <__sfputc_r>
 8012980:	1c43      	adds	r3, r0, #1
 8012982:	d1f3      	bne.n	801296c <__sfputs_r+0xa>
 8012984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012988 <_vfiprintf_r>:
 8012988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801298c:	460c      	mov	r4, r1
 801298e:	b09d      	sub	sp, #116	; 0x74
 8012990:	4617      	mov	r7, r2
 8012992:	461d      	mov	r5, r3
 8012994:	4606      	mov	r6, r0
 8012996:	b118      	cbz	r0, 80129a0 <_vfiprintf_r+0x18>
 8012998:	6983      	ldr	r3, [r0, #24]
 801299a:	b90b      	cbnz	r3, 80129a0 <_vfiprintf_r+0x18>
 801299c:	f7ff fe90 	bl	80126c0 <__sinit>
 80129a0:	4b7c      	ldr	r3, [pc, #496]	; (8012b94 <_vfiprintf_r+0x20c>)
 80129a2:	429c      	cmp	r4, r3
 80129a4:	d158      	bne.n	8012a58 <_vfiprintf_r+0xd0>
 80129a6:	6874      	ldr	r4, [r6, #4]
 80129a8:	89a3      	ldrh	r3, [r4, #12]
 80129aa:	0718      	lsls	r0, r3, #28
 80129ac:	d55e      	bpl.n	8012a6c <_vfiprintf_r+0xe4>
 80129ae:	6923      	ldr	r3, [r4, #16]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d05b      	beq.n	8012a6c <_vfiprintf_r+0xe4>
 80129b4:	2300      	movs	r3, #0
 80129b6:	9309      	str	r3, [sp, #36]	; 0x24
 80129b8:	2320      	movs	r3, #32
 80129ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80129be:	2330      	movs	r3, #48	; 0x30
 80129c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80129c4:	9503      	str	r5, [sp, #12]
 80129c6:	f04f 0b01 	mov.w	fp, #1
 80129ca:	46b8      	mov	r8, r7
 80129cc:	4645      	mov	r5, r8
 80129ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80129d2:	b10b      	cbz	r3, 80129d8 <_vfiprintf_r+0x50>
 80129d4:	2b25      	cmp	r3, #37	; 0x25
 80129d6:	d154      	bne.n	8012a82 <_vfiprintf_r+0xfa>
 80129d8:	ebb8 0a07 	subs.w	sl, r8, r7
 80129dc:	d00b      	beq.n	80129f6 <_vfiprintf_r+0x6e>
 80129de:	4653      	mov	r3, sl
 80129e0:	463a      	mov	r2, r7
 80129e2:	4621      	mov	r1, r4
 80129e4:	4630      	mov	r0, r6
 80129e6:	f7ff ffbc 	bl	8012962 <__sfputs_r>
 80129ea:	3001      	adds	r0, #1
 80129ec:	f000 80c2 	beq.w	8012b74 <_vfiprintf_r+0x1ec>
 80129f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129f2:	4453      	add	r3, sl
 80129f4:	9309      	str	r3, [sp, #36]	; 0x24
 80129f6:	f898 3000 	ldrb.w	r3, [r8]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	f000 80ba 	beq.w	8012b74 <_vfiprintf_r+0x1ec>
 8012a00:	2300      	movs	r3, #0
 8012a02:	f04f 32ff 	mov.w	r2, #4294967295
 8012a06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a0a:	9304      	str	r3, [sp, #16]
 8012a0c:	9307      	str	r3, [sp, #28]
 8012a0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a12:	931a      	str	r3, [sp, #104]	; 0x68
 8012a14:	46a8      	mov	r8, r5
 8012a16:	2205      	movs	r2, #5
 8012a18:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012a1c:	485e      	ldr	r0, [pc, #376]	; (8012b98 <_vfiprintf_r+0x210>)
 8012a1e:	f7ed fc27 	bl	8000270 <memchr>
 8012a22:	9b04      	ldr	r3, [sp, #16]
 8012a24:	bb78      	cbnz	r0, 8012a86 <_vfiprintf_r+0xfe>
 8012a26:	06d9      	lsls	r1, r3, #27
 8012a28:	bf44      	itt	mi
 8012a2a:	2220      	movmi	r2, #32
 8012a2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012a30:	071a      	lsls	r2, r3, #28
 8012a32:	bf44      	itt	mi
 8012a34:	222b      	movmi	r2, #43	; 0x2b
 8012a36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012a3a:	782a      	ldrb	r2, [r5, #0]
 8012a3c:	2a2a      	cmp	r2, #42	; 0x2a
 8012a3e:	d02a      	beq.n	8012a96 <_vfiprintf_r+0x10e>
 8012a40:	9a07      	ldr	r2, [sp, #28]
 8012a42:	46a8      	mov	r8, r5
 8012a44:	2000      	movs	r0, #0
 8012a46:	250a      	movs	r5, #10
 8012a48:	4641      	mov	r1, r8
 8012a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a4e:	3b30      	subs	r3, #48	; 0x30
 8012a50:	2b09      	cmp	r3, #9
 8012a52:	d969      	bls.n	8012b28 <_vfiprintf_r+0x1a0>
 8012a54:	b360      	cbz	r0, 8012ab0 <_vfiprintf_r+0x128>
 8012a56:	e024      	b.n	8012aa2 <_vfiprintf_r+0x11a>
 8012a58:	4b50      	ldr	r3, [pc, #320]	; (8012b9c <_vfiprintf_r+0x214>)
 8012a5a:	429c      	cmp	r4, r3
 8012a5c:	d101      	bne.n	8012a62 <_vfiprintf_r+0xda>
 8012a5e:	68b4      	ldr	r4, [r6, #8]
 8012a60:	e7a2      	b.n	80129a8 <_vfiprintf_r+0x20>
 8012a62:	4b4f      	ldr	r3, [pc, #316]	; (8012ba0 <_vfiprintf_r+0x218>)
 8012a64:	429c      	cmp	r4, r3
 8012a66:	bf08      	it	eq
 8012a68:	68f4      	ldreq	r4, [r6, #12]
 8012a6a:	e79d      	b.n	80129a8 <_vfiprintf_r+0x20>
 8012a6c:	4621      	mov	r1, r4
 8012a6e:	4630      	mov	r0, r6
 8012a70:	f000 fae0 	bl	8013034 <__swsetup_r>
 8012a74:	2800      	cmp	r0, #0
 8012a76:	d09d      	beq.n	80129b4 <_vfiprintf_r+0x2c>
 8012a78:	f04f 30ff 	mov.w	r0, #4294967295
 8012a7c:	b01d      	add	sp, #116	; 0x74
 8012a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a82:	46a8      	mov	r8, r5
 8012a84:	e7a2      	b.n	80129cc <_vfiprintf_r+0x44>
 8012a86:	4a44      	ldr	r2, [pc, #272]	; (8012b98 <_vfiprintf_r+0x210>)
 8012a88:	1a80      	subs	r0, r0, r2
 8012a8a:	fa0b f000 	lsl.w	r0, fp, r0
 8012a8e:	4318      	orrs	r0, r3
 8012a90:	9004      	str	r0, [sp, #16]
 8012a92:	4645      	mov	r5, r8
 8012a94:	e7be      	b.n	8012a14 <_vfiprintf_r+0x8c>
 8012a96:	9a03      	ldr	r2, [sp, #12]
 8012a98:	1d11      	adds	r1, r2, #4
 8012a9a:	6812      	ldr	r2, [r2, #0]
 8012a9c:	9103      	str	r1, [sp, #12]
 8012a9e:	2a00      	cmp	r2, #0
 8012aa0:	db01      	blt.n	8012aa6 <_vfiprintf_r+0x11e>
 8012aa2:	9207      	str	r2, [sp, #28]
 8012aa4:	e004      	b.n	8012ab0 <_vfiprintf_r+0x128>
 8012aa6:	4252      	negs	r2, r2
 8012aa8:	f043 0302 	orr.w	r3, r3, #2
 8012aac:	9207      	str	r2, [sp, #28]
 8012aae:	9304      	str	r3, [sp, #16]
 8012ab0:	f898 3000 	ldrb.w	r3, [r8]
 8012ab4:	2b2e      	cmp	r3, #46	; 0x2e
 8012ab6:	d10e      	bne.n	8012ad6 <_vfiprintf_r+0x14e>
 8012ab8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012abc:	2b2a      	cmp	r3, #42	; 0x2a
 8012abe:	d138      	bne.n	8012b32 <_vfiprintf_r+0x1aa>
 8012ac0:	9b03      	ldr	r3, [sp, #12]
 8012ac2:	1d1a      	adds	r2, r3, #4
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	9203      	str	r2, [sp, #12]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	bfb8      	it	lt
 8012acc:	f04f 33ff 	movlt.w	r3, #4294967295
 8012ad0:	f108 0802 	add.w	r8, r8, #2
 8012ad4:	9305      	str	r3, [sp, #20]
 8012ad6:	4d33      	ldr	r5, [pc, #204]	; (8012ba4 <_vfiprintf_r+0x21c>)
 8012ad8:	f898 1000 	ldrb.w	r1, [r8]
 8012adc:	2203      	movs	r2, #3
 8012ade:	4628      	mov	r0, r5
 8012ae0:	f7ed fbc6 	bl	8000270 <memchr>
 8012ae4:	b140      	cbz	r0, 8012af8 <_vfiprintf_r+0x170>
 8012ae6:	2340      	movs	r3, #64	; 0x40
 8012ae8:	1b40      	subs	r0, r0, r5
 8012aea:	fa03 f000 	lsl.w	r0, r3, r0
 8012aee:	9b04      	ldr	r3, [sp, #16]
 8012af0:	4303      	orrs	r3, r0
 8012af2:	f108 0801 	add.w	r8, r8, #1
 8012af6:	9304      	str	r3, [sp, #16]
 8012af8:	f898 1000 	ldrb.w	r1, [r8]
 8012afc:	482a      	ldr	r0, [pc, #168]	; (8012ba8 <_vfiprintf_r+0x220>)
 8012afe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b02:	2206      	movs	r2, #6
 8012b04:	f108 0701 	add.w	r7, r8, #1
 8012b08:	f7ed fbb2 	bl	8000270 <memchr>
 8012b0c:	2800      	cmp	r0, #0
 8012b0e:	d037      	beq.n	8012b80 <_vfiprintf_r+0x1f8>
 8012b10:	4b26      	ldr	r3, [pc, #152]	; (8012bac <_vfiprintf_r+0x224>)
 8012b12:	bb1b      	cbnz	r3, 8012b5c <_vfiprintf_r+0x1d4>
 8012b14:	9b03      	ldr	r3, [sp, #12]
 8012b16:	3307      	adds	r3, #7
 8012b18:	f023 0307 	bic.w	r3, r3, #7
 8012b1c:	3308      	adds	r3, #8
 8012b1e:	9303      	str	r3, [sp, #12]
 8012b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b22:	444b      	add	r3, r9
 8012b24:	9309      	str	r3, [sp, #36]	; 0x24
 8012b26:	e750      	b.n	80129ca <_vfiprintf_r+0x42>
 8012b28:	fb05 3202 	mla	r2, r5, r2, r3
 8012b2c:	2001      	movs	r0, #1
 8012b2e:	4688      	mov	r8, r1
 8012b30:	e78a      	b.n	8012a48 <_vfiprintf_r+0xc0>
 8012b32:	2300      	movs	r3, #0
 8012b34:	f108 0801 	add.w	r8, r8, #1
 8012b38:	9305      	str	r3, [sp, #20]
 8012b3a:	4619      	mov	r1, r3
 8012b3c:	250a      	movs	r5, #10
 8012b3e:	4640      	mov	r0, r8
 8012b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b44:	3a30      	subs	r2, #48	; 0x30
 8012b46:	2a09      	cmp	r2, #9
 8012b48:	d903      	bls.n	8012b52 <_vfiprintf_r+0x1ca>
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d0c3      	beq.n	8012ad6 <_vfiprintf_r+0x14e>
 8012b4e:	9105      	str	r1, [sp, #20]
 8012b50:	e7c1      	b.n	8012ad6 <_vfiprintf_r+0x14e>
 8012b52:	fb05 2101 	mla	r1, r5, r1, r2
 8012b56:	2301      	movs	r3, #1
 8012b58:	4680      	mov	r8, r0
 8012b5a:	e7f0      	b.n	8012b3e <_vfiprintf_r+0x1b6>
 8012b5c:	ab03      	add	r3, sp, #12
 8012b5e:	9300      	str	r3, [sp, #0]
 8012b60:	4622      	mov	r2, r4
 8012b62:	4b13      	ldr	r3, [pc, #76]	; (8012bb0 <_vfiprintf_r+0x228>)
 8012b64:	a904      	add	r1, sp, #16
 8012b66:	4630      	mov	r0, r6
 8012b68:	f3af 8000 	nop.w
 8012b6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012b70:	4681      	mov	r9, r0
 8012b72:	d1d5      	bne.n	8012b20 <_vfiprintf_r+0x198>
 8012b74:	89a3      	ldrh	r3, [r4, #12]
 8012b76:	065b      	lsls	r3, r3, #25
 8012b78:	f53f af7e 	bmi.w	8012a78 <_vfiprintf_r+0xf0>
 8012b7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b7e:	e77d      	b.n	8012a7c <_vfiprintf_r+0xf4>
 8012b80:	ab03      	add	r3, sp, #12
 8012b82:	9300      	str	r3, [sp, #0]
 8012b84:	4622      	mov	r2, r4
 8012b86:	4b0a      	ldr	r3, [pc, #40]	; (8012bb0 <_vfiprintf_r+0x228>)
 8012b88:	a904      	add	r1, sp, #16
 8012b8a:	4630      	mov	r0, r6
 8012b8c:	f000 f888 	bl	8012ca0 <_printf_i>
 8012b90:	e7ec      	b.n	8012b6c <_vfiprintf_r+0x1e4>
 8012b92:	bf00      	nop
 8012b94:	08016ad8 	.word	0x08016ad8
 8012b98:	08016b18 	.word	0x08016b18
 8012b9c:	08016af8 	.word	0x08016af8
 8012ba0:	08016ab8 	.word	0x08016ab8
 8012ba4:	08016b1e 	.word	0x08016b1e
 8012ba8:	08016b22 	.word	0x08016b22
 8012bac:	00000000 	.word	0x00000000
 8012bb0:	08012963 	.word	0x08012963

08012bb4 <_printf_common>:
 8012bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012bb8:	4691      	mov	r9, r2
 8012bba:	461f      	mov	r7, r3
 8012bbc:	688a      	ldr	r2, [r1, #8]
 8012bbe:	690b      	ldr	r3, [r1, #16]
 8012bc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012bc4:	4293      	cmp	r3, r2
 8012bc6:	bfb8      	it	lt
 8012bc8:	4613      	movlt	r3, r2
 8012bca:	f8c9 3000 	str.w	r3, [r9]
 8012bce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012bd2:	4606      	mov	r6, r0
 8012bd4:	460c      	mov	r4, r1
 8012bd6:	b112      	cbz	r2, 8012bde <_printf_common+0x2a>
 8012bd8:	3301      	adds	r3, #1
 8012bda:	f8c9 3000 	str.w	r3, [r9]
 8012bde:	6823      	ldr	r3, [r4, #0]
 8012be0:	0699      	lsls	r1, r3, #26
 8012be2:	bf42      	ittt	mi
 8012be4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012be8:	3302      	addmi	r3, #2
 8012bea:	f8c9 3000 	strmi.w	r3, [r9]
 8012bee:	6825      	ldr	r5, [r4, #0]
 8012bf0:	f015 0506 	ands.w	r5, r5, #6
 8012bf4:	d107      	bne.n	8012c06 <_printf_common+0x52>
 8012bf6:	f104 0a19 	add.w	sl, r4, #25
 8012bfa:	68e3      	ldr	r3, [r4, #12]
 8012bfc:	f8d9 2000 	ldr.w	r2, [r9]
 8012c00:	1a9b      	subs	r3, r3, r2
 8012c02:	42ab      	cmp	r3, r5
 8012c04:	dc28      	bgt.n	8012c58 <_printf_common+0xa4>
 8012c06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012c0a:	6822      	ldr	r2, [r4, #0]
 8012c0c:	3300      	adds	r3, #0
 8012c0e:	bf18      	it	ne
 8012c10:	2301      	movne	r3, #1
 8012c12:	0692      	lsls	r2, r2, #26
 8012c14:	d42d      	bmi.n	8012c72 <_printf_common+0xbe>
 8012c16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012c1a:	4639      	mov	r1, r7
 8012c1c:	4630      	mov	r0, r6
 8012c1e:	47c0      	blx	r8
 8012c20:	3001      	adds	r0, #1
 8012c22:	d020      	beq.n	8012c66 <_printf_common+0xb2>
 8012c24:	6823      	ldr	r3, [r4, #0]
 8012c26:	68e5      	ldr	r5, [r4, #12]
 8012c28:	f8d9 2000 	ldr.w	r2, [r9]
 8012c2c:	f003 0306 	and.w	r3, r3, #6
 8012c30:	2b04      	cmp	r3, #4
 8012c32:	bf08      	it	eq
 8012c34:	1aad      	subeq	r5, r5, r2
 8012c36:	68a3      	ldr	r3, [r4, #8]
 8012c38:	6922      	ldr	r2, [r4, #16]
 8012c3a:	bf0c      	ite	eq
 8012c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c40:	2500      	movne	r5, #0
 8012c42:	4293      	cmp	r3, r2
 8012c44:	bfc4      	itt	gt
 8012c46:	1a9b      	subgt	r3, r3, r2
 8012c48:	18ed      	addgt	r5, r5, r3
 8012c4a:	f04f 0900 	mov.w	r9, #0
 8012c4e:	341a      	adds	r4, #26
 8012c50:	454d      	cmp	r5, r9
 8012c52:	d11a      	bne.n	8012c8a <_printf_common+0xd6>
 8012c54:	2000      	movs	r0, #0
 8012c56:	e008      	b.n	8012c6a <_printf_common+0xb6>
 8012c58:	2301      	movs	r3, #1
 8012c5a:	4652      	mov	r2, sl
 8012c5c:	4639      	mov	r1, r7
 8012c5e:	4630      	mov	r0, r6
 8012c60:	47c0      	blx	r8
 8012c62:	3001      	adds	r0, #1
 8012c64:	d103      	bne.n	8012c6e <_printf_common+0xba>
 8012c66:	f04f 30ff 	mov.w	r0, #4294967295
 8012c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c6e:	3501      	adds	r5, #1
 8012c70:	e7c3      	b.n	8012bfa <_printf_common+0x46>
 8012c72:	18e1      	adds	r1, r4, r3
 8012c74:	1c5a      	adds	r2, r3, #1
 8012c76:	2030      	movs	r0, #48	; 0x30
 8012c78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012c7c:	4422      	add	r2, r4
 8012c7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012c82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012c86:	3302      	adds	r3, #2
 8012c88:	e7c5      	b.n	8012c16 <_printf_common+0x62>
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	4622      	mov	r2, r4
 8012c8e:	4639      	mov	r1, r7
 8012c90:	4630      	mov	r0, r6
 8012c92:	47c0      	blx	r8
 8012c94:	3001      	adds	r0, #1
 8012c96:	d0e6      	beq.n	8012c66 <_printf_common+0xb2>
 8012c98:	f109 0901 	add.w	r9, r9, #1
 8012c9c:	e7d8      	b.n	8012c50 <_printf_common+0x9c>
	...

08012ca0 <_printf_i>:
 8012ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012ca4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012ca8:	460c      	mov	r4, r1
 8012caa:	7e09      	ldrb	r1, [r1, #24]
 8012cac:	b085      	sub	sp, #20
 8012cae:	296e      	cmp	r1, #110	; 0x6e
 8012cb0:	4617      	mov	r7, r2
 8012cb2:	4606      	mov	r6, r0
 8012cb4:	4698      	mov	r8, r3
 8012cb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012cb8:	f000 80b3 	beq.w	8012e22 <_printf_i+0x182>
 8012cbc:	d822      	bhi.n	8012d04 <_printf_i+0x64>
 8012cbe:	2963      	cmp	r1, #99	; 0x63
 8012cc0:	d036      	beq.n	8012d30 <_printf_i+0x90>
 8012cc2:	d80a      	bhi.n	8012cda <_printf_i+0x3a>
 8012cc4:	2900      	cmp	r1, #0
 8012cc6:	f000 80b9 	beq.w	8012e3c <_printf_i+0x19c>
 8012cca:	2958      	cmp	r1, #88	; 0x58
 8012ccc:	f000 8083 	beq.w	8012dd6 <_printf_i+0x136>
 8012cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012cd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012cd8:	e032      	b.n	8012d40 <_printf_i+0xa0>
 8012cda:	2964      	cmp	r1, #100	; 0x64
 8012cdc:	d001      	beq.n	8012ce2 <_printf_i+0x42>
 8012cde:	2969      	cmp	r1, #105	; 0x69
 8012ce0:	d1f6      	bne.n	8012cd0 <_printf_i+0x30>
 8012ce2:	6820      	ldr	r0, [r4, #0]
 8012ce4:	6813      	ldr	r3, [r2, #0]
 8012ce6:	0605      	lsls	r5, r0, #24
 8012ce8:	f103 0104 	add.w	r1, r3, #4
 8012cec:	d52a      	bpl.n	8012d44 <_printf_i+0xa4>
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	6011      	str	r1, [r2, #0]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	da03      	bge.n	8012cfe <_printf_i+0x5e>
 8012cf6:	222d      	movs	r2, #45	; 0x2d
 8012cf8:	425b      	negs	r3, r3
 8012cfa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012cfe:	486f      	ldr	r0, [pc, #444]	; (8012ebc <_printf_i+0x21c>)
 8012d00:	220a      	movs	r2, #10
 8012d02:	e039      	b.n	8012d78 <_printf_i+0xd8>
 8012d04:	2973      	cmp	r1, #115	; 0x73
 8012d06:	f000 809d 	beq.w	8012e44 <_printf_i+0x1a4>
 8012d0a:	d808      	bhi.n	8012d1e <_printf_i+0x7e>
 8012d0c:	296f      	cmp	r1, #111	; 0x6f
 8012d0e:	d020      	beq.n	8012d52 <_printf_i+0xb2>
 8012d10:	2970      	cmp	r1, #112	; 0x70
 8012d12:	d1dd      	bne.n	8012cd0 <_printf_i+0x30>
 8012d14:	6823      	ldr	r3, [r4, #0]
 8012d16:	f043 0320 	orr.w	r3, r3, #32
 8012d1a:	6023      	str	r3, [r4, #0]
 8012d1c:	e003      	b.n	8012d26 <_printf_i+0x86>
 8012d1e:	2975      	cmp	r1, #117	; 0x75
 8012d20:	d017      	beq.n	8012d52 <_printf_i+0xb2>
 8012d22:	2978      	cmp	r1, #120	; 0x78
 8012d24:	d1d4      	bne.n	8012cd0 <_printf_i+0x30>
 8012d26:	2378      	movs	r3, #120	; 0x78
 8012d28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012d2c:	4864      	ldr	r0, [pc, #400]	; (8012ec0 <_printf_i+0x220>)
 8012d2e:	e055      	b.n	8012ddc <_printf_i+0x13c>
 8012d30:	6813      	ldr	r3, [r2, #0]
 8012d32:	1d19      	adds	r1, r3, #4
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	6011      	str	r1, [r2, #0]
 8012d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012d40:	2301      	movs	r3, #1
 8012d42:	e08c      	b.n	8012e5e <_printf_i+0x1be>
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	6011      	str	r1, [r2, #0]
 8012d48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012d4c:	bf18      	it	ne
 8012d4e:	b21b      	sxthne	r3, r3
 8012d50:	e7cf      	b.n	8012cf2 <_printf_i+0x52>
 8012d52:	6813      	ldr	r3, [r2, #0]
 8012d54:	6825      	ldr	r5, [r4, #0]
 8012d56:	1d18      	adds	r0, r3, #4
 8012d58:	6010      	str	r0, [r2, #0]
 8012d5a:	0628      	lsls	r0, r5, #24
 8012d5c:	d501      	bpl.n	8012d62 <_printf_i+0xc2>
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	e002      	b.n	8012d68 <_printf_i+0xc8>
 8012d62:	0668      	lsls	r0, r5, #25
 8012d64:	d5fb      	bpl.n	8012d5e <_printf_i+0xbe>
 8012d66:	881b      	ldrh	r3, [r3, #0]
 8012d68:	4854      	ldr	r0, [pc, #336]	; (8012ebc <_printf_i+0x21c>)
 8012d6a:	296f      	cmp	r1, #111	; 0x6f
 8012d6c:	bf14      	ite	ne
 8012d6e:	220a      	movne	r2, #10
 8012d70:	2208      	moveq	r2, #8
 8012d72:	2100      	movs	r1, #0
 8012d74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012d78:	6865      	ldr	r5, [r4, #4]
 8012d7a:	60a5      	str	r5, [r4, #8]
 8012d7c:	2d00      	cmp	r5, #0
 8012d7e:	f2c0 8095 	blt.w	8012eac <_printf_i+0x20c>
 8012d82:	6821      	ldr	r1, [r4, #0]
 8012d84:	f021 0104 	bic.w	r1, r1, #4
 8012d88:	6021      	str	r1, [r4, #0]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d13d      	bne.n	8012e0a <_printf_i+0x16a>
 8012d8e:	2d00      	cmp	r5, #0
 8012d90:	f040 808e 	bne.w	8012eb0 <_printf_i+0x210>
 8012d94:	4665      	mov	r5, ip
 8012d96:	2a08      	cmp	r2, #8
 8012d98:	d10b      	bne.n	8012db2 <_printf_i+0x112>
 8012d9a:	6823      	ldr	r3, [r4, #0]
 8012d9c:	07db      	lsls	r3, r3, #31
 8012d9e:	d508      	bpl.n	8012db2 <_printf_i+0x112>
 8012da0:	6923      	ldr	r3, [r4, #16]
 8012da2:	6862      	ldr	r2, [r4, #4]
 8012da4:	429a      	cmp	r2, r3
 8012da6:	bfde      	ittt	le
 8012da8:	2330      	movle	r3, #48	; 0x30
 8012daa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012dae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012db2:	ebac 0305 	sub.w	r3, ip, r5
 8012db6:	6123      	str	r3, [r4, #16]
 8012db8:	f8cd 8000 	str.w	r8, [sp]
 8012dbc:	463b      	mov	r3, r7
 8012dbe:	aa03      	add	r2, sp, #12
 8012dc0:	4621      	mov	r1, r4
 8012dc2:	4630      	mov	r0, r6
 8012dc4:	f7ff fef6 	bl	8012bb4 <_printf_common>
 8012dc8:	3001      	adds	r0, #1
 8012dca:	d14d      	bne.n	8012e68 <_printf_i+0x1c8>
 8012dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8012dd0:	b005      	add	sp, #20
 8012dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dd6:	4839      	ldr	r0, [pc, #228]	; (8012ebc <_printf_i+0x21c>)
 8012dd8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012ddc:	6813      	ldr	r3, [r2, #0]
 8012dde:	6821      	ldr	r1, [r4, #0]
 8012de0:	1d1d      	adds	r5, r3, #4
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	6015      	str	r5, [r2, #0]
 8012de6:	060a      	lsls	r2, r1, #24
 8012de8:	d50b      	bpl.n	8012e02 <_printf_i+0x162>
 8012dea:	07ca      	lsls	r2, r1, #31
 8012dec:	bf44      	itt	mi
 8012dee:	f041 0120 	orrmi.w	r1, r1, #32
 8012df2:	6021      	strmi	r1, [r4, #0]
 8012df4:	b91b      	cbnz	r3, 8012dfe <_printf_i+0x15e>
 8012df6:	6822      	ldr	r2, [r4, #0]
 8012df8:	f022 0220 	bic.w	r2, r2, #32
 8012dfc:	6022      	str	r2, [r4, #0]
 8012dfe:	2210      	movs	r2, #16
 8012e00:	e7b7      	b.n	8012d72 <_printf_i+0xd2>
 8012e02:	064d      	lsls	r5, r1, #25
 8012e04:	bf48      	it	mi
 8012e06:	b29b      	uxthmi	r3, r3
 8012e08:	e7ef      	b.n	8012dea <_printf_i+0x14a>
 8012e0a:	4665      	mov	r5, ip
 8012e0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e10:	fb02 3311 	mls	r3, r2, r1, r3
 8012e14:	5cc3      	ldrb	r3, [r0, r3]
 8012e16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012e1a:	460b      	mov	r3, r1
 8012e1c:	2900      	cmp	r1, #0
 8012e1e:	d1f5      	bne.n	8012e0c <_printf_i+0x16c>
 8012e20:	e7b9      	b.n	8012d96 <_printf_i+0xf6>
 8012e22:	6813      	ldr	r3, [r2, #0]
 8012e24:	6825      	ldr	r5, [r4, #0]
 8012e26:	6961      	ldr	r1, [r4, #20]
 8012e28:	1d18      	adds	r0, r3, #4
 8012e2a:	6010      	str	r0, [r2, #0]
 8012e2c:	0628      	lsls	r0, r5, #24
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	d501      	bpl.n	8012e36 <_printf_i+0x196>
 8012e32:	6019      	str	r1, [r3, #0]
 8012e34:	e002      	b.n	8012e3c <_printf_i+0x19c>
 8012e36:	066a      	lsls	r2, r5, #25
 8012e38:	d5fb      	bpl.n	8012e32 <_printf_i+0x192>
 8012e3a:	8019      	strh	r1, [r3, #0]
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	6123      	str	r3, [r4, #16]
 8012e40:	4665      	mov	r5, ip
 8012e42:	e7b9      	b.n	8012db8 <_printf_i+0x118>
 8012e44:	6813      	ldr	r3, [r2, #0]
 8012e46:	1d19      	adds	r1, r3, #4
 8012e48:	6011      	str	r1, [r2, #0]
 8012e4a:	681d      	ldr	r5, [r3, #0]
 8012e4c:	6862      	ldr	r2, [r4, #4]
 8012e4e:	2100      	movs	r1, #0
 8012e50:	4628      	mov	r0, r5
 8012e52:	f7ed fa0d 	bl	8000270 <memchr>
 8012e56:	b108      	cbz	r0, 8012e5c <_printf_i+0x1bc>
 8012e58:	1b40      	subs	r0, r0, r5
 8012e5a:	6060      	str	r0, [r4, #4]
 8012e5c:	6863      	ldr	r3, [r4, #4]
 8012e5e:	6123      	str	r3, [r4, #16]
 8012e60:	2300      	movs	r3, #0
 8012e62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e66:	e7a7      	b.n	8012db8 <_printf_i+0x118>
 8012e68:	6923      	ldr	r3, [r4, #16]
 8012e6a:	462a      	mov	r2, r5
 8012e6c:	4639      	mov	r1, r7
 8012e6e:	4630      	mov	r0, r6
 8012e70:	47c0      	blx	r8
 8012e72:	3001      	adds	r0, #1
 8012e74:	d0aa      	beq.n	8012dcc <_printf_i+0x12c>
 8012e76:	6823      	ldr	r3, [r4, #0]
 8012e78:	079b      	lsls	r3, r3, #30
 8012e7a:	d413      	bmi.n	8012ea4 <_printf_i+0x204>
 8012e7c:	68e0      	ldr	r0, [r4, #12]
 8012e7e:	9b03      	ldr	r3, [sp, #12]
 8012e80:	4298      	cmp	r0, r3
 8012e82:	bfb8      	it	lt
 8012e84:	4618      	movlt	r0, r3
 8012e86:	e7a3      	b.n	8012dd0 <_printf_i+0x130>
 8012e88:	2301      	movs	r3, #1
 8012e8a:	464a      	mov	r2, r9
 8012e8c:	4639      	mov	r1, r7
 8012e8e:	4630      	mov	r0, r6
 8012e90:	47c0      	blx	r8
 8012e92:	3001      	adds	r0, #1
 8012e94:	d09a      	beq.n	8012dcc <_printf_i+0x12c>
 8012e96:	3501      	adds	r5, #1
 8012e98:	68e3      	ldr	r3, [r4, #12]
 8012e9a:	9a03      	ldr	r2, [sp, #12]
 8012e9c:	1a9b      	subs	r3, r3, r2
 8012e9e:	42ab      	cmp	r3, r5
 8012ea0:	dcf2      	bgt.n	8012e88 <_printf_i+0x1e8>
 8012ea2:	e7eb      	b.n	8012e7c <_printf_i+0x1dc>
 8012ea4:	2500      	movs	r5, #0
 8012ea6:	f104 0919 	add.w	r9, r4, #25
 8012eaa:	e7f5      	b.n	8012e98 <_printf_i+0x1f8>
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d1ac      	bne.n	8012e0a <_printf_i+0x16a>
 8012eb0:	7803      	ldrb	r3, [r0, #0]
 8012eb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012eb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012eba:	e76c      	b.n	8012d96 <_printf_i+0xf6>
 8012ebc:	08016b29 	.word	0x08016b29
 8012ec0:	08016b3a 	.word	0x08016b3a

08012ec4 <_sbrk_r>:
 8012ec4:	b538      	push	{r3, r4, r5, lr}
 8012ec6:	4c06      	ldr	r4, [pc, #24]	; (8012ee0 <_sbrk_r+0x1c>)
 8012ec8:	2300      	movs	r3, #0
 8012eca:	4605      	mov	r5, r0
 8012ecc:	4608      	mov	r0, r1
 8012ece:	6023      	str	r3, [r4, #0]
 8012ed0:	f7ed ff32 	bl	8000d38 <_sbrk>
 8012ed4:	1c43      	adds	r3, r0, #1
 8012ed6:	d102      	bne.n	8012ede <_sbrk_r+0x1a>
 8012ed8:	6823      	ldr	r3, [r4, #0]
 8012eda:	b103      	cbz	r3, 8012ede <_sbrk_r+0x1a>
 8012edc:	602b      	str	r3, [r5, #0]
 8012ede:	bd38      	pop	{r3, r4, r5, pc}
 8012ee0:	200071cc 	.word	0x200071cc

08012ee4 <__sread>:
 8012ee4:	b510      	push	{r4, lr}
 8012ee6:	460c      	mov	r4, r1
 8012ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012eec:	f000 fa48 	bl	8013380 <_read_r>
 8012ef0:	2800      	cmp	r0, #0
 8012ef2:	bfab      	itete	ge
 8012ef4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8012ef8:	181b      	addge	r3, r3, r0
 8012efa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012efe:	bfac      	ite	ge
 8012f00:	6563      	strge	r3, [r4, #84]	; 0x54
 8012f02:	81a3      	strhlt	r3, [r4, #12]
 8012f04:	bd10      	pop	{r4, pc}

08012f06 <__swrite>:
 8012f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f0a:	461f      	mov	r7, r3
 8012f0c:	898b      	ldrh	r3, [r1, #12]
 8012f0e:	05db      	lsls	r3, r3, #23
 8012f10:	4605      	mov	r5, r0
 8012f12:	460c      	mov	r4, r1
 8012f14:	4616      	mov	r6, r2
 8012f16:	d505      	bpl.n	8012f24 <__swrite+0x1e>
 8012f18:	2302      	movs	r3, #2
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f20:	f000 f9b6 	bl	8013290 <_lseek_r>
 8012f24:	89a3      	ldrh	r3, [r4, #12]
 8012f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012f2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012f2e:	81a3      	strh	r3, [r4, #12]
 8012f30:	4632      	mov	r2, r6
 8012f32:	463b      	mov	r3, r7
 8012f34:	4628      	mov	r0, r5
 8012f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012f3a:	f000 b869 	b.w	8013010 <_write_r>

08012f3e <__sseek>:
 8012f3e:	b510      	push	{r4, lr}
 8012f40:	460c      	mov	r4, r1
 8012f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f46:	f000 f9a3 	bl	8013290 <_lseek_r>
 8012f4a:	1c43      	adds	r3, r0, #1
 8012f4c:	89a3      	ldrh	r3, [r4, #12]
 8012f4e:	bf15      	itete	ne
 8012f50:	6560      	strne	r0, [r4, #84]	; 0x54
 8012f52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012f56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012f5a:	81a3      	strheq	r3, [r4, #12]
 8012f5c:	bf18      	it	ne
 8012f5e:	81a3      	strhne	r3, [r4, #12]
 8012f60:	bd10      	pop	{r4, pc}

08012f62 <__sclose>:
 8012f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f66:	f000 b8d3 	b.w	8013110 <_close_r>
	...

08012f6c <__swbuf_r>:
 8012f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f6e:	460e      	mov	r6, r1
 8012f70:	4614      	mov	r4, r2
 8012f72:	4605      	mov	r5, r0
 8012f74:	b118      	cbz	r0, 8012f7e <__swbuf_r+0x12>
 8012f76:	6983      	ldr	r3, [r0, #24]
 8012f78:	b90b      	cbnz	r3, 8012f7e <__swbuf_r+0x12>
 8012f7a:	f7ff fba1 	bl	80126c0 <__sinit>
 8012f7e:	4b21      	ldr	r3, [pc, #132]	; (8013004 <__swbuf_r+0x98>)
 8012f80:	429c      	cmp	r4, r3
 8012f82:	d12a      	bne.n	8012fda <__swbuf_r+0x6e>
 8012f84:	686c      	ldr	r4, [r5, #4]
 8012f86:	69a3      	ldr	r3, [r4, #24]
 8012f88:	60a3      	str	r3, [r4, #8]
 8012f8a:	89a3      	ldrh	r3, [r4, #12]
 8012f8c:	071a      	lsls	r2, r3, #28
 8012f8e:	d52e      	bpl.n	8012fee <__swbuf_r+0x82>
 8012f90:	6923      	ldr	r3, [r4, #16]
 8012f92:	b363      	cbz	r3, 8012fee <__swbuf_r+0x82>
 8012f94:	6923      	ldr	r3, [r4, #16]
 8012f96:	6820      	ldr	r0, [r4, #0]
 8012f98:	1ac0      	subs	r0, r0, r3
 8012f9a:	6963      	ldr	r3, [r4, #20]
 8012f9c:	b2f6      	uxtb	r6, r6
 8012f9e:	4283      	cmp	r3, r0
 8012fa0:	4637      	mov	r7, r6
 8012fa2:	dc04      	bgt.n	8012fae <__swbuf_r+0x42>
 8012fa4:	4621      	mov	r1, r4
 8012fa6:	4628      	mov	r0, r5
 8012fa8:	f000 f948 	bl	801323c <_fflush_r>
 8012fac:	bb28      	cbnz	r0, 8012ffa <__swbuf_r+0x8e>
 8012fae:	68a3      	ldr	r3, [r4, #8]
 8012fb0:	3b01      	subs	r3, #1
 8012fb2:	60a3      	str	r3, [r4, #8]
 8012fb4:	6823      	ldr	r3, [r4, #0]
 8012fb6:	1c5a      	adds	r2, r3, #1
 8012fb8:	6022      	str	r2, [r4, #0]
 8012fba:	701e      	strb	r6, [r3, #0]
 8012fbc:	6963      	ldr	r3, [r4, #20]
 8012fbe:	3001      	adds	r0, #1
 8012fc0:	4283      	cmp	r3, r0
 8012fc2:	d004      	beq.n	8012fce <__swbuf_r+0x62>
 8012fc4:	89a3      	ldrh	r3, [r4, #12]
 8012fc6:	07db      	lsls	r3, r3, #31
 8012fc8:	d519      	bpl.n	8012ffe <__swbuf_r+0x92>
 8012fca:	2e0a      	cmp	r6, #10
 8012fcc:	d117      	bne.n	8012ffe <__swbuf_r+0x92>
 8012fce:	4621      	mov	r1, r4
 8012fd0:	4628      	mov	r0, r5
 8012fd2:	f000 f933 	bl	801323c <_fflush_r>
 8012fd6:	b190      	cbz	r0, 8012ffe <__swbuf_r+0x92>
 8012fd8:	e00f      	b.n	8012ffa <__swbuf_r+0x8e>
 8012fda:	4b0b      	ldr	r3, [pc, #44]	; (8013008 <__swbuf_r+0x9c>)
 8012fdc:	429c      	cmp	r4, r3
 8012fde:	d101      	bne.n	8012fe4 <__swbuf_r+0x78>
 8012fe0:	68ac      	ldr	r4, [r5, #8]
 8012fe2:	e7d0      	b.n	8012f86 <__swbuf_r+0x1a>
 8012fe4:	4b09      	ldr	r3, [pc, #36]	; (801300c <__swbuf_r+0xa0>)
 8012fe6:	429c      	cmp	r4, r3
 8012fe8:	bf08      	it	eq
 8012fea:	68ec      	ldreq	r4, [r5, #12]
 8012fec:	e7cb      	b.n	8012f86 <__swbuf_r+0x1a>
 8012fee:	4621      	mov	r1, r4
 8012ff0:	4628      	mov	r0, r5
 8012ff2:	f000 f81f 	bl	8013034 <__swsetup_r>
 8012ff6:	2800      	cmp	r0, #0
 8012ff8:	d0cc      	beq.n	8012f94 <__swbuf_r+0x28>
 8012ffa:	f04f 37ff 	mov.w	r7, #4294967295
 8012ffe:	4638      	mov	r0, r7
 8013000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013002:	bf00      	nop
 8013004:	08016ad8 	.word	0x08016ad8
 8013008:	08016af8 	.word	0x08016af8
 801300c:	08016ab8 	.word	0x08016ab8

08013010 <_write_r>:
 8013010:	b538      	push	{r3, r4, r5, lr}
 8013012:	4c07      	ldr	r4, [pc, #28]	; (8013030 <_write_r+0x20>)
 8013014:	4605      	mov	r5, r0
 8013016:	4608      	mov	r0, r1
 8013018:	4611      	mov	r1, r2
 801301a:	2200      	movs	r2, #0
 801301c:	6022      	str	r2, [r4, #0]
 801301e:	461a      	mov	r2, r3
 8013020:	f7ed fe39 	bl	8000c96 <_write>
 8013024:	1c43      	adds	r3, r0, #1
 8013026:	d102      	bne.n	801302e <_write_r+0x1e>
 8013028:	6823      	ldr	r3, [r4, #0]
 801302a:	b103      	cbz	r3, 801302e <_write_r+0x1e>
 801302c:	602b      	str	r3, [r5, #0]
 801302e:	bd38      	pop	{r3, r4, r5, pc}
 8013030:	200071cc 	.word	0x200071cc

08013034 <__swsetup_r>:
 8013034:	4b32      	ldr	r3, [pc, #200]	; (8013100 <__swsetup_r+0xcc>)
 8013036:	b570      	push	{r4, r5, r6, lr}
 8013038:	681d      	ldr	r5, [r3, #0]
 801303a:	4606      	mov	r6, r0
 801303c:	460c      	mov	r4, r1
 801303e:	b125      	cbz	r5, 801304a <__swsetup_r+0x16>
 8013040:	69ab      	ldr	r3, [r5, #24]
 8013042:	b913      	cbnz	r3, 801304a <__swsetup_r+0x16>
 8013044:	4628      	mov	r0, r5
 8013046:	f7ff fb3b 	bl	80126c0 <__sinit>
 801304a:	4b2e      	ldr	r3, [pc, #184]	; (8013104 <__swsetup_r+0xd0>)
 801304c:	429c      	cmp	r4, r3
 801304e:	d10f      	bne.n	8013070 <__swsetup_r+0x3c>
 8013050:	686c      	ldr	r4, [r5, #4]
 8013052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013056:	b29a      	uxth	r2, r3
 8013058:	0715      	lsls	r5, r2, #28
 801305a:	d42c      	bmi.n	80130b6 <__swsetup_r+0x82>
 801305c:	06d0      	lsls	r0, r2, #27
 801305e:	d411      	bmi.n	8013084 <__swsetup_r+0x50>
 8013060:	2209      	movs	r2, #9
 8013062:	6032      	str	r2, [r6, #0]
 8013064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013068:	81a3      	strh	r3, [r4, #12]
 801306a:	f04f 30ff 	mov.w	r0, #4294967295
 801306e:	e03e      	b.n	80130ee <__swsetup_r+0xba>
 8013070:	4b25      	ldr	r3, [pc, #148]	; (8013108 <__swsetup_r+0xd4>)
 8013072:	429c      	cmp	r4, r3
 8013074:	d101      	bne.n	801307a <__swsetup_r+0x46>
 8013076:	68ac      	ldr	r4, [r5, #8]
 8013078:	e7eb      	b.n	8013052 <__swsetup_r+0x1e>
 801307a:	4b24      	ldr	r3, [pc, #144]	; (801310c <__swsetup_r+0xd8>)
 801307c:	429c      	cmp	r4, r3
 801307e:	bf08      	it	eq
 8013080:	68ec      	ldreq	r4, [r5, #12]
 8013082:	e7e6      	b.n	8013052 <__swsetup_r+0x1e>
 8013084:	0751      	lsls	r1, r2, #29
 8013086:	d512      	bpl.n	80130ae <__swsetup_r+0x7a>
 8013088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801308a:	b141      	cbz	r1, 801309e <__swsetup_r+0x6a>
 801308c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013090:	4299      	cmp	r1, r3
 8013092:	d002      	beq.n	801309a <__swsetup_r+0x66>
 8013094:	4630      	mov	r0, r6
 8013096:	f7ff fba5 	bl	80127e4 <_free_r>
 801309a:	2300      	movs	r3, #0
 801309c:	6363      	str	r3, [r4, #52]	; 0x34
 801309e:	89a3      	ldrh	r3, [r4, #12]
 80130a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80130a4:	81a3      	strh	r3, [r4, #12]
 80130a6:	2300      	movs	r3, #0
 80130a8:	6063      	str	r3, [r4, #4]
 80130aa:	6923      	ldr	r3, [r4, #16]
 80130ac:	6023      	str	r3, [r4, #0]
 80130ae:	89a3      	ldrh	r3, [r4, #12]
 80130b0:	f043 0308 	orr.w	r3, r3, #8
 80130b4:	81a3      	strh	r3, [r4, #12]
 80130b6:	6923      	ldr	r3, [r4, #16]
 80130b8:	b94b      	cbnz	r3, 80130ce <__swsetup_r+0x9a>
 80130ba:	89a3      	ldrh	r3, [r4, #12]
 80130bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80130c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80130c4:	d003      	beq.n	80130ce <__swsetup_r+0x9a>
 80130c6:	4621      	mov	r1, r4
 80130c8:	4630      	mov	r0, r6
 80130ca:	f000 f917 	bl	80132fc <__smakebuf_r>
 80130ce:	89a2      	ldrh	r2, [r4, #12]
 80130d0:	f012 0301 	ands.w	r3, r2, #1
 80130d4:	d00c      	beq.n	80130f0 <__swsetup_r+0xbc>
 80130d6:	2300      	movs	r3, #0
 80130d8:	60a3      	str	r3, [r4, #8]
 80130da:	6963      	ldr	r3, [r4, #20]
 80130dc:	425b      	negs	r3, r3
 80130de:	61a3      	str	r3, [r4, #24]
 80130e0:	6923      	ldr	r3, [r4, #16]
 80130e2:	b953      	cbnz	r3, 80130fa <__swsetup_r+0xc6>
 80130e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80130ec:	d1ba      	bne.n	8013064 <__swsetup_r+0x30>
 80130ee:	bd70      	pop	{r4, r5, r6, pc}
 80130f0:	0792      	lsls	r2, r2, #30
 80130f2:	bf58      	it	pl
 80130f4:	6963      	ldrpl	r3, [r4, #20]
 80130f6:	60a3      	str	r3, [r4, #8]
 80130f8:	e7f2      	b.n	80130e0 <__swsetup_r+0xac>
 80130fa:	2000      	movs	r0, #0
 80130fc:	e7f7      	b.n	80130ee <__swsetup_r+0xba>
 80130fe:	bf00      	nop
 8013100:	20000018 	.word	0x20000018
 8013104:	08016ad8 	.word	0x08016ad8
 8013108:	08016af8 	.word	0x08016af8
 801310c:	08016ab8 	.word	0x08016ab8

08013110 <_close_r>:
 8013110:	b538      	push	{r3, r4, r5, lr}
 8013112:	4c06      	ldr	r4, [pc, #24]	; (801312c <_close_r+0x1c>)
 8013114:	2300      	movs	r3, #0
 8013116:	4605      	mov	r5, r0
 8013118:	4608      	mov	r0, r1
 801311a:	6023      	str	r3, [r4, #0]
 801311c:	f7ed fdd7 	bl	8000cce <_close>
 8013120:	1c43      	adds	r3, r0, #1
 8013122:	d102      	bne.n	801312a <_close_r+0x1a>
 8013124:	6823      	ldr	r3, [r4, #0]
 8013126:	b103      	cbz	r3, 801312a <_close_r+0x1a>
 8013128:	602b      	str	r3, [r5, #0]
 801312a:	bd38      	pop	{r3, r4, r5, pc}
 801312c:	200071cc 	.word	0x200071cc

08013130 <__sflush_r>:
 8013130:	898a      	ldrh	r2, [r1, #12]
 8013132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013136:	4605      	mov	r5, r0
 8013138:	0710      	lsls	r0, r2, #28
 801313a:	460c      	mov	r4, r1
 801313c:	d458      	bmi.n	80131f0 <__sflush_r+0xc0>
 801313e:	684b      	ldr	r3, [r1, #4]
 8013140:	2b00      	cmp	r3, #0
 8013142:	dc05      	bgt.n	8013150 <__sflush_r+0x20>
 8013144:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013146:	2b00      	cmp	r3, #0
 8013148:	dc02      	bgt.n	8013150 <__sflush_r+0x20>
 801314a:	2000      	movs	r0, #0
 801314c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013152:	2e00      	cmp	r6, #0
 8013154:	d0f9      	beq.n	801314a <__sflush_r+0x1a>
 8013156:	2300      	movs	r3, #0
 8013158:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801315c:	682f      	ldr	r7, [r5, #0]
 801315e:	6a21      	ldr	r1, [r4, #32]
 8013160:	602b      	str	r3, [r5, #0]
 8013162:	d032      	beq.n	80131ca <__sflush_r+0x9a>
 8013164:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013166:	89a3      	ldrh	r3, [r4, #12]
 8013168:	075a      	lsls	r2, r3, #29
 801316a:	d505      	bpl.n	8013178 <__sflush_r+0x48>
 801316c:	6863      	ldr	r3, [r4, #4]
 801316e:	1ac0      	subs	r0, r0, r3
 8013170:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013172:	b10b      	cbz	r3, 8013178 <__sflush_r+0x48>
 8013174:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013176:	1ac0      	subs	r0, r0, r3
 8013178:	2300      	movs	r3, #0
 801317a:	4602      	mov	r2, r0
 801317c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801317e:	6a21      	ldr	r1, [r4, #32]
 8013180:	4628      	mov	r0, r5
 8013182:	47b0      	blx	r6
 8013184:	1c43      	adds	r3, r0, #1
 8013186:	89a3      	ldrh	r3, [r4, #12]
 8013188:	d106      	bne.n	8013198 <__sflush_r+0x68>
 801318a:	6829      	ldr	r1, [r5, #0]
 801318c:	291d      	cmp	r1, #29
 801318e:	d848      	bhi.n	8013222 <__sflush_r+0xf2>
 8013190:	4a29      	ldr	r2, [pc, #164]	; (8013238 <__sflush_r+0x108>)
 8013192:	40ca      	lsrs	r2, r1
 8013194:	07d6      	lsls	r6, r2, #31
 8013196:	d544      	bpl.n	8013222 <__sflush_r+0xf2>
 8013198:	2200      	movs	r2, #0
 801319a:	6062      	str	r2, [r4, #4]
 801319c:	04d9      	lsls	r1, r3, #19
 801319e:	6922      	ldr	r2, [r4, #16]
 80131a0:	6022      	str	r2, [r4, #0]
 80131a2:	d504      	bpl.n	80131ae <__sflush_r+0x7e>
 80131a4:	1c42      	adds	r2, r0, #1
 80131a6:	d101      	bne.n	80131ac <__sflush_r+0x7c>
 80131a8:	682b      	ldr	r3, [r5, #0]
 80131aa:	b903      	cbnz	r3, 80131ae <__sflush_r+0x7e>
 80131ac:	6560      	str	r0, [r4, #84]	; 0x54
 80131ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80131b0:	602f      	str	r7, [r5, #0]
 80131b2:	2900      	cmp	r1, #0
 80131b4:	d0c9      	beq.n	801314a <__sflush_r+0x1a>
 80131b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80131ba:	4299      	cmp	r1, r3
 80131bc:	d002      	beq.n	80131c4 <__sflush_r+0x94>
 80131be:	4628      	mov	r0, r5
 80131c0:	f7ff fb10 	bl	80127e4 <_free_r>
 80131c4:	2000      	movs	r0, #0
 80131c6:	6360      	str	r0, [r4, #52]	; 0x34
 80131c8:	e7c0      	b.n	801314c <__sflush_r+0x1c>
 80131ca:	2301      	movs	r3, #1
 80131cc:	4628      	mov	r0, r5
 80131ce:	47b0      	blx	r6
 80131d0:	1c41      	adds	r1, r0, #1
 80131d2:	d1c8      	bne.n	8013166 <__sflush_r+0x36>
 80131d4:	682b      	ldr	r3, [r5, #0]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d0c5      	beq.n	8013166 <__sflush_r+0x36>
 80131da:	2b1d      	cmp	r3, #29
 80131dc:	d001      	beq.n	80131e2 <__sflush_r+0xb2>
 80131de:	2b16      	cmp	r3, #22
 80131e0:	d101      	bne.n	80131e6 <__sflush_r+0xb6>
 80131e2:	602f      	str	r7, [r5, #0]
 80131e4:	e7b1      	b.n	801314a <__sflush_r+0x1a>
 80131e6:	89a3      	ldrh	r3, [r4, #12]
 80131e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80131ec:	81a3      	strh	r3, [r4, #12]
 80131ee:	e7ad      	b.n	801314c <__sflush_r+0x1c>
 80131f0:	690f      	ldr	r7, [r1, #16]
 80131f2:	2f00      	cmp	r7, #0
 80131f4:	d0a9      	beq.n	801314a <__sflush_r+0x1a>
 80131f6:	0793      	lsls	r3, r2, #30
 80131f8:	680e      	ldr	r6, [r1, #0]
 80131fa:	bf08      	it	eq
 80131fc:	694b      	ldreq	r3, [r1, #20]
 80131fe:	600f      	str	r7, [r1, #0]
 8013200:	bf18      	it	ne
 8013202:	2300      	movne	r3, #0
 8013204:	eba6 0807 	sub.w	r8, r6, r7
 8013208:	608b      	str	r3, [r1, #8]
 801320a:	f1b8 0f00 	cmp.w	r8, #0
 801320e:	dd9c      	ble.n	801314a <__sflush_r+0x1a>
 8013210:	4643      	mov	r3, r8
 8013212:	463a      	mov	r2, r7
 8013214:	6a21      	ldr	r1, [r4, #32]
 8013216:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013218:	4628      	mov	r0, r5
 801321a:	47b0      	blx	r6
 801321c:	2800      	cmp	r0, #0
 801321e:	dc06      	bgt.n	801322e <__sflush_r+0xfe>
 8013220:	89a3      	ldrh	r3, [r4, #12]
 8013222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013226:	81a3      	strh	r3, [r4, #12]
 8013228:	f04f 30ff 	mov.w	r0, #4294967295
 801322c:	e78e      	b.n	801314c <__sflush_r+0x1c>
 801322e:	4407      	add	r7, r0
 8013230:	eba8 0800 	sub.w	r8, r8, r0
 8013234:	e7e9      	b.n	801320a <__sflush_r+0xda>
 8013236:	bf00      	nop
 8013238:	20400001 	.word	0x20400001

0801323c <_fflush_r>:
 801323c:	b538      	push	{r3, r4, r5, lr}
 801323e:	690b      	ldr	r3, [r1, #16]
 8013240:	4605      	mov	r5, r0
 8013242:	460c      	mov	r4, r1
 8013244:	b1db      	cbz	r3, 801327e <_fflush_r+0x42>
 8013246:	b118      	cbz	r0, 8013250 <_fflush_r+0x14>
 8013248:	6983      	ldr	r3, [r0, #24]
 801324a:	b90b      	cbnz	r3, 8013250 <_fflush_r+0x14>
 801324c:	f7ff fa38 	bl	80126c0 <__sinit>
 8013250:	4b0c      	ldr	r3, [pc, #48]	; (8013284 <_fflush_r+0x48>)
 8013252:	429c      	cmp	r4, r3
 8013254:	d109      	bne.n	801326a <_fflush_r+0x2e>
 8013256:	686c      	ldr	r4, [r5, #4]
 8013258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801325c:	b17b      	cbz	r3, 801327e <_fflush_r+0x42>
 801325e:	4621      	mov	r1, r4
 8013260:	4628      	mov	r0, r5
 8013262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013266:	f7ff bf63 	b.w	8013130 <__sflush_r>
 801326a:	4b07      	ldr	r3, [pc, #28]	; (8013288 <_fflush_r+0x4c>)
 801326c:	429c      	cmp	r4, r3
 801326e:	d101      	bne.n	8013274 <_fflush_r+0x38>
 8013270:	68ac      	ldr	r4, [r5, #8]
 8013272:	e7f1      	b.n	8013258 <_fflush_r+0x1c>
 8013274:	4b05      	ldr	r3, [pc, #20]	; (801328c <_fflush_r+0x50>)
 8013276:	429c      	cmp	r4, r3
 8013278:	bf08      	it	eq
 801327a:	68ec      	ldreq	r4, [r5, #12]
 801327c:	e7ec      	b.n	8013258 <_fflush_r+0x1c>
 801327e:	2000      	movs	r0, #0
 8013280:	bd38      	pop	{r3, r4, r5, pc}
 8013282:	bf00      	nop
 8013284:	08016ad8 	.word	0x08016ad8
 8013288:	08016af8 	.word	0x08016af8
 801328c:	08016ab8 	.word	0x08016ab8

08013290 <_lseek_r>:
 8013290:	b538      	push	{r3, r4, r5, lr}
 8013292:	4c07      	ldr	r4, [pc, #28]	; (80132b0 <_lseek_r+0x20>)
 8013294:	4605      	mov	r5, r0
 8013296:	4608      	mov	r0, r1
 8013298:	4611      	mov	r1, r2
 801329a:	2200      	movs	r2, #0
 801329c:	6022      	str	r2, [r4, #0]
 801329e:	461a      	mov	r2, r3
 80132a0:	f7ed fd3c 	bl	8000d1c <_lseek>
 80132a4:	1c43      	adds	r3, r0, #1
 80132a6:	d102      	bne.n	80132ae <_lseek_r+0x1e>
 80132a8:	6823      	ldr	r3, [r4, #0]
 80132aa:	b103      	cbz	r3, 80132ae <_lseek_r+0x1e>
 80132ac:	602b      	str	r3, [r5, #0]
 80132ae:	bd38      	pop	{r3, r4, r5, pc}
 80132b0:	200071cc 	.word	0x200071cc

080132b4 <__swhatbuf_r>:
 80132b4:	b570      	push	{r4, r5, r6, lr}
 80132b6:	460e      	mov	r6, r1
 80132b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132bc:	2900      	cmp	r1, #0
 80132be:	b096      	sub	sp, #88	; 0x58
 80132c0:	4614      	mov	r4, r2
 80132c2:	461d      	mov	r5, r3
 80132c4:	da07      	bge.n	80132d6 <__swhatbuf_r+0x22>
 80132c6:	2300      	movs	r3, #0
 80132c8:	602b      	str	r3, [r5, #0]
 80132ca:	89b3      	ldrh	r3, [r6, #12]
 80132cc:	061a      	lsls	r2, r3, #24
 80132ce:	d410      	bmi.n	80132f2 <__swhatbuf_r+0x3e>
 80132d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80132d4:	e00e      	b.n	80132f4 <__swhatbuf_r+0x40>
 80132d6:	466a      	mov	r2, sp
 80132d8:	f000 f864 	bl	80133a4 <_fstat_r>
 80132dc:	2800      	cmp	r0, #0
 80132de:	dbf2      	blt.n	80132c6 <__swhatbuf_r+0x12>
 80132e0:	9a01      	ldr	r2, [sp, #4]
 80132e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80132e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80132ea:	425a      	negs	r2, r3
 80132ec:	415a      	adcs	r2, r3
 80132ee:	602a      	str	r2, [r5, #0]
 80132f0:	e7ee      	b.n	80132d0 <__swhatbuf_r+0x1c>
 80132f2:	2340      	movs	r3, #64	; 0x40
 80132f4:	2000      	movs	r0, #0
 80132f6:	6023      	str	r3, [r4, #0]
 80132f8:	b016      	add	sp, #88	; 0x58
 80132fa:	bd70      	pop	{r4, r5, r6, pc}

080132fc <__smakebuf_r>:
 80132fc:	898b      	ldrh	r3, [r1, #12]
 80132fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013300:	079d      	lsls	r5, r3, #30
 8013302:	4606      	mov	r6, r0
 8013304:	460c      	mov	r4, r1
 8013306:	d507      	bpl.n	8013318 <__smakebuf_r+0x1c>
 8013308:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801330c:	6023      	str	r3, [r4, #0]
 801330e:	6123      	str	r3, [r4, #16]
 8013310:	2301      	movs	r3, #1
 8013312:	6163      	str	r3, [r4, #20]
 8013314:	b002      	add	sp, #8
 8013316:	bd70      	pop	{r4, r5, r6, pc}
 8013318:	ab01      	add	r3, sp, #4
 801331a:	466a      	mov	r2, sp
 801331c:	f7ff ffca 	bl	80132b4 <__swhatbuf_r>
 8013320:	9900      	ldr	r1, [sp, #0]
 8013322:	4605      	mov	r5, r0
 8013324:	4630      	mov	r0, r6
 8013326:	f7ff faab 	bl	8012880 <_malloc_r>
 801332a:	b948      	cbnz	r0, 8013340 <__smakebuf_r+0x44>
 801332c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013330:	059a      	lsls	r2, r3, #22
 8013332:	d4ef      	bmi.n	8013314 <__smakebuf_r+0x18>
 8013334:	f023 0303 	bic.w	r3, r3, #3
 8013338:	f043 0302 	orr.w	r3, r3, #2
 801333c:	81a3      	strh	r3, [r4, #12]
 801333e:	e7e3      	b.n	8013308 <__smakebuf_r+0xc>
 8013340:	4b0d      	ldr	r3, [pc, #52]	; (8013378 <__smakebuf_r+0x7c>)
 8013342:	62b3      	str	r3, [r6, #40]	; 0x28
 8013344:	89a3      	ldrh	r3, [r4, #12]
 8013346:	6020      	str	r0, [r4, #0]
 8013348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801334c:	81a3      	strh	r3, [r4, #12]
 801334e:	9b00      	ldr	r3, [sp, #0]
 8013350:	6163      	str	r3, [r4, #20]
 8013352:	9b01      	ldr	r3, [sp, #4]
 8013354:	6120      	str	r0, [r4, #16]
 8013356:	b15b      	cbz	r3, 8013370 <__smakebuf_r+0x74>
 8013358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801335c:	4630      	mov	r0, r6
 801335e:	f000 f833 	bl	80133c8 <_isatty_r>
 8013362:	b128      	cbz	r0, 8013370 <__smakebuf_r+0x74>
 8013364:	89a3      	ldrh	r3, [r4, #12]
 8013366:	f023 0303 	bic.w	r3, r3, #3
 801336a:	f043 0301 	orr.w	r3, r3, #1
 801336e:	81a3      	strh	r3, [r4, #12]
 8013370:	89a3      	ldrh	r3, [r4, #12]
 8013372:	431d      	orrs	r5, r3
 8013374:	81a5      	strh	r5, [r4, #12]
 8013376:	e7cd      	b.n	8013314 <__smakebuf_r+0x18>
 8013378:	08012689 	.word	0x08012689

0801337c <__malloc_lock>:
 801337c:	4770      	bx	lr

0801337e <__malloc_unlock>:
 801337e:	4770      	bx	lr

08013380 <_read_r>:
 8013380:	b538      	push	{r3, r4, r5, lr}
 8013382:	4c07      	ldr	r4, [pc, #28]	; (80133a0 <_read_r+0x20>)
 8013384:	4605      	mov	r5, r0
 8013386:	4608      	mov	r0, r1
 8013388:	4611      	mov	r1, r2
 801338a:	2200      	movs	r2, #0
 801338c:	6022      	str	r2, [r4, #0]
 801338e:	461a      	mov	r2, r3
 8013390:	f7ed fc64 	bl	8000c5c <_read>
 8013394:	1c43      	adds	r3, r0, #1
 8013396:	d102      	bne.n	801339e <_read_r+0x1e>
 8013398:	6823      	ldr	r3, [r4, #0]
 801339a:	b103      	cbz	r3, 801339e <_read_r+0x1e>
 801339c:	602b      	str	r3, [r5, #0]
 801339e:	bd38      	pop	{r3, r4, r5, pc}
 80133a0:	200071cc 	.word	0x200071cc

080133a4 <_fstat_r>:
 80133a4:	b538      	push	{r3, r4, r5, lr}
 80133a6:	4c07      	ldr	r4, [pc, #28]	; (80133c4 <_fstat_r+0x20>)
 80133a8:	2300      	movs	r3, #0
 80133aa:	4605      	mov	r5, r0
 80133ac:	4608      	mov	r0, r1
 80133ae:	4611      	mov	r1, r2
 80133b0:	6023      	str	r3, [r4, #0]
 80133b2:	f7ed fc98 	bl	8000ce6 <_fstat>
 80133b6:	1c43      	adds	r3, r0, #1
 80133b8:	d102      	bne.n	80133c0 <_fstat_r+0x1c>
 80133ba:	6823      	ldr	r3, [r4, #0]
 80133bc:	b103      	cbz	r3, 80133c0 <_fstat_r+0x1c>
 80133be:	602b      	str	r3, [r5, #0]
 80133c0:	bd38      	pop	{r3, r4, r5, pc}
 80133c2:	bf00      	nop
 80133c4:	200071cc 	.word	0x200071cc

080133c8 <_isatty_r>:
 80133c8:	b538      	push	{r3, r4, r5, lr}
 80133ca:	4c06      	ldr	r4, [pc, #24]	; (80133e4 <_isatty_r+0x1c>)
 80133cc:	2300      	movs	r3, #0
 80133ce:	4605      	mov	r5, r0
 80133d0:	4608      	mov	r0, r1
 80133d2:	6023      	str	r3, [r4, #0]
 80133d4:	f7ed fc97 	bl	8000d06 <_isatty>
 80133d8:	1c43      	adds	r3, r0, #1
 80133da:	d102      	bne.n	80133e2 <_isatty_r+0x1a>
 80133dc:	6823      	ldr	r3, [r4, #0]
 80133de:	b103      	cbz	r3, 80133e2 <_isatty_r+0x1a>
 80133e0:	602b      	str	r3, [r5, #0]
 80133e2:	bd38      	pop	{r3, r4, r5, pc}
 80133e4:	200071cc 	.word	0x200071cc

080133e8 <_init>:
 80133e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133ea:	bf00      	nop
 80133ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133ee:	bc08      	pop	{r3}
 80133f0:	469e      	mov	lr, r3
 80133f2:	4770      	bx	lr

080133f4 <_fini>:
 80133f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133f6:	bf00      	nop
 80133f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80133fa:	bc08      	pop	{r3}
 80133fc:	469e      	mov	lr, r3
 80133fe:	4770      	bx	lr
